cmake_minimum_required(VERSION 2.8.7)
if(CMAKE_SYSTEM_NAME MATCHES "Linux")
    set(BUILD_OS linux)

    if("${CMAKE_BUILD_TYPE}" STREQUAL "")
        set(CMAKE_BUILD_TYPE debug)
    endif()

    string(TOUPPER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE)
    if(CMAKE_BUILD_TYPE MATCHES RELEASE)
        set(BUILD_TYPE_SUFFIX release)
    elseif(CMAKE_BUILD_TYPE MATCHES RELWITHDEBINFO)
        set(BUILD_TYPE_SUFFIX release)
    elseif(CMAKE_BUILD_TYPE MATCHES MINSIZEREL)
        set(BUILD_TYPE_SUFFIX release)
    else()
        set(CMAKE_BUILD_TYPE DEBUG)
        set(BUILD_TYPE_SUFFIX debug)
    endif()

    set(DEFINITIONS -fPIC -g)
    set(BOST_D_BUILD_SUFFIX)
    set(BOST_BUILD_SUFFIX)
    set(LIB_PREFIX)
    set(THREAD pthread)
    #set(VCPKG_INSTALL ${PROJECT_SOURCE_DIR}/vcpkg/installed/x64-linux)
    set(PLAT_LIBS dl pthread aprutil-1 apr-1)
else()
    set(BUILD_OS win)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MT")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
    set(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} /MT")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /MT")
    set(DEFINITIONS -DWIN32_LEAN_AND_MEAN -D_WIN32=0x0601 -D_CRT_SECURE_NO_WARNINGS -DPROTOBUF_USE_DLLS)
    set(PLAT_LIBS ws2_32)
    add_definitions(-wd4251)
    add_definitions(-wd4275)
    add_definitions(-wd4819)
endif()
    
file(GLOB_RECURSE SRCS_LIST  *.h *.inl *.cpp *.c *.cc *.cxx)
set(ALL_FILES STATIC ${SRCS_LIST})
source_group_by_dir("${ALL_FILES}")
add_library(tomnet_base ${ALL_FILES})
if(NOT WIN32)
    target_link_libraries(tomnet_base)
endif()

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bus.proto

#include "bus.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelSvrInfo_bus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewSvrInfo_bus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ping_bus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegSvrInfo_bus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteInfo_bus_2eproto;
namespace bus {
class PingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ping> _instance;
} _Ping_default_instance_;
class RegSvrInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegSvrInfo> _instance;
} _RegSvrInfo_default_instance_;
class NewSvrInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewSvrInfo> _instance;
} _NewSvrInfo_default_instance_;
class DelSvrInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelSvrInfo> _instance;
} _DelSvrInfo_default_instance_;
class RouteInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteInfo> _instance;
} _RouteInfo_default_instance_;
class CommonMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommonMessage> _instance;
} _CommonMessage_default_instance_;
}  // namespace bus
static void InitDefaultsscc_info_CommonMessage_bus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bus::_CommonMessage_default_instance_;
    new (ptr) ::bus::CommonMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bus::CommonMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_CommonMessage_bus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_CommonMessage_bus_2eproto}, {
      &scc_info_Ping_bus_2eproto.base,
      &scc_info_RegSvrInfo_bus_2eproto.base,
      &scc_info_NewSvrInfo_bus_2eproto.base,
      &scc_info_RouteInfo_bus_2eproto.base,
      &scc_info_DelSvrInfo_bus_2eproto.base,}};

static void InitDefaultsscc_info_DelSvrInfo_bus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bus::_DelSvrInfo_default_instance_;
    new (ptr) ::bus::DelSvrInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bus::DelSvrInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelSvrInfo_bus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DelSvrInfo_bus_2eproto}, {}};

static void InitDefaultsscc_info_NewSvrInfo_bus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bus::_NewSvrInfo_default_instance_;
    new (ptr) ::bus::NewSvrInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bus::NewSvrInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewSvrInfo_bus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NewSvrInfo_bus_2eproto}, {}};

static void InitDefaultsscc_info_Ping_bus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bus::_Ping_default_instance_;
    new (ptr) ::bus::Ping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bus::Ping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ping_bus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ping_bus_2eproto}, {}};

static void InitDefaultsscc_info_RegSvrInfo_bus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bus::_RegSvrInfo_default_instance_;
    new (ptr) ::bus::RegSvrInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bus::RegSvrInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegSvrInfo_bus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RegSvrInfo_bus_2eproto}, {
      &scc_info_NewSvrInfo_bus_2eproto.base,}};

static void InitDefaultsscc_info_RouteInfo_bus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bus::_RouteInfo_default_instance_;
    new (ptr) ::bus::RouteInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bus::RouteInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteInfo_bus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteInfo_bus_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bus_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bus_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bus::Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bus::RegSvrInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bus::RegSvrInfo, src_),
  PROTOBUF_FIELD_OFFSET(::bus::RegSvrInfo, dest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bus::NewSvrInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bus::NewSvrInfo, id_),
  PROTOBUF_FIELD_OFFSET(::bus::NewSvrInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::bus::NewSvrInfo, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bus::DelSvrInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bus::DelSvrInfo, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bus::RouteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bus::RouteInfo, destsvr_),
  PROTOBUF_FIELD_OFFSET(::bus::RouteInfo, destst_),
  PROTOBUF_FIELD_OFFSET(::bus::RouteInfo, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bus::CommonMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bus::CommonMessage, code_),
  PROTOBUF_FIELD_OFFSET(::bus::CommonMessage, errorcode_),
  PROTOBUF_FIELD_OFFSET(::bus::CommonMessage, ping_),
  PROTOBUF_FIELD_OFFSET(::bus::CommonMessage, svrinfo_),
  PROTOBUF_FIELD_OFFSET(::bus::CommonMessage, newsvrinfo_),
  PROTOBUF_FIELD_OFFSET(::bus::CommonMessage, routeinfo_),
  PROTOBUF_FIELD_OFFSET(::bus::CommonMessage, delsvrinfo_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bus::Ping)},
  { 5, -1, sizeof(::bus::RegSvrInfo)},
  { 12, -1, sizeof(::bus::NewSvrInfo)},
  { 20, -1, sizeof(::bus::DelSvrInfo)},
  { 26, -1, sizeof(::bus::RouteInfo)},
  { 34, -1, sizeof(::bus::CommonMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bus::_Ping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bus::_RegSvrInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bus::_NewSvrInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bus::_DelSvrInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bus::_RouteInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bus::_CommonMessage_default_instance_),
};

const char descriptor_table_protodef_bus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tbus.proto\022\003bus\"\006\n\004Ping\"I\n\nRegSvrInfo\022\034"
  "\n\003src\030\001 \001(\0132\017.bus.NewSvrInfo\022\035\n\004dest\030\002 \001"
  "(\0132\017.bus.NewSvrInfo\"2\n\nNewSvrInfo\022\n\n\002Id\030"
  "\001 \001(\003\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003 \001(\t\"\030\n\nDelSv"
  "rInfo\022\n\n\002Id\030\001 \001(\003\"9\n\tRouteInfo\022\017\n\007destSv"
  "r\030\001 \001(\003\022\016\n\006destSt\030\002 \001(\003\022\013\n\003msg\030\004 \001(\014\"\362\001\n"
  "\rCommonMessage\022\026\n\004code\030\001 \001(\0162\010.bus.Cmd\022!"
  "\n\terrorCode\030\002 \001(\0162\016.bus.ErrorCode\022\027\n\004pin"
  "g\030\n \001(\0132\t.bus.Ping\022 \n\007svrInfo\030\013 \001(\0132\017.bu"
  "s.RegSvrInfo\022#\n\nnewSvrInfo\030\014 \001(\0132\017.bus.N"
  "ewSvrInfo\022!\n\trouteInfo\030\r \001(\0132\016.bus.Route"
  "Info\022#\n\ndelSvrInfo\030\016 \001(\0132\017.bus.DelSvrInf"
  "o*O\n\003Cmd\022\010\n\004NONE\020\000\022\013\n\007REG_SVR\020\001\022\010\n\004PING\020"
  "\002\022\013\n\007NEW_SVR\020\003\022\013\n\007DEL_SVR\020\004\022\r\n\tROUTE_MSG"
  "\020\005*,\n\tErrorCode\022\013\n\007SUCCESS\020\000\022\022\n\rSYSTEM_U"
  "NKNOW\020\347\007b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bus_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bus_2eproto_sccs[6] = {
  &scc_info_CommonMessage_bus_2eproto.base,
  &scc_info_DelSvrInfo_bus_2eproto.base,
  &scc_info_NewSvrInfo_bus_2eproto.base,
  &scc_info_Ping_bus_2eproto.base,
  &scc_info_RegSvrInfo_bus_2eproto.base,
  &scc_info_RouteInfo_bus_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bus_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bus_2eproto = {
  false, false, descriptor_table_protodef_bus_2eproto, "bus.proto", 616,
  &descriptor_table_bus_2eproto_once, descriptor_table_bus_2eproto_sccs, descriptor_table_bus_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_bus_2eproto::offsets,
  file_level_metadata_bus_2eproto, 6, file_level_enum_descriptors_bus_2eproto, file_level_service_descriptors_bus_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bus_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bus_2eproto)), true);
namespace bus {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cmd_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bus_2eproto);
  return file_level_enum_descriptors_bus_2eproto[0];
}
bool Cmd_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bus_2eproto);
  return file_level_enum_descriptors_bus_2eproto[1];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 999:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Ping::InitAsDefaultInstance() {
}
class Ping::_Internal {
 public:
};

Ping::Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bus.Ping)
}
Ping::Ping(const Ping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bus.Ping)
}

void Ping::SharedCtor() {
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:bus.Ping)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ping::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Ping::ArenaDtor(void* object) {
  Ping* _this = reinterpret_cast< Ping* >(object);
  (void)_this;
}
void Ping::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ping& Ping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ping_bus_2eproto.base);
  return *internal_default_instance();
}


void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:bus.Ping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bus.Ping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bus.Ping)
  return target;
}

size_t Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bus.Ping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bus.Ping)
  GOOGLE_DCHECK_NE(&from, this);
  const Ping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bus.Ping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bus.Ping)
    MergeFrom(*source);
  }
}

void Ping::MergeFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bus.Ping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Ping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bus.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bus.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {
  return true;
}

void Ping::InternalSwap(Ping* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegSvrInfo::InitAsDefaultInstance() {
  ::bus::_RegSvrInfo_default_instance_._instance.get_mutable()->src_ = const_cast< ::bus::NewSvrInfo*>(
      ::bus::NewSvrInfo::internal_default_instance());
  ::bus::_RegSvrInfo_default_instance_._instance.get_mutable()->dest_ = const_cast< ::bus::NewSvrInfo*>(
      ::bus::NewSvrInfo::internal_default_instance());
}
class RegSvrInfo::_Internal {
 public:
  static const ::bus::NewSvrInfo& src(const RegSvrInfo* msg);
  static const ::bus::NewSvrInfo& dest(const RegSvrInfo* msg);
};

const ::bus::NewSvrInfo&
RegSvrInfo::_Internal::src(const RegSvrInfo* msg) {
  return *msg->src_;
}
const ::bus::NewSvrInfo&
RegSvrInfo::_Internal::dest(const RegSvrInfo* msg) {
  return *msg->dest_;
}
RegSvrInfo::RegSvrInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bus.RegSvrInfo)
}
RegSvrInfo::RegSvrInfo(const RegSvrInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_src()) {
    src_ = new ::bus::NewSvrInfo(*from.src_);
  } else {
    src_ = nullptr;
  }
  if (from._internal_has_dest()) {
    dest_ = new ::bus::NewSvrInfo(*from.dest_);
  } else {
    dest_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bus.RegSvrInfo)
}

void RegSvrInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegSvrInfo_bus_2eproto.base);
  ::memset(&src_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dest_) -
      reinterpret_cast<char*>(&src_)) + sizeof(dest_));
}

RegSvrInfo::~RegSvrInfo() {
  // @@protoc_insertion_point(destructor:bus.RegSvrInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegSvrInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete src_;
  if (this != internal_default_instance()) delete dest_;
}

void RegSvrInfo::ArenaDtor(void* object) {
  RegSvrInfo* _this = reinterpret_cast< RegSvrInfo* >(object);
  (void)_this;
}
void RegSvrInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegSvrInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegSvrInfo& RegSvrInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegSvrInfo_bus_2eproto.base);
  return *internal_default_instance();
}


void RegSvrInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:bus.RegSvrInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && src_ != nullptr) {
    delete src_;
  }
  src_ = nullptr;
  if (GetArena() == nullptr && dest_ != nullptr) {
    delete dest_;
  }
  dest_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegSvrInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bus.NewSvrInfo src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_src(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bus.NewSvrInfo dest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegSvrInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bus.RegSvrInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bus.NewSvrInfo src = 1;
  if (this->has_src()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::src(this), target, stream);
  }

  // .bus.NewSvrInfo dest = 2;
  if (this->has_dest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dest(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bus.RegSvrInfo)
  return target;
}

size_t RegSvrInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bus.RegSvrInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bus.NewSvrInfo src = 1;
  if (this->has_src()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_);
  }

  // .bus.NewSvrInfo dest = 2;
  if (this->has_dest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dest_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegSvrInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bus.RegSvrInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RegSvrInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegSvrInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bus.RegSvrInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bus.RegSvrInfo)
    MergeFrom(*source);
  }
}

void RegSvrInfo::MergeFrom(const RegSvrInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bus.RegSvrInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_src()) {
    _internal_mutable_src()->::bus::NewSvrInfo::MergeFrom(from._internal_src());
  }
  if (from.has_dest()) {
    _internal_mutable_dest()->::bus::NewSvrInfo::MergeFrom(from._internal_dest());
  }
}

void RegSvrInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bus.RegSvrInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegSvrInfo::CopyFrom(const RegSvrInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bus.RegSvrInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegSvrInfo::IsInitialized() const {
  return true;
}

void RegSvrInfo::InternalSwap(RegSvrInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegSvrInfo, dest_)
      + sizeof(RegSvrInfo::dest_)
      - PROTOBUF_FIELD_OFFSET(RegSvrInfo, src_)>(
          reinterpret_cast<char*>(&src_),
          reinterpret_cast<char*>(&other->src_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegSvrInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewSvrInfo::InitAsDefaultInstance() {
}
class NewSvrInfo::_Internal {
 public:
};

NewSvrInfo::NewSvrInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bus.NewSvrInfo)
}
NewSvrInfo::NewSvrInfo(const NewSvrInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_port().empty()) {
    port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_port(),
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:bus.NewSvrInfo)
}

void NewSvrInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewSvrInfo_bus_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
}

NewSvrInfo::~NewSvrInfo() {
  // @@protoc_insertion_point(destructor:bus.NewSvrInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewSvrInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewSvrInfo::ArenaDtor(void* object) {
  NewSvrInfo* _this = reinterpret_cast< NewSvrInfo* >(object);
  (void)_this;
}
void NewSvrInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewSvrInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewSvrInfo& NewSvrInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewSvrInfo_bus_2eproto.base);
  return *internal_default_instance();
}


void NewSvrInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:bus.NewSvrInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewSvrInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bus.NewSvrInfo.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_port();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bus.NewSvrInfo.port"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewSvrInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bus.NewSvrInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bus.NewSvrInfo.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // string port = 3;
  if (this->port().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_port().data(), static_cast<int>(this->_internal_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bus.NewSvrInfo.port");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bus.NewSvrInfo)
  return target;
}

size_t NewSvrInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bus.NewSvrInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string port = 3;
  if (this->port().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_port());
  }

  // int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewSvrInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bus.NewSvrInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NewSvrInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewSvrInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bus.NewSvrInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bus.NewSvrInfo)
    MergeFrom(*source);
  }
}

void NewSvrInfo::MergeFrom(const NewSvrInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bus.NewSvrInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.port().size() > 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void NewSvrInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bus.NewSvrInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewSvrInfo::CopyFrom(const NewSvrInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bus.NewSvrInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewSvrInfo::IsInitialized() const {
  return true;
}

void NewSvrInfo::InternalSwap(NewSvrInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_.Swap(&other->port_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewSvrInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DelSvrInfo::InitAsDefaultInstance() {
}
class DelSvrInfo::_Internal {
 public:
};

DelSvrInfo::DelSvrInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bus.DelSvrInfo)
}
DelSvrInfo::DelSvrInfo(const DelSvrInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:bus.DelSvrInfo)
}

void DelSvrInfo::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

DelSvrInfo::~DelSvrInfo() {
  // @@protoc_insertion_point(destructor:bus.DelSvrInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DelSvrInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DelSvrInfo::ArenaDtor(void* object) {
  DelSvrInfo* _this = reinterpret_cast< DelSvrInfo* >(object);
  (void)_this;
}
void DelSvrInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelSvrInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelSvrInfo& DelSvrInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelSvrInfo_bus_2eproto.base);
  return *internal_default_instance();
}


void DelSvrInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:bus.DelSvrInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelSvrInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelSvrInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bus.DelSvrInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bus.DelSvrInfo)
  return target;
}

size_t DelSvrInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bus.DelSvrInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelSvrInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bus.DelSvrInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DelSvrInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelSvrInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bus.DelSvrInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bus.DelSvrInfo)
    MergeFrom(*source);
  }
}

void DelSvrInfo::MergeFrom(const DelSvrInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bus.DelSvrInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void DelSvrInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bus.DelSvrInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelSvrInfo::CopyFrom(const DelSvrInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bus.DelSvrInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelSvrInfo::IsInitialized() const {
  return true;
}

void DelSvrInfo::InternalSwap(DelSvrInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelSvrInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteInfo::InitAsDefaultInstance() {
}
class RouteInfo::_Internal {
 public:
};

RouteInfo::RouteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bus.RouteInfo)
}
RouteInfo::RouteInfo(const RouteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_msg(),
      GetArena());
  }
  ::memcpy(&destsvr_, &from.destsvr_,
    static_cast<size_t>(reinterpret_cast<char*>(&destst_) -
    reinterpret_cast<char*>(&destsvr_)) + sizeof(destst_));
  // @@protoc_insertion_point(copy_constructor:bus.RouteInfo)
}

void RouteInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RouteInfo_bus_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&destsvr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destst_) -
      reinterpret_cast<char*>(&destsvr_)) + sizeof(destst_));
}

RouteInfo::~RouteInfo() {
  // @@protoc_insertion_point(destructor:bus.RouteInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouteInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RouteInfo::ArenaDtor(void* object) {
  RouteInfo* _this = reinterpret_cast< RouteInfo* >(object);
  (void)_this;
}
void RouteInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteInfo& RouteInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteInfo_bus_2eproto.base);
  return *internal_default_instance();
}


void RouteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:bus.RouteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&destsvr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destst_) -
      reinterpret_cast<char*>(&destsvr_)) + sizeof(destst_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 destSvr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          destsvr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 destSt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          destst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bus.RouteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 destSvr = 1;
  if (this->destsvr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_destsvr(), target);
  }

  // int64 destSt = 2;
  if (this->destst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_destst(), target);
  }

  // bytes msg = 4;
  if (this->msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bus.RouteInfo)
  return target;
}

size_t RouteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bus.RouteInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 4;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  // int64 destSvr = 1;
  if (this->destsvr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_destsvr());
  }

  // int64 destSt = 2;
  if (this->destst() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_destst());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bus.RouteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bus.RouteInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bus.RouteInfo)
    MergeFrom(*source);
  }
}

void RouteInfo::MergeFrom(const RouteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bus.RouteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.destsvr() != 0) {
    _internal_set_destsvr(from._internal_destsvr());
  }
  if (from.destst() != 0) {
    _internal_set_destst(from._internal_destst());
  }
}

void RouteInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bus.RouteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteInfo::CopyFrom(const RouteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bus.RouteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteInfo::IsInitialized() const {
  return true;
}

void RouteInfo::InternalSwap(RouteInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteInfo, destst_)
      + sizeof(RouteInfo::destst_)
      - PROTOBUF_FIELD_OFFSET(RouteInfo, destsvr_)>(
          reinterpret_cast<char*>(&destsvr_),
          reinterpret_cast<char*>(&other->destsvr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommonMessage::InitAsDefaultInstance() {
  ::bus::_CommonMessage_default_instance_._instance.get_mutable()->ping_ = const_cast< ::bus::Ping*>(
      ::bus::Ping::internal_default_instance());
  ::bus::_CommonMessage_default_instance_._instance.get_mutable()->svrinfo_ = const_cast< ::bus::RegSvrInfo*>(
      ::bus::RegSvrInfo::internal_default_instance());
  ::bus::_CommonMessage_default_instance_._instance.get_mutable()->newsvrinfo_ = const_cast< ::bus::NewSvrInfo*>(
      ::bus::NewSvrInfo::internal_default_instance());
  ::bus::_CommonMessage_default_instance_._instance.get_mutable()->routeinfo_ = const_cast< ::bus::RouteInfo*>(
      ::bus::RouteInfo::internal_default_instance());
  ::bus::_CommonMessage_default_instance_._instance.get_mutable()->delsvrinfo_ = const_cast< ::bus::DelSvrInfo*>(
      ::bus::DelSvrInfo::internal_default_instance());
}
class CommonMessage::_Internal {
 public:
  static const ::bus::Ping& ping(const CommonMessage* msg);
  static const ::bus::RegSvrInfo& svrinfo(const CommonMessage* msg);
  static const ::bus::NewSvrInfo& newsvrinfo(const CommonMessage* msg);
  static const ::bus::RouteInfo& routeinfo(const CommonMessage* msg);
  static const ::bus::DelSvrInfo& delsvrinfo(const CommonMessage* msg);
};

const ::bus::Ping&
CommonMessage::_Internal::ping(const CommonMessage* msg) {
  return *msg->ping_;
}
const ::bus::RegSvrInfo&
CommonMessage::_Internal::svrinfo(const CommonMessage* msg) {
  return *msg->svrinfo_;
}
const ::bus::NewSvrInfo&
CommonMessage::_Internal::newsvrinfo(const CommonMessage* msg) {
  return *msg->newsvrinfo_;
}
const ::bus::RouteInfo&
CommonMessage::_Internal::routeinfo(const CommonMessage* msg) {
  return *msg->routeinfo_;
}
const ::bus::DelSvrInfo&
CommonMessage::_Internal::delsvrinfo(const CommonMessage* msg) {
  return *msg->delsvrinfo_;
}
CommonMessage::CommonMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bus.CommonMessage)
}
CommonMessage::CommonMessage(const CommonMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ping()) {
    ping_ = new ::bus::Ping(*from.ping_);
  } else {
    ping_ = nullptr;
  }
  if (from._internal_has_svrinfo()) {
    svrinfo_ = new ::bus::RegSvrInfo(*from.svrinfo_);
  } else {
    svrinfo_ = nullptr;
  }
  if (from._internal_has_newsvrinfo()) {
    newsvrinfo_ = new ::bus::NewSvrInfo(*from.newsvrinfo_);
  } else {
    newsvrinfo_ = nullptr;
  }
  if (from._internal_has_routeinfo()) {
    routeinfo_ = new ::bus::RouteInfo(*from.routeinfo_);
  } else {
    routeinfo_ = nullptr;
  }
  if (from._internal_has_delsvrinfo()) {
    delsvrinfo_ = new ::bus::DelSvrInfo(*from.delsvrinfo_);
  } else {
    delsvrinfo_ = nullptr;
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&code_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:bus.CommonMessage)
}

void CommonMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommonMessage_bus_2eproto.base);
  ::memset(&ping_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&ping_)) + sizeof(errorcode_));
}

CommonMessage::~CommonMessage() {
  // @@protoc_insertion_point(destructor:bus.CommonMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ping_;
  if (this != internal_default_instance()) delete svrinfo_;
  if (this != internal_default_instance()) delete newsvrinfo_;
  if (this != internal_default_instance()) delete routeinfo_;
  if (this != internal_default_instance()) delete delsvrinfo_;
}

void CommonMessage::ArenaDtor(void* object) {
  CommonMessage* _this = reinterpret_cast< CommonMessage* >(object);
  (void)_this;
}
void CommonMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommonMessage& CommonMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommonMessage_bus_2eproto.base);
  return *internal_default_instance();
}


void CommonMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:bus.CommonMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ping_ != nullptr) {
    delete ping_;
  }
  ping_ = nullptr;
  if (GetArena() == nullptr && svrinfo_ != nullptr) {
    delete svrinfo_;
  }
  svrinfo_ = nullptr;
  if (GetArena() == nullptr && newsvrinfo_ != nullptr) {
    delete newsvrinfo_;
  }
  newsvrinfo_ = nullptr;
  if (GetArena() == nullptr && routeinfo_ != nullptr) {
    delete routeinfo_;
  }
  routeinfo_ = nullptr;
  if (GetArena() == nullptr && delsvrinfo_ != nullptr) {
    delete delsvrinfo_;
  }
  delsvrinfo_ = nullptr;
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&code_)) + sizeof(errorcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bus.Cmd code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::bus::Cmd>(val));
        } else goto handle_unusual;
        continue;
      // .bus.ErrorCode errorCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_errorcode(static_cast<::bus::ErrorCode>(val));
        } else goto handle_unusual;
        continue;
      // .bus.Ping ping = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bus.RegSvrInfo svrInfo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_svrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bus.NewSvrInfo newSvrInfo = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_newsvrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bus.RouteInfo routeInfo = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_routeinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bus.DelSvrInfo delSvrInfo = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_delsvrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bus.CommonMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bus.Cmd code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // .bus.ErrorCode errorCode = 2;
  if (this->errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_errorcode(), target);
  }

  // .bus.Ping ping = 10;
  if (this->has_ping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::ping(this), target, stream);
  }

  // .bus.RegSvrInfo svrInfo = 11;
  if (this->has_svrinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::svrinfo(this), target, stream);
  }

  // .bus.NewSvrInfo newSvrInfo = 12;
  if (this->has_newsvrinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::newsvrinfo(this), target, stream);
  }

  // .bus.RouteInfo routeInfo = 13;
  if (this->has_routeinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::routeinfo(this), target, stream);
  }

  // .bus.DelSvrInfo delSvrInfo = 14;
  if (this->has_delsvrinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::delsvrinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bus.CommonMessage)
  return target;
}

size_t CommonMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bus.CommonMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bus.Ping ping = 10;
  if (this->has_ping()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ping_);
  }

  // .bus.RegSvrInfo svrInfo = 11;
  if (this->has_svrinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *svrinfo_);
  }

  // .bus.NewSvrInfo newSvrInfo = 12;
  if (this->has_newsvrinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *newsvrinfo_);
  }

  // .bus.RouteInfo routeInfo = 13;
  if (this->has_routeinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *routeinfo_);
  }

  // .bus.DelSvrInfo delSvrInfo = 14;
  if (this->has_delsvrinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *delsvrinfo_);
  }

  // .bus.Cmd code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  // .bus.ErrorCode errorCode = 2;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_errorcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bus.CommonMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bus.CommonMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bus.CommonMessage)
    MergeFrom(*source);
  }
}

void CommonMessage::MergeFrom(const CommonMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bus.CommonMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ping()) {
    _internal_mutable_ping()->::bus::Ping::MergeFrom(from._internal_ping());
  }
  if (from.has_svrinfo()) {
    _internal_mutable_svrinfo()->::bus::RegSvrInfo::MergeFrom(from._internal_svrinfo());
  }
  if (from.has_newsvrinfo()) {
    _internal_mutable_newsvrinfo()->::bus::NewSvrInfo::MergeFrom(from._internal_newsvrinfo());
  }
  if (from.has_routeinfo()) {
    _internal_mutable_routeinfo()->::bus::RouteInfo::MergeFrom(from._internal_routeinfo());
  }
  if (from.has_delsvrinfo()) {
    _internal_mutable_delsvrinfo()->::bus::DelSvrInfo::MergeFrom(from._internal_delsvrinfo());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.errorcode() != 0) {
    _internal_set_errorcode(from._internal_errorcode());
  }
}

void CommonMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bus.CommonMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonMessage::CopyFrom(const CommonMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bus.CommonMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonMessage::IsInitialized() const {
  return true;
}

void CommonMessage::InternalSwap(CommonMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonMessage, errorcode_)
      + sizeof(CommonMessage::errorcode_)
      - PROTOBUF_FIELD_OFFSET(CommonMessage, ping_)>(
          reinterpret_cast<char*>(&ping_),
          reinterpret_cast<char*>(&other->ping_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bus::Ping* Arena::CreateMaybeMessage< ::bus::Ping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bus::Ping >(arena);
}
template<> PROTOBUF_NOINLINE ::bus::RegSvrInfo* Arena::CreateMaybeMessage< ::bus::RegSvrInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bus::RegSvrInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::bus::NewSvrInfo* Arena::CreateMaybeMessage< ::bus::NewSvrInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bus::NewSvrInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::bus::DelSvrInfo* Arena::CreateMaybeMessage< ::bus::DelSvrInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bus::DelSvrInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::bus::RouteInfo* Arena::CreateMaybeMessage< ::bus::RouteInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bus::RouteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::bus::CommonMessage* Arena::CreateMaybeMessage< ::bus::CommonMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bus::CommonMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ss_proto.proto

#include "ss_proto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddDBNtf_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateRoleAck_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateRoleReq_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FriendAddAck_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FriendAddReq_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FriendDelAck_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FriendDelReq_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FriendInfo_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FriendListAck_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FriendListReq_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KickUserNtf_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadRolePackageAck_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadRolePackageReq_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadRoleSkillAck_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadRoleSkillReq_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogDataAck_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogDataReq_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoginGameAck_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginGameReq_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginSwtichAck_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginSwtichReq_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginWorldAck_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginWorldReq_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogoutGameAck_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogoutGameReq_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewMailNtf_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleBoardAck_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleBoardReq_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleDatas_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SaveRoleAck_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SaveRoleReq_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SceneProcAck_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SceneProcReq_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SceneUpdateAck_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SceneUpdateReq_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchBossAck_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchBossReq_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerCastNtf_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerCmd_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerReport_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncRole_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncRoleNtf_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopNListAck_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopNListReq_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopNUpdateAck_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopNUpdateReq_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserLoginAck_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserLoginReq_ss_5fproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserRole_ss_5fproto_2eproto;
namespace ss_proto {
class AddDBNtfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddDBNtf> _instance;
} _AddDBNtf_default_instance_;
class ServerReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerReport> _instance;
} _ServerReport_default_instance_;
class ServerCmdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerCmd> _instance;
} _ServerCmd_default_instance_;
class ServerCastNtfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerCastNtf> _instance;
} _ServerCastNtf_default_instance_;
class NewMailNtfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewMailNtf> _instance;
} _NewMailNtf_default_instance_;
class UserLoginReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserLoginReq> _instance;
} _UserLoginReq_default_instance_;
class UserRoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserRole> _instance;
} _UserRole_default_instance_;
class UserLoginAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserLoginAck> _instance;
} _UserLoginAck_default_instance_;
class LoginWorldReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginWorldReq> _instance;
} _LoginWorldReq_default_instance_;
class LoginWorldAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginWorldAck> _instance;
} _LoginWorldAck_default_instance_;
class LoginGameReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginGameReq> _instance;
} _LoginGameReq_default_instance_;
class RoleDatasDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleDatas> _instance;
} _RoleDatas_default_instance_;
class LoginGameAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginGameAck> _instance;
} _LoginGameAck_default_instance_;
class LogoutGameReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogoutGameReq> _instance;
} _LogoutGameReq_default_instance_;
class LogoutGameAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogoutGameAck> _instance;
} _LogoutGameAck_default_instance_;
class CreateRoleReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateRoleReq> _instance;
} _CreateRoleReq_default_instance_;
class CreateRoleAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateRoleAck> _instance;
} _CreateRoleAck_default_instance_;
class SaveRoleReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SaveRoleReq> _instance;
} _SaveRoleReq_default_instance_;
class SaveRoleAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SaveRoleAck> _instance;
} _SaveRoleAck_default_instance_;
class KickUserNtfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KickUserNtf> _instance;
} _KickUserNtf_default_instance_;
class SyncRoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncRole> _instance;
} _SyncRole_default_instance_;
class SyncRoleNtfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncRoleNtf> _instance;
} _SyncRoleNtf_default_instance_;
class SearchBossReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchBossReq> _instance;
} _SearchBossReq_default_instance_;
class SearchBossAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchBossAck> _instance;
} _SearchBossAck_default_instance_;
class LogDataReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogDataReq> _instance;
} _LogDataReq_default_instance_;
class LogDataAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogDataAck> _instance;
} _LogDataAck_default_instance_;
class LoadRoleSkillReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadRoleSkillReq> _instance;
} _LoadRoleSkillReq_default_instance_;
class LoadRoleSkillAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadRoleSkillAck> _instance;
} _LoadRoleSkillAck_default_instance_;
class LoadRolePackageReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadRolePackageReq> _instance;
} _LoadRolePackageReq_default_instance_;
class LoadRolePackageAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadRolePackageAck> _instance;
} _LoadRolePackageAck_default_instance_;
class SaveRolePackageReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SaveRolePackageReq> _instance;
} _SaveRolePackageReq_default_instance_;
class SaveRolePackageAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SaveRolePackageAck> _instance;
} _SaveRolePackageAck_default_instance_;
class FriendAddReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FriendAddReq> _instance;
} _FriendAddReq_default_instance_;
class FriendAddAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FriendAddAck> _instance;
} _FriendAddAck_default_instance_;
class FriendDelReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FriendDelReq> _instance;
} _FriendDelReq_default_instance_;
class FriendDelAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FriendDelAck> _instance;
} _FriendDelAck_default_instance_;
class FriendInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FriendInfo> _instance;
} _FriendInfo_default_instance_;
class FriendListReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FriendListReq> _instance;
} _FriendListReq_default_instance_;
class FriendListAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FriendListAck> _instance;
} _FriendListAck_default_instance_;
class RoleBoardReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleBoardReq> _instance;
} _RoleBoardReq_default_instance_;
class RoleBoardAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleBoardAck> _instance;
} _RoleBoardAck_default_instance_;
class RoleMailReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleMailReq> _instance;
} _RoleMailReq_default_instance_;
class RoleMailAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleMailAck> _instance;
} _RoleMailAck_default_instance_;
class TopNUpdateReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopNUpdateReq> _instance;
} _TopNUpdateReq_default_instance_;
class TopNUpdateAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopNUpdateAck> _instance;
} _TopNUpdateAck_default_instance_;
class TopNListReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopNListReq> _instance;
} _TopNListReq_default_instance_;
class TopNListAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopNListAck> _instance;
} _TopNListAck_default_instance_;
class SceneUpdateReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SceneUpdateReq> _instance;
} _SceneUpdateReq_default_instance_;
class SceneUpdateAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SceneUpdateAck> _instance;
} _SceneUpdateAck_default_instance_;
class SceneProcReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SceneProcReq> _instance;
} _SceneProcReq_default_instance_;
class SceneProcAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SceneProcAck> _instance;
} _SceneProcAck_default_instance_;
class LoginSwtichReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginSwtichReq> _instance;
} _LoginSwtichReq_default_instance_;
class LoginSwtichAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginSwtichAck> _instance;
} _LoginSwtichAck_default_instance_;
class LoadInteractionReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadInteractionReq> _instance;
} _LoadInteractionReq_default_instance_;
class LoadInteractionAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadInteractionAck> _instance;
} _LoadInteractionAck_default_instance_;
class CommonMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommonMessage> _instance;
} _CommonMessage_default_instance_;
}  // namespace ss_proto
static void InitDefaultsscc_info_AddDBNtf_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_AddDBNtf_default_instance_;
    new (ptr) ::ss_proto::AddDBNtf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::AddDBNtf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddDBNtf_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddDBNtf_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_CommonMessage_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_CommonMessage_default_instance_;
    new (ptr) ::ss_proto::CommonMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::CommonMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<45> scc_info_CommonMessage_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 45, 0, InitDefaultsscc_info_CommonMessage_ss_5fproto_2eproto}, {
      &scc_info_AddDBNtf_ss_5fproto_2eproto.base,
      &scc_info_ServerCmd_ss_5fproto_2eproto.base,
      &scc_info_NewMailNtf_ss_5fproto_2eproto.base,
      &scc_info_ServerReport_ss_5fproto_2eproto.base,
      &scc_info_ServerCastNtf_ss_5fproto_2eproto.base,
      &scc_info_TopNUpdateReq_ss_5fproto_2eproto.base,
      &scc_info_TopNUpdateAck_ss_5fproto_2eproto.base,
      &scc_info_TopNListReq_ss_5fproto_2eproto.base,
      &scc_info_TopNListAck_ss_5fproto_2eproto.base,
      &scc_info_UserLoginReq_ss_5fproto_2eproto.base,
      &scc_info_UserLoginAck_ss_5fproto_2eproto.base,
      &scc_info_LoginWorldReq_ss_5fproto_2eproto.base,
      &scc_info_LoginWorldAck_ss_5fproto_2eproto.base,
      &scc_info_LoginGameReq_ss_5fproto_2eproto.base,
      &scc_info_LoginGameAck_ss_5fproto_2eproto.base,
      &scc_info_LogoutGameReq_ss_5fproto_2eproto.base,
      &scc_info_LogoutGameAck_ss_5fproto_2eproto.base,
      &scc_info_CreateRoleReq_ss_5fproto_2eproto.base,
      &scc_info_CreateRoleAck_ss_5fproto_2eproto.base,
      &scc_info_SaveRoleReq_ss_5fproto_2eproto.base,
      &scc_info_SaveRoleAck_ss_5fproto_2eproto.base,
      &scc_info_KickUserNtf_ss_5fproto_2eproto.base,
      &scc_info_SyncRoleNtf_ss_5fproto_2eproto.base,
      &scc_info_SearchBossReq_ss_5fproto_2eproto.base,
      &scc_info_SearchBossAck_ss_5fproto_2eproto.base,
      &scc_info_LogDataReq_ss_5fproto_2eproto.base,
      &scc_info_LogDataAck_ss_5fproto_2eproto.base,
      &scc_info_LoadRoleSkillReq_ss_5fproto_2eproto.base,
      &scc_info_LoadRoleSkillAck_ss_5fproto_2eproto.base,
      &scc_info_LoadRolePackageReq_ss_5fproto_2eproto.base,
      &scc_info_LoadRolePackageAck_ss_5fproto_2eproto.base,
      &scc_info_FriendAddReq_ss_5fproto_2eproto.base,
      &scc_info_FriendAddAck_ss_5fproto_2eproto.base,
      &scc_info_FriendDelReq_ss_5fproto_2eproto.base,
      &scc_info_FriendDelAck_ss_5fproto_2eproto.base,
      &scc_info_FriendListReq_ss_5fproto_2eproto.base,
      &scc_info_FriendListAck_ss_5fproto_2eproto.base,
      &scc_info_RoleBoardReq_ss_5fproto_2eproto.base,
      &scc_info_RoleBoardAck_ss_5fproto_2eproto.base,
      &scc_info_SceneUpdateReq_ss_5fproto_2eproto.base,
      &scc_info_SceneUpdateAck_ss_5fproto_2eproto.base,
      &scc_info_SceneProcReq_ss_5fproto_2eproto.base,
      &scc_info_SceneProcAck_ss_5fproto_2eproto.base,
      &scc_info_LoginSwtichReq_ss_5fproto_2eproto.base,
      &scc_info_LoginSwtichAck_ss_5fproto_2eproto.base,}};

static void InitDefaultsscc_info_CreateRoleAck_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_CreateRoleAck_default_instance_;
    new (ptr) ::ss_proto::CreateRoleAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::CreateRoleAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateRoleAck_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateRoleAck_ss_5fproto_2eproto}, {
      &scc_info_RoleDatas_ss_5fproto_2eproto.base,}};

static void InitDefaultsscc_info_CreateRoleReq_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_CreateRoleReq_default_instance_;
    new (ptr) ::ss_proto::CreateRoleReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::CreateRoleReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateRoleReq_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateRoleReq_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_FriendAddAck_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_FriendAddAck_default_instance_;
    new (ptr) ::ss_proto::FriendAddAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::FriendAddAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FriendAddAck_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FriendAddAck_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_FriendAddReq_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_FriendAddReq_default_instance_;
    new (ptr) ::ss_proto::FriendAddReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::FriendAddReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FriendAddReq_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FriendAddReq_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_FriendDelAck_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_FriendDelAck_default_instance_;
    new (ptr) ::ss_proto::FriendDelAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::FriendDelAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FriendDelAck_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FriendDelAck_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_FriendDelReq_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_FriendDelReq_default_instance_;
    new (ptr) ::ss_proto::FriendDelReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::FriendDelReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FriendDelReq_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FriendDelReq_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_FriendInfo_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_FriendInfo_default_instance_;
    new (ptr) ::ss_proto::FriendInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::FriendInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FriendInfo_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FriendInfo_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_FriendListAck_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_FriendListAck_default_instance_;
    new (ptr) ::ss_proto::FriendListAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::FriendListAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FriendListAck_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FriendListAck_ss_5fproto_2eproto}, {
      &scc_info_FriendInfo_ss_5fproto_2eproto.base,}};

static void InitDefaultsscc_info_FriendListReq_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_FriendListReq_default_instance_;
    new (ptr) ::ss_proto::FriendListReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::FriendListReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FriendListReq_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FriendListReq_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_KickUserNtf_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_KickUserNtf_default_instance_;
    new (ptr) ::ss_proto::KickUserNtf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::KickUserNtf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KickUserNtf_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KickUserNtf_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_LoadInteractionAck_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_LoadInteractionAck_default_instance_;
    new (ptr) ::ss_proto::LoadInteractionAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::LoadInteractionAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadInteractionAck_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoadInteractionAck_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_LoadInteractionReq_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_LoadInteractionReq_default_instance_;
    new (ptr) ::ss_proto::LoadInteractionReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::LoadInteractionReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadInteractionReq_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoadInteractionReq_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_LoadRolePackageAck_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_LoadRolePackageAck_default_instance_;
    new (ptr) ::ss_proto::LoadRolePackageAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::LoadRolePackageAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadRolePackageAck_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoadRolePackageAck_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_LoadRolePackageReq_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_LoadRolePackageReq_default_instance_;
    new (ptr) ::ss_proto::LoadRolePackageReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::LoadRolePackageReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadRolePackageReq_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoadRolePackageReq_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_LoadRoleSkillAck_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_LoadRoleSkillAck_default_instance_;
    new (ptr) ::ss_proto::LoadRoleSkillAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::LoadRoleSkillAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadRoleSkillAck_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoadRoleSkillAck_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_LoadRoleSkillReq_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_LoadRoleSkillReq_default_instance_;
    new (ptr) ::ss_proto::LoadRoleSkillReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::LoadRoleSkillReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadRoleSkillReq_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoadRoleSkillReq_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_LogDataAck_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_LogDataAck_default_instance_;
    new (ptr) ::ss_proto::LogDataAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::LogDataAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogDataAck_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogDataAck_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_LogDataReq_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_LogDataReq_default_instance_;
    new (ptr) ::ss_proto::LogDataReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::LogDataReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogDataReq_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogDataReq_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_LoginGameAck_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_LoginGameAck_default_instance_;
    new (ptr) ::ss_proto::LoginGameAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::LoginGameAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoginGameAck_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoginGameAck_ss_5fproto_2eproto}, {
      &scc_info_RoleDatas_ss_5fproto_2eproto.base,}};

static void InitDefaultsscc_info_LoginGameReq_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_LoginGameReq_default_instance_;
    new (ptr) ::ss_proto::LoginGameReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::LoginGameReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginGameReq_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginGameReq_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_LoginSwtichAck_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_LoginSwtichAck_default_instance_;
    new (ptr) ::ss_proto::LoginSwtichAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::LoginSwtichAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginSwtichAck_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginSwtichAck_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_LoginSwtichReq_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_LoginSwtichReq_default_instance_;
    new (ptr) ::ss_proto::LoginSwtichReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::LoginSwtichReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginSwtichReq_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginSwtichReq_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_LoginWorldAck_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_LoginWorldAck_default_instance_;
    new (ptr) ::ss_proto::LoginWorldAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::LoginWorldAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginWorldAck_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginWorldAck_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_LoginWorldReq_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_LoginWorldReq_default_instance_;
    new (ptr) ::ss_proto::LoginWorldReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::LoginWorldReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginWorldReq_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginWorldReq_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_LogoutGameAck_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_LogoutGameAck_default_instance_;
    new (ptr) ::ss_proto::LogoutGameAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::LogoutGameAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogoutGameAck_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogoutGameAck_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_LogoutGameReq_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_LogoutGameReq_default_instance_;
    new (ptr) ::ss_proto::LogoutGameReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::LogoutGameReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogoutGameReq_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogoutGameReq_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_NewMailNtf_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_NewMailNtf_default_instance_;
    new (ptr) ::ss_proto::NewMailNtf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::NewMailNtf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewMailNtf_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NewMailNtf_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_RoleBoardAck_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_RoleBoardAck_default_instance_;
    new (ptr) ::ss_proto::RoleBoardAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::RoleBoardAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleBoardAck_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoleBoardAck_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_RoleBoardReq_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_RoleBoardReq_default_instance_;
    new (ptr) ::ss_proto::RoleBoardReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::RoleBoardReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleBoardReq_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoleBoardReq_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_RoleDatas_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_RoleDatas_default_instance_;
    new (ptr) ::ss_proto::RoleDatas();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::RoleDatas::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleDatas_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoleDatas_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_RoleMailAck_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_RoleMailAck_default_instance_;
    new (ptr) ::ss_proto::RoleMailAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::RoleMailAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleMailAck_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoleMailAck_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_RoleMailReq_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_RoleMailReq_default_instance_;
    new (ptr) ::ss_proto::RoleMailReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::RoleMailReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleMailReq_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoleMailReq_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_SaveRoleAck_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_SaveRoleAck_default_instance_;
    new (ptr) ::ss_proto::SaveRoleAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::SaveRoleAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SaveRoleAck_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SaveRoleAck_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_SaveRolePackageAck_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_SaveRolePackageAck_default_instance_;
    new (ptr) ::ss_proto::SaveRolePackageAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::SaveRolePackageAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SaveRolePackageAck_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SaveRolePackageAck_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_SaveRolePackageReq_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_SaveRolePackageReq_default_instance_;
    new (ptr) ::ss_proto::SaveRolePackageReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::SaveRolePackageReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SaveRolePackageReq_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SaveRolePackageReq_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_SaveRoleReq_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_SaveRoleReq_default_instance_;
    new (ptr) ::ss_proto::SaveRoleReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::SaveRoleReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SaveRoleReq_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SaveRoleReq_ss_5fproto_2eproto}, {
      &scc_info_RoleDatas_ss_5fproto_2eproto.base,}};

static void InitDefaultsscc_info_SceneProcAck_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_SceneProcAck_default_instance_;
    new (ptr) ::ss_proto::SceneProcAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::SceneProcAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SceneProcAck_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SceneProcAck_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_SceneProcReq_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_SceneProcReq_default_instance_;
    new (ptr) ::ss_proto::SceneProcReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::SceneProcReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SceneProcReq_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SceneProcReq_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_SceneUpdateAck_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_SceneUpdateAck_default_instance_;
    new (ptr) ::ss_proto::SceneUpdateAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::SceneUpdateAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SceneUpdateAck_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SceneUpdateAck_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_SceneUpdateReq_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_SceneUpdateReq_default_instance_;
    new (ptr) ::ss_proto::SceneUpdateReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::SceneUpdateReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SceneUpdateReq_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SceneUpdateReq_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_SearchBossAck_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_SearchBossAck_default_instance_;
    new (ptr) ::ss_proto::SearchBossAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::SearchBossAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchBossAck_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SearchBossAck_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_SearchBossReq_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_SearchBossReq_default_instance_;
    new (ptr) ::ss_proto::SearchBossReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::SearchBossReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchBossReq_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SearchBossReq_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_ServerCastNtf_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_ServerCastNtf_default_instance_;
    new (ptr) ::ss_proto::ServerCastNtf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::ServerCastNtf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerCastNtf_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerCastNtf_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_ServerCmd_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_ServerCmd_default_instance_;
    new (ptr) ::ss_proto::ServerCmd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::ServerCmd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerCmd_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerCmd_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_ServerReport_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_ServerReport_default_instance_;
    new (ptr) ::ss_proto::ServerReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::ServerReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerReport_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerReport_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_SyncRole_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_SyncRole_default_instance_;
    new (ptr) ::ss_proto::SyncRole();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::SyncRole::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncRole_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SyncRole_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_SyncRoleNtf_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_SyncRoleNtf_default_instance_;
    new (ptr) ::ss_proto::SyncRoleNtf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::SyncRoleNtf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncRoleNtf_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SyncRoleNtf_ss_5fproto_2eproto}, {
      &scc_info_SyncRole_ss_5fproto_2eproto.base,}};

static void InitDefaultsscc_info_TopNListAck_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_TopNListAck_default_instance_;
    new (ptr) ::ss_proto::TopNListAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::TopNListAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopNListAck_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TopNListAck_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_TopNListReq_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_TopNListReq_default_instance_;
    new (ptr) ::ss_proto::TopNListReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::TopNListReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopNListReq_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TopNListReq_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_TopNUpdateAck_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_TopNUpdateAck_default_instance_;
    new (ptr) ::ss_proto::TopNUpdateAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::TopNUpdateAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopNUpdateAck_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TopNUpdateAck_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_TopNUpdateReq_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_TopNUpdateReq_default_instance_;
    new (ptr) ::ss_proto::TopNUpdateReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::TopNUpdateReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopNUpdateReq_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TopNUpdateReq_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_UserLoginAck_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_UserLoginAck_default_instance_;
    new (ptr) ::ss_proto::UserLoginAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::UserLoginAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserLoginAck_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserLoginAck_ss_5fproto_2eproto}, {
      &scc_info_UserRole_ss_5fproto_2eproto.base,}};

static void InitDefaultsscc_info_UserLoginReq_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_UserLoginReq_default_instance_;
    new (ptr) ::ss_proto::UserLoginReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::UserLoginReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserLoginReq_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserLoginReq_ss_5fproto_2eproto}, {}};

static void InitDefaultsscc_info_UserRole_ss_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ss_proto::_UserRole_default_instance_;
    new (ptr) ::ss_proto::UserRole();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ss_proto::UserRole::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserRole_ss_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserRole_ss_5fproto_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ss_5fproto_2eproto[56];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ss_5fproto_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ss_5fproto_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ss_5fproto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::AddDBNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::AddDBNtf, conn_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::AddDBNtf, name_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::AddDBNtf, user_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::AddDBNtf, pass_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::AddDBNtf, dbid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::ServerReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::ServerReport, ip_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::ServerReport, port_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::ServerReport, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::ServerCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::ServerCmd, cmd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::ServerCastNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::ServerCastNtf, cc_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::ServerCastNtf, ct_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::ServerCastNtf, worldid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::ServerCastNtf, uids_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::ServerCastNtf, rids_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::ServerCastNtf, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::NewMailNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::NewMailNtf, mailid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::NewMailNtf, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::UserLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::UserLoginReq, ptid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::UserLoginReq, pttype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::UserRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::UserRole, roleid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::UserRole, worldid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::UserRole, dbid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::UserRole, name_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::UserRole, time_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::UserRole, face_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::UserRole, charid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::UserLoginAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::UserLoginAck, token_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::UserLoginAck, roles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoginWorldReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoginWorldReq, token_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoginWorldReq, worldid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoginWorldAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoginWorldAck, token_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoginWorldAck, ip_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoginWorldAck, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoginGameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoginGameReq, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleDatas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleDatas, basedata_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleDatas, scenedata_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleDatas, herodata_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleDatas, equipdata_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleDatas, materialdata_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleDatas, currencydata_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleDatas, skilldata_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleDatas, fooddata_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleDatas, maildata_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleDatas, equipforge_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleDatas, cycleevent_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleDatas, npcdata_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleDatas, interactiondata_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleDatas, rollrecord_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoginGameAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoginGameAck, userid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoginGameAck, roleid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoginGameAck, datas_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoginGameAck, ptid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoginGameAck, pttype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LogoutGameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LogoutGameReq, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LogoutGameAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::CreateRoleReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::CreateRoleReq, userid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CreateRoleReq, rolename_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CreateRoleReq, charid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CreateRoleReq, face_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::CreateRoleAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::CreateRoleAck, roleid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CreateRoleAck, datas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::SaveRoleReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::SaveRoleReq, roleid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::SaveRoleReq, datas_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::SaveRoleReq, sync_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::SaveRoleAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::KickUserNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::KickUserNtf, userid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::KickUserNtf, account_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::KickUserNtf, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::SyncRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::SyncRole, userid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::SyncRole, roleid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::SyncRole, svrid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::SyncRoleNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::SyncRoleNtf, online_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::SyncRoleNtf, offline_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::SearchBossReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::SearchBossReq, userid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::SearchBossReq, svrid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::SearchBossReq, snakeid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::SearchBossReq, team_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::SearchBossReq, sceneid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::SearchBossReq, cheat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::SearchBossAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::SearchBossAck, userid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::SearchBossAck, startntf_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::SearchBossAck, updatentf_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::SearchBossAck, endntf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LogDataReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LogDataReq, type_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::LogDataReq, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LogDataAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoadRoleSkillReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoadRoleSkillReq, roleid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoadRoleSkillAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoadRoleSkillAck, skilldata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoadRolePackageReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoadRolePackageReq, roleid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoadRolePackageReq, loaditemtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoadRolePackageAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoadRolePackageAck, itemsdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::SaveRolePackageReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::SaveRolePackageReq, roleid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::SaveRolePackageReq, itemtype_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::SaveRolePackageReq, itemdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::SaveRolePackageAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::FriendAddReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::FriendAddReq, srcid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::FriendAddReq, destid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::FriendAddAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::FriendDelReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::FriendDelReq, srcid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::FriendDelReq, destid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::FriendDelAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::FriendInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::FriendInfo, roleid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::FriendInfo, flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::FriendListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::FriendListReq, srcid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::FriendListAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::FriendListAck, friends_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleBoardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleBoardReq, roleids_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleBoardReq, small_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleBoardAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleBoardAck, datas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleMailReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleMailReq, lastmailid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleMailReq, roleid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleMailReq, createtime_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleMailReq, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleMailAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleMailAck, datas_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::RoleMailAck, lastmailid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::TopNUpdateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::TopNUpdateReq, worldid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::TopNUpdateReq, tnt_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::TopNUpdateReq, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::TopNUpdateAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::TopNListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::TopNListReq, worldid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::TopNListReq, tnt_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::TopNListReq, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::TopNListAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::TopNListAck, topn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::SceneUpdateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::SceneUpdateReq, worldid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::SceneUpdateReq, olevel_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::SceneUpdateReq, nlevel_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::SceneUpdateReq, topn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::SceneUpdateAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::SceneProcReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::SceneProcReq, worldid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::SceneProcReq, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::SceneProcAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::SceneProcAck, proc_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::SceneProcAck, topn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoginSwtichReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoginSwtichReq, ptid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoginSwtichReq, pttype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoginSwtichAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoginSwtichAck, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoadInteractionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoadInteractionReq, roleid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoadInteractionAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::LoadInteractionAck, interactiondata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, code_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, errorcode_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, taskid_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, adddbntf_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, servercmd_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, newmailntf_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, serverreport_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, servercastntf_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, topnupdatereq_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, topnupdateack_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, topnlistreq_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, topnlistack_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, userloginreq_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, userloginack_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, loginworldreq_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, loginworldack_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, logingamereq_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, logingameack_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, logoutgamereq_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, logoutgameack_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, createrolereq_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, createroleack_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, saverolereq_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, saveroleack_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, kickuserntf_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, syncrolentf_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, searchbossreq_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, searchbossack_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, logdatareq_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, logdataack_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, loadroleskillreq_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, loadroleskillack_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, loadrolepackagereq_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, loadrolepackageack_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, friendaddreq_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, friendaddack_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, frienddelreq_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, frienddelack_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, friendlistreq_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, friendlistack_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, roleboardreq_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, roleboardack_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, sceneupdatereq_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, sceneupdateack_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, sceneprocreq_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, sceneprocack_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, loginswtichreq_),
  PROTOBUF_FIELD_OFFSET(::ss_proto::CommonMessage, loginswtichack_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ss_proto::AddDBNtf)},
  { 10, -1, sizeof(::ss_proto::ServerReport)},
  { 18, -1, sizeof(::ss_proto::ServerCmd)},
  { 24, -1, sizeof(::ss_proto::ServerCastNtf)},
  { 35, -1, sizeof(::ss_proto::NewMailNtf)},
  { 42, -1, sizeof(::ss_proto::UserLoginReq)},
  { 49, -1, sizeof(::ss_proto::UserRole)},
  { 61, -1, sizeof(::ss_proto::UserLoginAck)},
  { 68, -1, sizeof(::ss_proto::LoginWorldReq)},
  { 75, -1, sizeof(::ss_proto::LoginWorldAck)},
  { 83, -1, sizeof(::ss_proto::LoginGameReq)},
  { 89, -1, sizeof(::ss_proto::RoleDatas)},
  { 108, -1, sizeof(::ss_proto::LoginGameAck)},
  { 118, -1, sizeof(::ss_proto::LogoutGameReq)},
  { 124, -1, sizeof(::ss_proto::LogoutGameAck)},
  { 129, -1, sizeof(::ss_proto::CreateRoleReq)},
  { 138, -1, sizeof(::ss_proto::CreateRoleAck)},
  { 145, -1, sizeof(::ss_proto::SaveRoleReq)},
  { 153, -1, sizeof(::ss_proto::SaveRoleAck)},
  { 158, -1, sizeof(::ss_proto::KickUserNtf)},
  { 166, -1, sizeof(::ss_proto::SyncRole)},
  { 174, -1, sizeof(::ss_proto::SyncRoleNtf)},
  { 181, -1, sizeof(::ss_proto::SearchBossReq)},
  { 192, -1, sizeof(::ss_proto::SearchBossAck)},
  { 201, -1, sizeof(::ss_proto::LogDataReq)},
  { 208, -1, sizeof(::ss_proto::LogDataAck)},
  { 213, -1, sizeof(::ss_proto::LoadRoleSkillReq)},
  { 219, -1, sizeof(::ss_proto::LoadRoleSkillAck)},
  { 225, -1, sizeof(::ss_proto::LoadRolePackageReq)},
  { 232, -1, sizeof(::ss_proto::LoadRolePackageAck)},
  { 238, -1, sizeof(::ss_proto::SaveRolePackageReq)},
  { 246, -1, sizeof(::ss_proto::SaveRolePackageAck)},
  { 251, -1, sizeof(::ss_proto::FriendAddReq)},
  { 258, -1, sizeof(::ss_proto::FriendAddAck)},
  { 263, -1, sizeof(::ss_proto::FriendDelReq)},
  { 270, -1, sizeof(::ss_proto::FriendDelAck)},
  { 275, -1, sizeof(::ss_proto::FriendInfo)},
  { 282, -1, sizeof(::ss_proto::FriendListReq)},
  { 288, -1, sizeof(::ss_proto::FriendListAck)},
  { 294, -1, sizeof(::ss_proto::RoleBoardReq)},
  { 301, -1, sizeof(::ss_proto::RoleBoardAck)},
  { 307, -1, sizeof(::ss_proto::RoleMailReq)},
  { 316, -1, sizeof(::ss_proto::RoleMailAck)},
  { 323, -1, sizeof(::ss_proto::TopNUpdateReq)},
  { 331, -1, sizeof(::ss_proto::TopNUpdateAck)},
  { 336, -1, sizeof(::ss_proto::TopNListReq)},
  { 344, -1, sizeof(::ss_proto::TopNListAck)},
  { 350, -1, sizeof(::ss_proto::SceneUpdateReq)},
  { 359, -1, sizeof(::ss_proto::SceneUpdateAck)},
  { 364, -1, sizeof(::ss_proto::SceneProcReq)},
  { 371, -1, sizeof(::ss_proto::SceneProcAck)},
  { 378, -1, sizeof(::ss_proto::LoginSwtichReq)},
  { 385, -1, sizeof(::ss_proto::LoginSwtichAck)},
  { 391, -1, sizeof(::ss_proto::LoadInteractionReq)},
  { 397, -1, sizeof(::ss_proto::LoadInteractionAck)},
  { 403, -1, sizeof(::ss_proto::CommonMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_AddDBNtf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_ServerReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_ServerCmd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_ServerCastNtf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_NewMailNtf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_UserLoginReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_UserRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_UserLoginAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_LoginWorldReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_LoginWorldAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_LoginGameReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_RoleDatas_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_LoginGameAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_LogoutGameReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_LogoutGameAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_CreateRoleReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_CreateRoleAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_SaveRoleReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_SaveRoleAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_KickUserNtf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_SyncRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_SyncRoleNtf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_SearchBossReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_SearchBossAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_LogDataReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_LogDataAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_LoadRoleSkillReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_LoadRoleSkillAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_LoadRolePackageReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_LoadRolePackageAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_SaveRolePackageReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_SaveRolePackageAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_FriendAddReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_FriendAddAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_FriendDelReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_FriendDelAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_FriendInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_FriendListReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_FriendListAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_RoleBoardReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_RoleBoardAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_RoleMailReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_RoleMailAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_TopNUpdateReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_TopNUpdateAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_TopNListReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_TopNListAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_SceneUpdateReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_SceneUpdateAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_SceneProcReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_SceneProcAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_LoginSwtichReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_LoginSwtichAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_LoadInteractionReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_LoadInteractionAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ss_proto::_CommonMessage_default_instance_),
};

const char descriptor_table_protodef_ss_5fproto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016ss_proto.proto\022\010ss_proto\"P\n\010AddDBNtf\022\014"
  "\n\004conn\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\014\n\004user\030\003 \001(\t"
  "\022\014\n\004pass\030\004 \001(\t\022\014\n\004dbId\030\005 \001(\t\"7\n\014ServerRe"
  "port\022\n\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\005\022\r\n\005count\030"
  "\003 \001(\005\"\030\n\tServerCmd\022\013\n\003cmd\030\001 \001(\t\"\212\001\n\rServ"
  "erCastNtf\022\036\n\002cc\030\001 \001(\0162\022.ss_proto.CastCod"
  "e\022\036\n\002ct\030\002 \001(\0162\022.ss_proto.CastType\022\017\n\007wor"
  "ldId\030\003 \001(\003\022\014\n\004uids\030\004 \003(\003\022\014\n\004rids\030\005 \003(\003\022\014"
  "\n\004data\030\006 \001(\014\"-\n\nNewMailNtf\022\016\n\006mailId\030\001 \001"
  "(\005\022\017\n\007content\030\002 \001(\014\",\n\014UserLoginReq\022\014\n\004p"
  "tId\030\001 \001(\t\022\016\n\006ptType\030\002 \001(\005\"s\n\010UserRole\022\016\n"
  "\006roleId\030\001 \001(\003\022\017\n\007worldId\030\002 \001(\003\022\014\n\004dbId\030\003"
  " \001(\003\022\014\n\004name\030\004 \001(\t\022\014\n\004time\030\005 \001(\003\022\014\n\004face"
  "\030\006 \001(\t\022\016\n\006charId\030\007 \001(\005\"@\n\014UserLoginAck\022\r"
  "\n\005token\030\001 \001(\t\022!\n\005roles\030\002 \003(\0132\022.ss_proto."
  "UserRole\"/\n\rLoginWorldReq\022\r\n\005token\030\001 \001(\t"
  "\022\017\n\007worldId\030\002 \001(\003\"8\n\rLoginWorldAck\022\r\n\005to"
  "ken\030\001 \001(\t\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\"\035\n\014L"
  "oginGameReq\022\r\n\005token\030\001 \001(\t\"\236\002\n\tRoleDatas"
  "\022\020\n\010baseData\030\001 \001(\014\022\021\n\tsceneData\030\002 \001(\014\022\020\n"
  "\010heroData\030\003 \001(\014\022\021\n\tequipData\030\004 \001(\014\022\024\n\014ma"
  "terialData\030\005 \001(\014\022\024\n\014currencyData\030\006 \001(\014\022\021"
  "\n\tskillData\030\007 \001(\014\022\020\n\010foodData\030\010 \001(\014\022\020\n\010m"
  "ailData\030\t \001(\014\022\022\n\nequipForge\030\n \001(\014\022\022\n\ncyc"
  "leEvent\030\013 \001(\014\022\017\n\007npcData\030\014 \001(\014\022\027\n\017intera"
  "ctionData\030\r \001(\014\022\022\n\nrollRecord\030\016 \001(\014\"p\n\014L"
  "oginGameAck\022\016\n\006userId\030\001 \001(\003\022\016\n\006roleId\030\002 "
  "\001(\003\022\"\n\005datas\030\003 \001(\0132\023.ss_proto.RoleDatas\022"
  "\014\n\004ptId\030\004 \001(\t\022\016\n\006ptType\030\005 \001(\005\"\037\n\rLogoutG"
  "ameReq\022\016\n\006userId\030\001 \001(\003\"\017\n\rLogoutGameAck\""
  "O\n\rCreateRoleReq\022\016\n\006userId\030\001 \001(\003\022\020\n\010role"
  "Name\030\002 \001(\t\022\016\n\006charId\030\003 \001(\005\022\014\n\004face\030\004 \001(\t"
  "\"C\n\rCreateRoleAck\022\016\n\006roleId\030\001 \001(\003\022\"\n\005dat"
  "as\030\002 \001(\0132\023.ss_proto.RoleDatas\"O\n\013SaveRol"
  "eReq\022\016\n\006roleId\030\001 \001(\003\022\"\n\005datas\030\002 \001(\0132\023.ss"
  "_proto.RoleDatas\022\014\n\004sync\030\003 \001(\010\"\r\n\013SaveRo"
  "leAck\"=\n\013KickUserNtf\022\016\n\006userId\030\001 \001(\003\022\017\n\007"
  "account\030\002 \001(\t\022\r\n\005token\030\003 \001(\t\"9\n\010SyncRole"
  "\022\016\n\006userId\030\001 \001(\003\022\016\n\006roleId\030\002 \001(\003\022\r\n\005svrI"
  "d\030\003 \001(\003\"B\n\013SyncRoleNtf\022\"\n\006online\030\001 \003(\0132\022"
  ".ss_proto.SyncRole\022\017\n\007offline\030\002 \003(\003\"m\n\rS"
  "earchBossReq\022\016\n\006userId\030\001 \001(\003\022\r\n\005svrId\030\002 "
  "\001(\003\022\017\n\007snakeId\030\003 \001(\005\022\014\n\004team\030\004 \001(\014\022\017\n\007sc"
  "eneId\030\005 \001(\005\022\r\n\005cheat\030\006 \001(\005\"T\n\rSearchBoss"
  "Ack\022\016\n\006userId\030\001 \001(\003\022\020\n\010startNtf\030\002 \001(\014\022\021\n"
  "\tupdateNtf\030\003 \001(\014\022\016\n\006endNtf\030\004 \001(\014\"\?\n\nLogD"
  "ataReq\022#\n\004type\030\001 \001(\0162\025.ss_proto.LogDataT"
  "ype\022\014\n\004data\030\002 \001(\014\"\014\n\nLogDataAck\"\"\n\020LoadR"
  "oleSkillReq\022\016\n\006roleId\030\001 \001(\003\"%\n\020LoadRoleS"
  "killAck\022\021\n\tskillData\030\001 \001(\014\":\n\022LoadRolePa"
  "ckageReq\022\016\n\006roleId\030\001 \001(\003\022\024\n\014loadItemType"
  "\030\002 \001(\005\"\'\n\022LoadRolePackageAck\022\021\n\titemsDat"
  "a\030\001 \001(\014\"H\n\022SaveRolePackageReq\022\016\n\006roleId\030"
  "\001 \001(\003\022\020\n\010ItemType\030\002 \001(\005\022\020\n\010itemData\030\003 \001("
  "\014\"\024\n\022SaveRolePackageAck\"-\n\014FriendAddReq\022"
  "\r\n\005srcId\030\001 \001(\003\022\016\n\006destId\030\002 \001(\003\"\016\n\014Friend"
  "AddAck\"-\n\014FriendDelReq\022\r\n\005srcId\030\001 \001(\003\022\016\n"
  "\006destId\030\002 \001(\003\"\016\n\014FriendDelAck\"*\n\nFriendI"
  "nfo\022\016\n\006roleId\030\001 \001(\003\022\014\n\004flag\030\002 \001(\003\"\036\n\rFri"
  "endListReq\022\r\n\005srcId\030\001 \001(\003\"6\n\rFriendListA"
  "ck\022%\n\007friends\030\001 \003(\0132\024.ss_proto.FriendInf"
  "o\".\n\014RoleBoardReq\022\017\n\007roleIds\030\001 \003(\003\022\r\n\005sm"
  "all\030\002 \001(\010\"\035\n\014RoleBoardAck\022\r\n\005datas\030\001 \001(\014"
  "\"T\n\013RoleMailReq\022\022\n\nlastMailId\030\001 \001(\005\022\016\n\006r"
  "oleId\030\002 \001(\003\022\022\n\ncreateTime\030\003 \001(\003\022\r\n\005count"
  "\030\004 \001(\005\"0\n\013RoleMailAck\022\r\n\005datas\030\001 \001(\014\022\022\n\n"
  "lastMailId\030\002 \001(\005\";\n\rTopNUpdateReq\022\017\n\007wor"
  "ldId\030\001 \001(\003\022\013\n\003tnt\030\002 \001(\005\022\014\n\004data\030\003 \001(\014\"\017\n"
  "\rTopNUpdateAck\"9\n\013TopNListReq\022\017\n\007worldId"
  "\030\001 \001(\003\022\013\n\003tnt\030\002 \001(\005\022\014\n\004data\030\003 \001(\014\"\033\n\013Top"
  "NListAck\022\014\n\004topn\030\001 \001(\014\"O\n\016SceneUpdateReq"
  "\022\017\n\007worldId\030\001 \001(\003\022\016\n\006olevel\030\002 \001(\005\022\016\n\006nle"
  "vel\030\003 \001(\005\022\014\n\004topn\030\004 \001(\014\"\020\n\016SceneUpdateAc"
  "k\".\n\014SceneProcReq\022\017\n\007worldId\030\001 \001(\003\022\r\n\005le"
  "vel\030\002 \001(\005\"*\n\014SceneProcAck\022\014\n\004proc\030\001 \001(\002\022"
  "\014\n\004topn\030\002 \001(\014\".\n\016LoginSwtichReq\022\014\n\004ptId\030"
  "\001 \001(\t\022\016\n\006ptType\030\002 \001(\005\"\037\n\016LoginSwtichAck\022"
  "\r\n\005token\030\001 \001(\t\"$\n\022LoadInteractionReq\022\016\n\006"
  "roleId\030\001 \001(\003\"-\n\022LoadInteractionAck\022\027\n\017in"
  "teractionData\030\001 \001(\014\"\246\021\n\rCommonMessage\022\033\n"
  "\004code\030\001 \001(\0162\r.ss_proto.Cmd\022&\n\terrorCode\030"
  "\002 \001(\0162\023.ss_proto.ErrorCode\022\016\n\006taskId\030\003 \001"
  "(\003\022$\n\010addDBNtf\030\005 \001(\0132\022.ss_proto.AddDBNtf"
  "\022&\n\tserverCmd\030\006 \001(\0132\023.ss_proto.ServerCmd"
  "\022(\n\nnewMailNtf\030\007 \001(\0132\024.ss_proto.NewMailN"
  "tf\022,\n\014serverReport\030\010 \001(\0132\026.ss_proto.Serv"
  "erReport\022.\n\rserverCastNtf\030\t \001(\0132\027.ss_pro"
  "to.ServerCastNtf\022.\n\rtopNUpdateReq\030\n \001(\0132"
  "\027.ss_proto.TopNUpdateReq\022.\n\rtopNUpdateAc"
  "k\030\013 \001(\0132\027.ss_proto.TopNUpdateAck\022*\n\013topN"
  "ListReq\030\014 \001(\0132\025.ss_proto.TopNListReq\022*\n\013"
  "topNListAck\030\r \001(\0132\025.ss_proto.TopNListAck"
  "\022,\n\014userLoginReq\030\024 \001(\0132\026.ss_proto.UserLo"
  "ginReq\022,\n\014userLoginAck\030\025 \001(\0132\026.ss_proto."
  "UserLoginAck\022.\n\rloginWorldReq\030\026 \001(\0132\027.ss"
  "_proto.LoginWorldReq\022.\n\rloginWorldAck\030\027 "
  "\001(\0132\027.ss_proto.LoginWorldAck\022,\n\014loginGam"
  "eReq\030\030 \001(\0132\026.ss_proto.LoginGameReq\022,\n\014lo"
  "ginGameAck\030\031 \001(\0132\026.ss_proto.LoginGameAck"
  "\022.\n\rlogoutGameReq\030\032 \001(\0132\027.ss_proto.Logou"
  "tGameReq\022.\n\rlogoutGameAck\030\033 \001(\0132\027.ss_pro"
  "to.LogoutGameAck\022.\n\rcreateRoleReq\030\034 \001(\0132"
  "\027.ss_proto.CreateRoleReq\022.\n\rcreateRoleAc"
  "k\030\035 \001(\0132\027.ss_proto.CreateRoleAck\022*\n\013save"
  "RoleReq\030\036 \001(\0132\025.ss_proto.SaveRoleReq\022*\n\013"
  "saveRoleAck\030\037 \001(\0132\025.ss_proto.SaveRoleAck"
  "\022*\n\013kickUserNtf\030  \001(\0132\025.ss_proto.KickUse"
  "rNtf\022*\n\013syncRoleNtf\030! \001(\0132\025.ss_proto.Syn"
  "cRoleNtf\022.\n\rsearchBossReq\030\" \001(\0132\027.ss_pro"
  "to.SearchBossReq\022.\n\rsearchBossAck\030# \001(\0132"
  "\027.ss_proto.SearchBossAck\022(\n\nlogDataReq\030$"
  " \001(\0132\024.ss_proto.LogDataReq\022(\n\nlogDataAck"
  "\030% \001(\0132\024.ss_proto.LogDataAck\0224\n\020loadRole"
  "SkillReq\030& \001(\0132\032.ss_proto.LoadRoleSkillR"
  "eq\0224\n\020loadRoleSkillAck\030\' \001(\0132\032.ss_proto."
  "LoadRoleSkillAck\0228\n\022loadRolePackageReq\030("
  " \001(\0132\034.ss_proto.LoadRolePackageReq\0228\n\022lo"
  "adRolePackageAck\030) \001(\0132\034.ss_proto.LoadRo"
  "lePackageAck\022,\n\014friendAddReq\030, \001(\0132\026.ss_"
  "proto.FriendAddReq\022,\n\014friendAddAck\030- \001(\013"
  "2\026.ss_proto.FriendAddAck\022,\n\014friendDelReq"
  "\030. \001(\0132\026.ss_proto.FriendDelReq\022,\n\014friend"
  "DelAck\030/ \001(\0132\026.ss_proto.FriendDelAck\022.\n\r"
  "friendListReq\0300 \001(\0132\027.ss_proto.FriendLis"
  "tReq\022.\n\rfriendListAck\0301 \001(\0132\027.ss_proto.F"
  "riendListAck\022,\n\014roleBoardReq\0302 \001(\0132\026.ss_"
  "proto.RoleBoardReq\022,\n\014roleBoardAck\0303 \001(\013"
  "2\026.ss_proto.RoleBoardAck\0220\n\016sceneUpdateR"
  "eq\0306 \001(\0132\030.ss_proto.SceneUpdateReq\0220\n\016sc"
  "eneUpdateAck\0307 \001(\0132\030.ss_proto.SceneUpdat"
  "eAck\022,\n\014sceneProcReq\0308 \001(\0132\026.ss_proto.Sc"
  "eneProcReq\022,\n\014sceneProcAck\0309 \001(\0132\026.ss_pr"
  "oto.SceneProcAck\0220\n\016loginSwtichReq\030: \001(\013"
  "2\030.ss_proto.LoginSwtichReq\0220\n\016loginSwtic"
  "hAck\030; \001(\0132\030.ss_proto.LoginSwtichAck*\227\004\n"
  "\003Cmd\022\010\n\004NONE\020\000\022\r\n\tSS_ADD_DB\020\001\022\020\n\014SS_SVR_"
  "START\020\002\022\021\n\rSS_SVR_REPORT\020\003\022\016\n\nSS_SVR_CMD"
  "\020\004\022\017\n\013SS_LOG_DATA\020\005\022\017\n\013SS_SVR_CAST\020\006\022\017\n\013"
  "SS_NEW_MAIL\020\007\022\022\n\016SS_TOPN_UPDATE\020\010\022\020\n\014SS_"
  "TOPN_LIST\020\t\022\021\n\rSS_USER_LOGIN\020\024\022\022\n\016SS_LOG"
  "IN_WORLD\020\025\022\021\n\rSS_LOGIN_GAME\020\026\022\022\n\016SS_LOGO"
  "UT_GAME\020\027\022\022\n\016SS_CREATE_ROLE\020\030\022\020\n\014SS_SAVE"
  "_ROLE\020\031\022\020\n\014SS_KICK_USER\020\032\022\021\n\rSS_SYNC_ROL"
  "ES\020\033\022\021\n\rSS_ROLE_BOARD\020\034\022\023\n\017SS_LOGIN_SWIT"
  "CH\020\035\022\022\n\016SS_SEARCH_BOSS\020\036\022\021\n\rSS_FRIEND_DE"
  "L\020#\022\021\n\rSS_FRIEND_ADD\020$\022\022\n\016SS_FRIEND_LIST"
  "\020%\022\023\n\017SS_SCENE_UPDATE\020-\022\021\n\rSS_SCENE_PROC"
  "\020.\022\027\n\022SS_LOAD_ROLE_SKILL\020\255\002\022\031\n\024SS_LOAD_R"
  "OLE_PACKAGE\020\256\002*V\n\010CastCode\022\021\n\rCC_FRIEND_"
  "ADD\020\000\022\021\n\rCC_FRIEND_DEL\020\001\022\021\n\rCC_WORLD_CHA"
  "T\020\002\022\021\n\rCC_SYS_NOTICE\020\003*-\n\010CastType\022\t\n\005CT"
  "_IN\020\000\022\n\n\006CT_OUT\020\001\022\n\n\006CT_ALL\020\002*\241\001\n\tErrorC"
  "ode\022\013\n\007SUCCESS\020\000\022\027\n\023SERVICE_UNAVAILABLE\020"
  "\002\022\021\n\rSERVICE_DBMAX\020\003\022\020\n\014USER_RELOGIN\020\024\022\021"
  "\n\rTOKEN_INVALID\020\025\022\016\n\nROLE_FOUND\020\026\022\022\n\016NAM"
  "E_DUPLICATE\020\027\022\022\n\rSYSTEM_UNKNOW\020\347\007*)\n\013Log"
  "DataType\022\r\n\tLDT_LOGIN\020\000\022\013\n\007LDT_RES\020\001b\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ss_5fproto_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ss_5fproto_2eproto_sccs[56] = {
  &scc_info_AddDBNtf_ss_5fproto_2eproto.base,
  &scc_info_CommonMessage_ss_5fproto_2eproto.base,
  &scc_info_CreateRoleAck_ss_5fproto_2eproto.base,
  &scc_info_CreateRoleReq_ss_5fproto_2eproto.base,
  &scc_info_FriendAddAck_ss_5fproto_2eproto.base,
  &scc_info_FriendAddReq_ss_5fproto_2eproto.base,
  &scc_info_FriendDelAck_ss_5fproto_2eproto.base,
  &scc_info_FriendDelReq_ss_5fproto_2eproto.base,
  &scc_info_FriendInfo_ss_5fproto_2eproto.base,
  &scc_info_FriendListAck_ss_5fproto_2eproto.base,
  &scc_info_FriendListReq_ss_5fproto_2eproto.base,
  &scc_info_KickUserNtf_ss_5fproto_2eproto.base,
  &scc_info_LoadInteractionAck_ss_5fproto_2eproto.base,
  &scc_info_LoadInteractionReq_ss_5fproto_2eproto.base,
  &scc_info_LoadRolePackageAck_ss_5fproto_2eproto.base,
  &scc_info_LoadRolePackageReq_ss_5fproto_2eproto.base,
  &scc_info_LoadRoleSkillAck_ss_5fproto_2eproto.base,
  &scc_info_LoadRoleSkillReq_ss_5fproto_2eproto.base,
  &scc_info_LogDataAck_ss_5fproto_2eproto.base,
  &scc_info_LogDataReq_ss_5fproto_2eproto.base,
  &scc_info_LoginGameAck_ss_5fproto_2eproto.base,
  &scc_info_LoginGameReq_ss_5fproto_2eproto.base,
  &scc_info_LoginSwtichAck_ss_5fproto_2eproto.base,
  &scc_info_LoginSwtichReq_ss_5fproto_2eproto.base,
  &scc_info_LoginWorldAck_ss_5fproto_2eproto.base,
  &scc_info_LoginWorldReq_ss_5fproto_2eproto.base,
  &scc_info_LogoutGameAck_ss_5fproto_2eproto.base,
  &scc_info_LogoutGameReq_ss_5fproto_2eproto.base,
  &scc_info_NewMailNtf_ss_5fproto_2eproto.base,
  &scc_info_RoleBoardAck_ss_5fproto_2eproto.base,
  &scc_info_RoleBoardReq_ss_5fproto_2eproto.base,
  &scc_info_RoleDatas_ss_5fproto_2eproto.base,
  &scc_info_RoleMailAck_ss_5fproto_2eproto.base,
  &scc_info_RoleMailReq_ss_5fproto_2eproto.base,
  &scc_info_SaveRoleAck_ss_5fproto_2eproto.base,
  &scc_info_SaveRolePackageAck_ss_5fproto_2eproto.base,
  &scc_info_SaveRolePackageReq_ss_5fproto_2eproto.base,
  &scc_info_SaveRoleReq_ss_5fproto_2eproto.base,
  &scc_info_SceneProcAck_ss_5fproto_2eproto.base,
  &scc_info_SceneProcReq_ss_5fproto_2eproto.base,
  &scc_info_SceneUpdateAck_ss_5fproto_2eproto.base,
  &scc_info_SceneUpdateReq_ss_5fproto_2eproto.base,
  &scc_info_SearchBossAck_ss_5fproto_2eproto.base,
  &scc_info_SearchBossReq_ss_5fproto_2eproto.base,
  &scc_info_ServerCastNtf_ss_5fproto_2eproto.base,
  &scc_info_ServerCmd_ss_5fproto_2eproto.base,
  &scc_info_ServerReport_ss_5fproto_2eproto.base,
  &scc_info_SyncRole_ss_5fproto_2eproto.base,
  &scc_info_SyncRoleNtf_ss_5fproto_2eproto.base,
  &scc_info_TopNListAck_ss_5fproto_2eproto.base,
  &scc_info_TopNListReq_ss_5fproto_2eproto.base,
  &scc_info_TopNUpdateAck_ss_5fproto_2eproto.base,
  &scc_info_TopNUpdateReq_ss_5fproto_2eproto.base,
  &scc_info_UserLoginAck_ss_5fproto_2eproto.base,
  &scc_info_UserLoginReq_ss_5fproto_2eproto.base,
  &scc_info_UserRole_ss_5fproto_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ss_5fproto_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ss_5fproto_2eproto = {
  false, false, descriptor_table_protodef_ss_5fproto_2eproto, "ss_proto.proto", 6284,
  &descriptor_table_ss_5fproto_2eproto_once, descriptor_table_ss_5fproto_2eproto_sccs, descriptor_table_ss_5fproto_2eproto_deps, 56, 0,
  schemas, file_default_instances, TableStruct_ss_5fproto_2eproto::offsets,
  file_level_metadata_ss_5fproto_2eproto, 56, file_level_enum_descriptors_ss_5fproto_2eproto, file_level_service_descriptors_ss_5fproto_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ss_5fproto_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ss_5fproto_2eproto)), true);
namespace ss_proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cmd_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ss_5fproto_2eproto);
  return file_level_enum_descriptors_ss_5fproto_2eproto[0];
}
bool Cmd_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 35:
    case 36:
    case 37:
    case 45:
    case 46:
    case 301:
    case 302:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CastCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ss_5fproto_2eproto);
  return file_level_enum_descriptors_ss_5fproto_2eproto[1];
}
bool CastCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CastType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ss_5fproto_2eproto);
  return file_level_enum_descriptors_ss_5fproto_2eproto[2];
}
bool CastType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ss_5fproto_2eproto);
  return file_level_enum_descriptors_ss_5fproto_2eproto[3];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 20:
    case 21:
    case 22:
    case 23:
    case 999:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogDataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ss_5fproto_2eproto);
  return file_level_enum_descriptors_ss_5fproto_2eproto[4];
}
bool LogDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AddDBNtf::InitAsDefaultInstance() {
}
class AddDBNtf::_Internal {
 public:
};

AddDBNtf::AddDBNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.AddDBNtf)
}
AddDBNtf::AddDBNtf(const AddDBNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  conn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_conn().empty()) {
    conn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_conn(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user().empty()) {
    user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user(),
      GetArena());
  }
  pass_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pass().empty()) {
    pass_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pass(),
      GetArena());
  }
  dbid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dbid().empty()) {
    dbid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dbid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ss_proto.AddDBNtf)
}

void AddDBNtf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddDBNtf_ss_5fproto_2eproto.base);
  conn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pass_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dbid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AddDBNtf::~AddDBNtf() {
  // @@protoc_insertion_point(destructor:ss_proto.AddDBNtf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddDBNtf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  conn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pass_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dbid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddDBNtf::ArenaDtor(void* object) {
  AddDBNtf* _this = reinterpret_cast< AddDBNtf* >(object);
  (void)_this;
}
void AddDBNtf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddDBNtf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddDBNtf& AddDBNtf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddDBNtf_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void AddDBNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.AddDBNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pass_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dbid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddDBNtf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string conn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_conn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ss_proto.AddDBNtf.conn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ss_proto.AddDBNtf.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ss_proto.AddDBNtf.user"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pass = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_pass();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ss_proto.AddDBNtf.pass"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dbId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_dbid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ss_proto.AddDBNtf.dbId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddDBNtf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.AddDBNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string conn = 1;
  if (this->conn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conn().data(), static_cast<int>(this->_internal_conn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ss_proto.AddDBNtf.conn");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_conn(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ss_proto.AddDBNtf.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string user = 3;
  if (this->user().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ss_proto.AddDBNtf.user");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user(), target);
  }

  // string pass = 4;
  if (this->pass().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pass().data(), static_cast<int>(this->_internal_pass().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ss_proto.AddDBNtf.pass");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_pass(), target);
  }

  // string dbId = 5;
  if (this->dbid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dbid().data(), static_cast<int>(this->_internal_dbid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ss_proto.AddDBNtf.dbId");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_dbid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.AddDBNtf)
  return target;
}

size_t AddDBNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.AddDBNtf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string conn = 1;
  if (this->conn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conn());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string user = 3;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // string pass = 4;
  if (this->pass().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pass());
  }

  // string dbId = 5;
  if (this->dbid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dbid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddDBNtf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.AddDBNtf)
  GOOGLE_DCHECK_NE(&from, this);
  const AddDBNtf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddDBNtf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.AddDBNtf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.AddDBNtf)
    MergeFrom(*source);
  }
}

void AddDBNtf::MergeFrom(const AddDBNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.AddDBNtf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.conn().size() > 0) {
    _internal_set_conn(from._internal_conn());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.user().size() > 0) {
    _internal_set_user(from._internal_user());
  }
  if (from.pass().size() > 0) {
    _internal_set_pass(from._internal_pass());
  }
  if (from.dbid().size() > 0) {
    _internal_set_dbid(from._internal_dbid());
  }
}

void AddDBNtf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.AddDBNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDBNtf::CopyFrom(const AddDBNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.AddDBNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDBNtf::IsInitialized() const {
  return true;
}

void AddDBNtf::InternalSwap(AddDBNtf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  conn_.Swap(&other->conn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_.Swap(&other->user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pass_.Swap(&other->pass_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dbid_.Swap(&other->dbid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AddDBNtf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerReport::InitAsDefaultInstance() {
}
class ServerReport::_Internal {
 public:
};

ServerReport::ServerReport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.ServerReport)
}
ServerReport::ServerReport(const ServerReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&port_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:ss_proto.ServerReport)
}

void ServerReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerReport_ss_5fproto_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&port_)) + sizeof(count_));
}

ServerReport::~ServerReport() {
  // @@protoc_insertion_point(destructor:ss_proto.ServerReport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerReport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerReport::ArenaDtor(void* object) {
  ServerReport* _this = reinterpret_cast< ServerReport* >(object);
  (void)_this;
}
void ServerReport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerReport& ServerReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerReport_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void ServerReport::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.ServerReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&port_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ss_proto.ServerReport.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.ServerReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ss_proto.ServerReport.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.ServerReport)
  return target;
}

size_t ServerReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.ServerReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // int32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.ServerReport)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.ServerReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.ServerReport)
    MergeFrom(*source);
  }
}

void ServerReport::MergeFrom(const ServerReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.ServerReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void ServerReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.ServerReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerReport::CopyFrom(const ServerReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.ServerReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerReport::IsInitialized() const {
  return true;
}

void ServerReport::InternalSwap(ServerReport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerReport, count_)
      + sizeof(ServerReport::count_)
      - PROTOBUF_FIELD_OFFSET(ServerReport, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerCmd::InitAsDefaultInstance() {
}
class ServerCmd::_Internal {
 public:
};

ServerCmd::ServerCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.ServerCmd)
}
ServerCmd::ServerCmd(const ServerCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cmd().empty()) {
    cmd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cmd(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ss_proto.ServerCmd)
}

void ServerCmd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerCmd_ss_5fproto_2eproto.base);
  cmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ServerCmd::~ServerCmd() {
  // @@protoc_insertion_point(destructor:ss_proto.ServerCmd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerCmd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cmd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerCmd::ArenaDtor(void* object) {
  ServerCmd* _this = reinterpret_cast< ServerCmd* >(object);
  (void)_this;
}
void ServerCmd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerCmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerCmd& ServerCmd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerCmd_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void ServerCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.ServerCmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerCmd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cmd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ss_proto.ServerCmd.cmd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerCmd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.ServerCmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cmd = 1;
  if (this->cmd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cmd().data(), static_cast<int>(this->_internal_cmd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ss_proto.ServerCmd.cmd");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.ServerCmd)
  return target;
}

size_t ServerCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.ServerCmd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cmd = 1;
  if (this->cmd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerCmd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.ServerCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerCmd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerCmd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.ServerCmd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.ServerCmd)
    MergeFrom(*source);
  }
}

void ServerCmd::MergeFrom(const ServerCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.ServerCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cmd().size() > 0) {
    _internal_set_cmd(from._internal_cmd());
  }
}

void ServerCmd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.ServerCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerCmd::CopyFrom(const ServerCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.ServerCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerCmd::IsInitialized() const {
  return true;
}

void ServerCmd::InternalSwap(ServerCmd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cmd_.Swap(&other->cmd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerCmd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerCastNtf::InitAsDefaultInstance() {
}
class ServerCastNtf::_Internal {
 public:
};

ServerCastNtf::ServerCastNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  uids_(arena),
  rids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.ServerCastNtf)
}
ServerCastNtf::ServerCastNtf(const ServerCastNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      uids_(from.uids_),
      rids_(from.rids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  ::memcpy(&cc_, &from.cc_,
    static_cast<size_t>(reinterpret_cast<char*>(&worldid_) -
    reinterpret_cast<char*>(&cc_)) + sizeof(worldid_));
  // @@protoc_insertion_point(copy_constructor:ss_proto.ServerCastNtf)
}

void ServerCastNtf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerCastNtf_ss_5fproto_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&worldid_) -
      reinterpret_cast<char*>(&cc_)) + sizeof(worldid_));
}

ServerCastNtf::~ServerCastNtf() {
  // @@protoc_insertion_point(destructor:ss_proto.ServerCastNtf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerCastNtf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerCastNtf::ArenaDtor(void* object) {
  ServerCastNtf* _this = reinterpret_cast< ServerCastNtf* >(object);
  (void)_this;
}
void ServerCastNtf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerCastNtf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerCastNtf& ServerCastNtf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerCastNtf_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void ServerCastNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.ServerCastNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uids_.Clear();
  rids_.Clear();
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&cc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&worldid_) -
      reinterpret_cast<char*>(&cc_)) + sizeof(worldid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerCastNtf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ss_proto.CastCode cc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cc(static_cast<::ss_proto::CastCode>(val));
        } else goto handle_unusual;
        continue;
      // .ss_proto.CastType ct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ct(static_cast<::ss_proto::CastType>(val));
        } else goto handle_unusual;
        continue;
      // int64 worldId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 uids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_uids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_uids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 rids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_rids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_rids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerCastNtf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.ServerCastNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ss_proto.CastCode cc = 1;
  if (this->cc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cc(), target);
  }

  // .ss_proto.CastType ct = 2;
  if (this->ct() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_ct(), target);
  }

  // int64 worldId = 3;
  if (this->worldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_worldid(), target);
  }

  // repeated int64 uids = 4;
  {
    int byte_size = _uids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_uids(), byte_size, target);
    }
  }

  // repeated int64 rids = 5;
  {
    int byte_size = _rids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_rids(), byte_size, target);
    }
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.ServerCastNtf)
  return target;
}

size_t ServerCastNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.ServerCastNtf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 uids = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->uids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 rids = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->rids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .ss_proto.CastCode cc = 1;
  if (this->cc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cc());
  }

  // .ss_proto.CastType ct = 2;
  if (this->ct() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ct());
  }

  // int64 worldId = 3;
  if (this->worldid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_worldid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerCastNtf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.ServerCastNtf)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerCastNtf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerCastNtf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.ServerCastNtf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.ServerCastNtf)
    MergeFrom(*source);
  }
}

void ServerCastNtf::MergeFrom(const ServerCastNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.ServerCastNtf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uids_.MergeFrom(from.uids_);
  rids_.MergeFrom(from.rids_);
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.cc() != 0) {
    _internal_set_cc(from._internal_cc());
  }
  if (from.ct() != 0) {
    _internal_set_ct(from._internal_ct());
  }
  if (from.worldid() != 0) {
    _internal_set_worldid(from._internal_worldid());
  }
}

void ServerCastNtf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.ServerCastNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerCastNtf::CopyFrom(const ServerCastNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.ServerCastNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerCastNtf::IsInitialized() const {
  return true;
}

void ServerCastNtf::InternalSwap(ServerCastNtf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  uids_.InternalSwap(&other->uids_);
  rids_.InternalSwap(&other->rids_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerCastNtf, worldid_)
      + sizeof(ServerCastNtf::worldid_)
      - PROTOBUF_FIELD_OFFSET(ServerCastNtf, cc_)>(
          reinterpret_cast<char*>(&cc_),
          reinterpret_cast<char*>(&other->cc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerCastNtf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewMailNtf::InitAsDefaultInstance() {
}
class NewMailNtf::_Internal {
 public:
};

NewMailNtf::NewMailNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.NewMailNtf)
}
NewMailNtf::NewMailNtf(const NewMailNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_content(),
      GetArena());
  }
  mailid_ = from.mailid_;
  // @@protoc_insertion_point(copy_constructor:ss_proto.NewMailNtf)
}

void NewMailNtf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewMailNtf_ss_5fproto_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mailid_ = 0;
}

NewMailNtf::~NewMailNtf() {
  // @@protoc_insertion_point(destructor:ss_proto.NewMailNtf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewMailNtf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewMailNtf::ArenaDtor(void* object) {
  NewMailNtf* _this = reinterpret_cast< NewMailNtf* >(object);
  (void)_this;
}
void NewMailNtf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewMailNtf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewMailNtf& NewMailNtf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewMailNtf_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void NewMailNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.NewMailNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mailid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewMailNtf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mailId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewMailNtf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.NewMailNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mailId = 1;
  if (this->mailid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mailid(), target);
  }

  // bytes content = 2;
  if (this->content().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.NewMailNtf)
  return target;
}

size_t NewMailNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.NewMailNtf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // int32 mailId = 1;
  if (this->mailid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mailid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewMailNtf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.NewMailNtf)
  GOOGLE_DCHECK_NE(&from, this);
  const NewMailNtf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewMailNtf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.NewMailNtf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.NewMailNtf)
    MergeFrom(*source);
  }
}

void NewMailNtf::MergeFrom(const NewMailNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.NewMailNtf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
  if (from.mailid() != 0) {
    _internal_set_mailid(from._internal_mailid());
  }
}

void NewMailNtf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.NewMailNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewMailNtf::CopyFrom(const NewMailNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.NewMailNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewMailNtf::IsInitialized() const {
  return true;
}

void NewMailNtf::InternalSwap(NewMailNtf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(mailid_, other->mailid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewMailNtf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserLoginReq::InitAsDefaultInstance() {
}
class UserLoginReq::_Internal {
 public:
};

UserLoginReq::UserLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.UserLoginReq)
}
UserLoginReq::UserLoginReq(const UserLoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ptid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ptid().empty()) {
    ptid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ptid(),
      GetArena());
  }
  pttype_ = from.pttype_;
  // @@protoc_insertion_point(copy_constructor:ss_proto.UserLoginReq)
}

void UserLoginReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserLoginReq_ss_5fproto_2eproto.base);
  ptid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pttype_ = 0;
}

UserLoginReq::~UserLoginReq() {
  // @@protoc_insertion_point(destructor:ss_proto.UserLoginReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserLoginReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ptid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserLoginReq::ArenaDtor(void* object) {
  UserLoginReq* _this = reinterpret_cast< UserLoginReq* >(object);
  (void)_this;
}
void UserLoginReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserLoginReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserLoginReq& UserLoginReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserLoginReq_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void UserLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.UserLoginReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ptid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pttype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLoginReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ptId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ptid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ss_proto.UserLoginReq.ptId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ptType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserLoginReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.UserLoginReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ptId = 1;
  if (this->ptid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ptid().data(), static_cast<int>(this->_internal_ptid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ss_proto.UserLoginReq.ptId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ptid(), target);
  }

  // int32 ptType = 2;
  if (this->pttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pttype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.UserLoginReq)
  return target;
}

size_t UserLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.UserLoginReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ptId = 1;
  if (this->ptid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ptid());
  }

  // int32 ptType = 2;
  if (this->pttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pttype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserLoginReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.UserLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UserLoginReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserLoginReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.UserLoginReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.UserLoginReq)
    MergeFrom(*source);
  }
}

void UserLoginReq::MergeFrom(const UserLoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.UserLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ptid().size() > 0) {
    _internal_set_ptid(from._internal_ptid());
  }
  if (from.pttype() != 0) {
    _internal_set_pttype(from._internal_pttype());
  }
}

void UserLoginReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.UserLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginReq::CopyFrom(const UserLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.UserLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginReq::IsInitialized() const {
  return true;
}

void UserLoginReq::InternalSwap(UserLoginReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ptid_.Swap(&other->ptid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pttype_, other->pttype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLoginReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserRole::InitAsDefaultInstance() {
}
class UserRole::_Internal {
 public:
};

UserRole::UserRole(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.UserRole)
}
UserRole::UserRole(const UserRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  face_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_face().empty()) {
    face_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_face(),
      GetArena());
  }
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&charid_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(charid_));
  // @@protoc_insertion_point(copy_constructor:ss_proto.UserRole)
}

void UserRole::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserRole_ss_5fproto_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&charid_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(charid_));
}

UserRole::~UserRole() {
  // @@protoc_insertion_point(destructor:ss_proto.UserRole)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserRole::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserRole::ArenaDtor(void* object) {
  UserRole* _this = reinterpret_cast< UserRole* >(object);
  (void)_this;
}
void UserRole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserRole& UserRole::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserRole_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void UserRole::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.UserRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  face_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&charid_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(charid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 roleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 worldId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 dbId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ss_proto.UserRole.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string face = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_face();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ss_proto.UserRole.face"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 charId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserRole::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.UserRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_roleid(), target);
  }

  // int64 worldId = 2;
  if (this->worldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_worldid(), target);
  }

  // int64 dbId = 3;
  if (this->dbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_dbid(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ss_proto.UserRole.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // int64 time = 5;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_time(), target);
  }

  // string face = 6;
  if (this->face().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_face().data(), static_cast<int>(this->_internal_face().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ss_proto.UserRole.face");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_face(), target);
  }

  // int32 charId = 7;
  if (this->charid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_charid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.UserRole)
  return target;
}

size_t UserRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.UserRole)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string face = 6;
  if (this->face().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_face());
  }

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_roleid());
  }

  // int64 worldId = 2;
  if (this->worldid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_worldid());
  }

  // int64 dbId = 3;
  if (this->dbid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_dbid());
  }

  // int64 time = 5;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int32 charId = 7;
  if (this->charid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_charid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserRole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.UserRole)
  GOOGLE_DCHECK_NE(&from, this);
  const UserRole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserRole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.UserRole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.UserRole)
    MergeFrom(*source);
  }
}

void UserRole::MergeFrom(const UserRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.UserRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.face().size() > 0) {
    _internal_set_face(from._internal_face());
  }
  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.worldid() != 0) {
    _internal_set_worldid(from._internal_worldid());
  }
  if (from.dbid() != 0) {
    _internal_set_dbid(from._internal_dbid());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.charid() != 0) {
    _internal_set_charid(from._internal_charid());
  }
}

void UserRole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.UserRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRole::CopyFrom(const UserRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.UserRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRole::IsInitialized() const {
  return true;
}

void UserRole::InternalSwap(UserRole* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  face_.Swap(&other->face_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserRole, charid_)
      + sizeof(UserRole::charid_)
      - PROTOBUF_FIELD_OFFSET(UserRole, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserRole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserLoginAck::InitAsDefaultInstance() {
}
class UserLoginAck::_Internal {
 public:
};

UserLoginAck::UserLoginAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  roles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.UserLoginAck)
}
UserLoginAck::UserLoginAck(const UserLoginAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_(from.roles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ss_proto.UserLoginAck)
}

void UserLoginAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserLoginAck_ss_5fproto_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserLoginAck::~UserLoginAck() {
  // @@protoc_insertion_point(destructor:ss_proto.UserLoginAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserLoginAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserLoginAck::ArenaDtor(void* object) {
  UserLoginAck* _this = reinterpret_cast< UserLoginAck* >(object);
  (void)_this;
}
void UserLoginAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserLoginAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserLoginAck& UserLoginAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserLoginAck_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void UserLoginAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.UserLoginAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLoginAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ss_proto.UserLoginAck.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ss_proto.UserRole roles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserLoginAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.UserLoginAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ss_proto.UserLoginAck.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // repeated .ss_proto.UserRole roles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_roles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.UserLoginAck)
  return target;
}

size_t UserLoginAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.UserLoginAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ss_proto.UserRole roles = 2;
  total_size += 1UL * this->_internal_roles_size();
  for (const auto& msg : this->roles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserLoginAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.UserLoginAck)
  GOOGLE_DCHECK_NE(&from, this);
  const UserLoginAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserLoginAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.UserLoginAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.UserLoginAck)
    MergeFrom(*source);
  }
}

void UserLoginAck::MergeFrom(const UserLoginAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.UserLoginAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
}

void UserLoginAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.UserLoginAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginAck::CopyFrom(const UserLoginAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.UserLoginAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginAck::IsInitialized() const {
  return true;
}

void UserLoginAck::InternalSwap(UserLoginAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLoginAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginWorldReq::InitAsDefaultInstance() {
}
class LoginWorldReq::_Internal {
 public:
};

LoginWorldReq::LoginWorldReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.LoginWorldReq)
}
LoginWorldReq::LoginWorldReq(const LoginWorldReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  worldid_ = from.worldid_;
  // @@protoc_insertion_point(copy_constructor:ss_proto.LoginWorldReq)
}

void LoginWorldReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginWorldReq_ss_5fproto_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  worldid_ = PROTOBUF_LONGLONG(0);
}

LoginWorldReq::~LoginWorldReq() {
  // @@protoc_insertion_point(destructor:ss_proto.LoginWorldReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginWorldReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginWorldReq::ArenaDtor(void* object) {
  LoginWorldReq* _this = reinterpret_cast< LoginWorldReq* >(object);
  (void)_this;
}
void LoginWorldReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginWorldReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginWorldReq& LoginWorldReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginWorldReq_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void LoginWorldReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.LoginWorldReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  worldid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginWorldReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ss_proto.LoginWorldReq.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 worldId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginWorldReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.LoginWorldReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ss_proto.LoginWorldReq.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // int64 worldId = 2;
  if (this->worldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_worldid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.LoginWorldReq)
  return target;
}

size_t LoginWorldReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.LoginWorldReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // int64 worldId = 2;
  if (this->worldid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_worldid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginWorldReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.LoginWorldReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginWorldReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginWorldReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.LoginWorldReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.LoginWorldReq)
    MergeFrom(*source);
  }
}

void LoginWorldReq::MergeFrom(const LoginWorldReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.LoginWorldReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.worldid() != 0) {
    _internal_set_worldid(from._internal_worldid());
  }
}

void LoginWorldReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.LoginWorldReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginWorldReq::CopyFrom(const LoginWorldReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.LoginWorldReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginWorldReq::IsInitialized() const {
  return true;
}

void LoginWorldReq::InternalSwap(LoginWorldReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(worldid_, other->worldid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginWorldReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginWorldAck::InitAsDefaultInstance() {
}
class LoginWorldAck::_Internal {
 public:
};

LoginWorldAck::LoginWorldAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.LoginWorldAck)
}
LoginWorldAck::LoginWorldAck(const LoginWorldAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:ss_proto.LoginWorldAck)
}

void LoginWorldAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginWorldAck_ss_5fproto_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

LoginWorldAck::~LoginWorldAck() {
  // @@protoc_insertion_point(destructor:ss_proto.LoginWorldAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginWorldAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginWorldAck::ArenaDtor(void* object) {
  LoginWorldAck* _this = reinterpret_cast< LoginWorldAck* >(object);
  (void)_this;
}
void LoginWorldAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginWorldAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginWorldAck& LoginWorldAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginWorldAck_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void LoginWorldAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.LoginWorldAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginWorldAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ss_proto.LoginWorldAck.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ss_proto.LoginWorldAck.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginWorldAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.LoginWorldAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ss_proto.LoginWorldAck.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ss_proto.LoginWorldAck.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.LoginWorldAck)
  return target;
}

size_t LoginWorldAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.LoginWorldAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginWorldAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.LoginWorldAck)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginWorldAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginWorldAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.LoginWorldAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.LoginWorldAck)
    MergeFrom(*source);
  }
}

void LoginWorldAck::MergeFrom(const LoginWorldAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.LoginWorldAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void LoginWorldAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.LoginWorldAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginWorldAck::CopyFrom(const LoginWorldAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.LoginWorldAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginWorldAck::IsInitialized() const {
  return true;
}

void LoginWorldAck::InternalSwap(LoginWorldAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginWorldAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginGameReq::InitAsDefaultInstance() {
}
class LoginGameReq::_Internal {
 public:
};

LoginGameReq::LoginGameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.LoginGameReq)
}
LoginGameReq::LoginGameReq(const LoginGameReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ss_proto.LoginGameReq)
}

void LoginGameReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginGameReq_ss_5fproto_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LoginGameReq::~LoginGameReq() {
  // @@protoc_insertion_point(destructor:ss_proto.LoginGameReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginGameReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginGameReq::ArenaDtor(void* object) {
  LoginGameReq* _this = reinterpret_cast< LoginGameReq* >(object);
  (void)_this;
}
void LoginGameReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginGameReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginGameReq& LoginGameReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginGameReq_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void LoginGameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.LoginGameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginGameReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ss_proto.LoginGameReq.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginGameReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.LoginGameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ss_proto.LoginGameReq.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.LoginGameReq)
  return target;
}

size_t LoginGameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.LoginGameReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginGameReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.LoginGameReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginGameReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginGameReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.LoginGameReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.LoginGameReq)
    MergeFrom(*source);
  }
}

void LoginGameReq::MergeFrom(const LoginGameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.LoginGameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
}

void LoginGameReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.LoginGameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginGameReq::CopyFrom(const LoginGameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.LoginGameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginGameReq::IsInitialized() const {
  return true;
}

void LoginGameReq::InternalSwap(LoginGameReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginGameReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoleDatas::InitAsDefaultInstance() {
}
class RoleDatas::_Internal {
 public:
};

RoleDatas::RoleDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.RoleDatas)
}
RoleDatas::RoleDatas(const RoleDatas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  basedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_basedata().empty()) {
    basedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_basedata(),
      GetArena());
  }
  scenedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scenedata().empty()) {
    scenedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_scenedata(),
      GetArena());
  }
  herodata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_herodata().empty()) {
    herodata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_herodata(),
      GetArena());
  }
  equipdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_equipdata().empty()) {
    equipdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_equipdata(),
      GetArena());
  }
  materialdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_materialdata().empty()) {
    materialdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_materialdata(),
      GetArena());
  }
  currencydata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currencydata().empty()) {
    currencydata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_currencydata(),
      GetArena());
  }
  skilldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_skilldata().empty()) {
    skilldata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_skilldata(),
      GetArena());
  }
  fooddata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fooddata().empty()) {
    fooddata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fooddata(),
      GetArena());
  }
  maildata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_maildata().empty()) {
    maildata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_maildata(),
      GetArena());
  }
  equipforge_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_equipforge().empty()) {
    equipforge_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_equipforge(),
      GetArena());
  }
  cycleevent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cycleevent().empty()) {
    cycleevent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cycleevent(),
      GetArena());
  }
  npcdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_npcdata().empty()) {
    npcdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_npcdata(),
      GetArena());
  }
  interactiondata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interactiondata().empty()) {
    interactiondata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_interactiondata(),
      GetArena());
  }
  rollrecord_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rollrecord().empty()) {
    rollrecord_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rollrecord(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ss_proto.RoleDatas)
}

void RoleDatas::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoleDatas_ss_5fproto_2eproto.base);
  basedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scenedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  herodata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  equipdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  materialdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currencydata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  skilldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fooddata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maildata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  equipforge_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cycleevent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  npcdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interactiondata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rollrecord_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RoleDatas::~RoleDatas() {
  // @@protoc_insertion_point(destructor:ss_proto.RoleDatas)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoleDatas::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  basedata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scenedata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  herodata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  equipdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  materialdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currencydata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  skilldata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fooddata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maildata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  equipforge_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cycleevent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  npcdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interactiondata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rollrecord_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoleDatas::ArenaDtor(void* object) {
  RoleDatas* _this = reinterpret_cast< RoleDatas* >(object);
  (void)_this;
}
void RoleDatas::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoleDatas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleDatas& RoleDatas::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleDatas_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void RoleDatas::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.RoleDatas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  basedata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scenedata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  herodata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  equipdata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  materialdata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  currencydata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  skilldata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fooddata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  maildata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  equipforge_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cycleevent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  npcdata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  interactiondata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rollrecord_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleDatas::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes baseData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_basedata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sceneData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_scenedata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes heroData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_herodata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes equipData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_equipdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes materialData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_materialdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes currencyData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_currencydata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes skillData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_skilldata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes foodData = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_fooddata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes mailData = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_maildata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes equipForge = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_equipforge();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes cycleEvent = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_cycleevent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes npcData = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_npcdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes interactionData = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_interactiondata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes rollRecord = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_rollrecord();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleDatas::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.RoleDatas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes baseData = 1;
  if (this->basedata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_basedata(), target);
  }

  // bytes sceneData = 2;
  if (this->scenedata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_scenedata(), target);
  }

  // bytes heroData = 3;
  if (this->herodata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_herodata(), target);
  }

  // bytes equipData = 4;
  if (this->equipdata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_equipdata(), target);
  }

  // bytes materialData = 5;
  if (this->materialdata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_materialdata(), target);
  }

  // bytes currencyData = 6;
  if (this->currencydata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_currencydata(), target);
  }

  // bytes skillData = 7;
  if (this->skilldata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_skilldata(), target);
  }

  // bytes foodData = 8;
  if (this->fooddata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_fooddata(), target);
  }

  // bytes mailData = 9;
  if (this->maildata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_maildata(), target);
  }

  // bytes equipForge = 10;
  if (this->equipforge().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_equipforge(), target);
  }

  // bytes cycleEvent = 11;
  if (this->cycleevent().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_cycleevent(), target);
  }

  // bytes npcData = 12;
  if (this->npcdata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_npcdata(), target);
  }

  // bytes interactionData = 13;
  if (this->interactiondata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_interactiondata(), target);
  }

  // bytes rollRecord = 14;
  if (this->rollrecord().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_rollrecord(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.RoleDatas)
  return target;
}

size_t RoleDatas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.RoleDatas)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes baseData = 1;
  if (this->basedata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_basedata());
  }

  // bytes sceneData = 2;
  if (this->scenedata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_scenedata());
  }

  // bytes heroData = 3;
  if (this->herodata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_herodata());
  }

  // bytes equipData = 4;
  if (this->equipdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_equipdata());
  }

  // bytes materialData = 5;
  if (this->materialdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_materialdata());
  }

  // bytes currencyData = 6;
  if (this->currencydata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_currencydata());
  }

  // bytes skillData = 7;
  if (this->skilldata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_skilldata());
  }

  // bytes foodData = 8;
  if (this->fooddata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_fooddata());
  }

  // bytes mailData = 9;
  if (this->maildata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_maildata());
  }

  // bytes equipForge = 10;
  if (this->equipforge().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_equipforge());
  }

  // bytes cycleEvent = 11;
  if (this->cycleevent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cycleevent());
  }

  // bytes npcData = 12;
  if (this->npcdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_npcdata());
  }

  // bytes interactionData = 13;
  if (this->interactiondata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_interactiondata());
  }

  // bytes rollRecord = 14;
  if (this->rollrecord().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rollrecord());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleDatas::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.RoleDatas)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleDatas* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoleDatas>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.RoleDatas)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.RoleDatas)
    MergeFrom(*source);
  }
}

void RoleDatas::MergeFrom(const RoleDatas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.RoleDatas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.basedata().size() > 0) {
    _internal_set_basedata(from._internal_basedata());
  }
  if (from.scenedata().size() > 0) {
    _internal_set_scenedata(from._internal_scenedata());
  }
  if (from.herodata().size() > 0) {
    _internal_set_herodata(from._internal_herodata());
  }
  if (from.equipdata().size() > 0) {
    _internal_set_equipdata(from._internal_equipdata());
  }
  if (from.materialdata().size() > 0) {
    _internal_set_materialdata(from._internal_materialdata());
  }
  if (from.currencydata().size() > 0) {
    _internal_set_currencydata(from._internal_currencydata());
  }
  if (from.skilldata().size() > 0) {
    _internal_set_skilldata(from._internal_skilldata());
  }
  if (from.fooddata().size() > 0) {
    _internal_set_fooddata(from._internal_fooddata());
  }
  if (from.maildata().size() > 0) {
    _internal_set_maildata(from._internal_maildata());
  }
  if (from.equipforge().size() > 0) {
    _internal_set_equipforge(from._internal_equipforge());
  }
  if (from.cycleevent().size() > 0) {
    _internal_set_cycleevent(from._internal_cycleevent());
  }
  if (from.npcdata().size() > 0) {
    _internal_set_npcdata(from._internal_npcdata());
  }
  if (from.interactiondata().size() > 0) {
    _internal_set_interactiondata(from._internal_interactiondata());
  }
  if (from.rollrecord().size() > 0) {
    _internal_set_rollrecord(from._internal_rollrecord());
  }
}

void RoleDatas::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.RoleDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDatas::CopyFrom(const RoleDatas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.RoleDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDatas::IsInitialized() const {
  return true;
}

void RoleDatas::InternalSwap(RoleDatas* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  basedata_.Swap(&other->basedata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scenedata_.Swap(&other->scenedata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  herodata_.Swap(&other->herodata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  equipdata_.Swap(&other->equipdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  materialdata_.Swap(&other->materialdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  currencydata_.Swap(&other->currencydata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  skilldata_.Swap(&other->skilldata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fooddata_.Swap(&other->fooddata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  maildata_.Swap(&other->maildata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  equipforge_.Swap(&other->equipforge_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cycleevent_.Swap(&other->cycleevent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  npcdata_.Swap(&other->npcdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  interactiondata_.Swap(&other->interactiondata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rollrecord_.Swap(&other->rollrecord_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleDatas::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginGameAck::InitAsDefaultInstance() {
  ::ss_proto::_LoginGameAck_default_instance_._instance.get_mutable()->datas_ = const_cast< ::ss_proto::RoleDatas*>(
      ::ss_proto::RoleDatas::internal_default_instance());
}
class LoginGameAck::_Internal {
 public:
  static const ::ss_proto::RoleDatas& datas(const LoginGameAck* msg);
};

const ::ss_proto::RoleDatas&
LoginGameAck::_Internal::datas(const LoginGameAck* msg) {
  return *msg->datas_;
}
LoginGameAck::LoginGameAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.LoginGameAck)
}
LoginGameAck::LoginGameAck(const LoginGameAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ptid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ptid().empty()) {
    ptid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ptid(),
      GetArena());
  }
  if (from._internal_has_datas()) {
    datas_ = new ::ss_proto::RoleDatas(*from.datas_);
  } else {
    datas_ = nullptr;
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pttype_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(pttype_));
  // @@protoc_insertion_point(copy_constructor:ss_proto.LoginGameAck)
}

void LoginGameAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginGameAck_ss_5fproto_2eproto.base);
  ptid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&datas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pttype_) -
      reinterpret_cast<char*>(&datas_)) + sizeof(pttype_));
}

LoginGameAck::~LoginGameAck() {
  // @@protoc_insertion_point(destructor:ss_proto.LoginGameAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginGameAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ptid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete datas_;
}

void LoginGameAck::ArenaDtor(void* object) {
  LoginGameAck* _this = reinterpret_cast< LoginGameAck* >(object);
  (void)_this;
}
void LoginGameAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginGameAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginGameAck& LoginGameAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginGameAck_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void LoginGameAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.LoginGameAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ptid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && datas_ != nullptr) {
    delete datas_;
  }
  datas_ = nullptr;
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pttype_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(pttype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginGameAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 roleId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.RoleDatas datas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_datas(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ptId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ptid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ss_proto.LoginGameAck.ptId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ptType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginGameAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.LoginGameAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 userId = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_userid(), target);
  }

  // int64 roleId = 2;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_roleid(), target);
  }

  // .ss_proto.RoleDatas datas = 3;
  if (this->has_datas()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::datas(this), target, stream);
  }

  // string ptId = 4;
  if (this->ptid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ptid().data(), static_cast<int>(this->_internal_ptid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ss_proto.LoginGameAck.ptId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ptid(), target);
  }

  // int32 ptType = 5;
  if (this->pttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_pttype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.LoginGameAck)
  return target;
}

size_t LoginGameAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.LoginGameAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ptId = 4;
  if (this->ptid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ptid());
  }

  // .ss_proto.RoleDatas datas = 3;
  if (this->has_datas()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *datas_);
  }

  // int64 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_userid());
  }

  // int64 roleId = 2;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_roleid());
  }

  // int32 ptType = 5;
  if (this->pttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pttype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginGameAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.LoginGameAck)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginGameAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginGameAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.LoginGameAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.LoginGameAck)
    MergeFrom(*source);
  }
}

void LoginGameAck::MergeFrom(const LoginGameAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.LoginGameAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ptid().size() > 0) {
    _internal_set_ptid(from._internal_ptid());
  }
  if (from.has_datas()) {
    _internal_mutable_datas()->::ss_proto::RoleDatas::MergeFrom(from._internal_datas());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.pttype() != 0) {
    _internal_set_pttype(from._internal_pttype());
  }
}

void LoginGameAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.LoginGameAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginGameAck::CopyFrom(const LoginGameAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.LoginGameAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginGameAck::IsInitialized() const {
  return true;
}

void LoginGameAck::InternalSwap(LoginGameAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ptid_.Swap(&other->ptid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginGameAck, pttype_)
      + sizeof(LoginGameAck::pttype_)
      - PROTOBUF_FIELD_OFFSET(LoginGameAck, datas_)>(
          reinterpret_cast<char*>(&datas_),
          reinterpret_cast<char*>(&other->datas_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginGameAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogoutGameReq::InitAsDefaultInstance() {
}
class LogoutGameReq::_Internal {
 public:
};

LogoutGameReq::LogoutGameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.LogoutGameReq)
}
LogoutGameReq::LogoutGameReq(const LogoutGameReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:ss_proto.LogoutGameReq)
}

void LogoutGameReq::SharedCtor() {
  userid_ = PROTOBUF_LONGLONG(0);
}

LogoutGameReq::~LogoutGameReq() {
  // @@protoc_insertion_point(destructor:ss_proto.LogoutGameReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogoutGameReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogoutGameReq::ArenaDtor(void* object) {
  LogoutGameReq* _this = reinterpret_cast< LogoutGameReq* >(object);
  (void)_this;
}
void LogoutGameReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogoutGameReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogoutGameReq& LogoutGameReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogoutGameReq_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void LogoutGameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.LogoutGameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogoutGameReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogoutGameReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.LogoutGameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 userId = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.LogoutGameReq)
  return target;
}

size_t LogoutGameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.LogoutGameReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogoutGameReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.LogoutGameReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutGameReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogoutGameReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.LogoutGameReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.LogoutGameReq)
    MergeFrom(*source);
  }
}

void LogoutGameReq::MergeFrom(const LogoutGameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.LogoutGameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void LogoutGameReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.LogoutGameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutGameReq::CopyFrom(const LogoutGameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.LogoutGameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutGameReq::IsInitialized() const {
  return true;
}

void LogoutGameReq::InternalSwap(LogoutGameReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogoutGameReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogoutGameAck::InitAsDefaultInstance() {
}
class LogoutGameAck::_Internal {
 public:
};

LogoutGameAck::LogoutGameAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.LogoutGameAck)
}
LogoutGameAck::LogoutGameAck(const LogoutGameAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ss_proto.LogoutGameAck)
}

void LogoutGameAck::SharedCtor() {
}

LogoutGameAck::~LogoutGameAck() {
  // @@protoc_insertion_point(destructor:ss_proto.LogoutGameAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogoutGameAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogoutGameAck::ArenaDtor(void* object) {
  LogoutGameAck* _this = reinterpret_cast< LogoutGameAck* >(object);
  (void)_this;
}
void LogoutGameAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogoutGameAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogoutGameAck& LogoutGameAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogoutGameAck_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void LogoutGameAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.LogoutGameAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogoutGameAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogoutGameAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.LogoutGameAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.LogoutGameAck)
  return target;
}

size_t LogoutGameAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.LogoutGameAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogoutGameAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.LogoutGameAck)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutGameAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogoutGameAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.LogoutGameAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.LogoutGameAck)
    MergeFrom(*source);
  }
}

void LogoutGameAck::MergeFrom(const LogoutGameAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.LogoutGameAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LogoutGameAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.LogoutGameAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutGameAck::CopyFrom(const LogoutGameAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.LogoutGameAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutGameAck::IsInitialized() const {
  return true;
}

void LogoutGameAck::InternalSwap(LogoutGameAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogoutGameAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateRoleReq::InitAsDefaultInstance() {
}
class CreateRoleReq::_Internal {
 public:
};

CreateRoleReq::CreateRoleReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.CreateRoleReq)
}
CreateRoleReq::CreateRoleReq(const CreateRoleReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rolename().empty()) {
    rolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rolename(),
      GetArena());
  }
  face_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_face().empty()) {
    face_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_face(),
      GetArena());
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&charid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(charid_));
  // @@protoc_insertion_point(copy_constructor:ss_proto.CreateRoleReq)
}

void CreateRoleReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateRoleReq_ss_5fproto_2eproto.base);
  rolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&charid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(charid_));
}

CreateRoleReq::~CreateRoleReq() {
  // @@protoc_insertion_point(destructor:ss_proto.CreateRoleReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateRoleReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rolename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateRoleReq::ArenaDtor(void* object) {
  CreateRoleReq* _this = reinterpret_cast< CreateRoleReq* >(object);
  (void)_this;
}
void CreateRoleReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateRoleReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateRoleReq& CreateRoleReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateRoleReq_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void CreateRoleReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.CreateRoleReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rolename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  face_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&charid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(charid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRoleReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string roleName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_rolename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ss_proto.CreateRoleReq.roleName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 charId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string face = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_face();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ss_proto.CreateRoleReq.face"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateRoleReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.CreateRoleReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 userId = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_userid(), target);
  }

  // string roleName = 2;
  if (this->rolename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rolename().data(), static_cast<int>(this->_internal_rolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ss_proto.CreateRoleReq.roleName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rolename(), target);
  }

  // int32 charId = 3;
  if (this->charid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_charid(), target);
  }

  // string face = 4;
  if (this->face().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_face().data(), static_cast<int>(this->_internal_face().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ss_proto.CreateRoleReq.face");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_face(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.CreateRoleReq)
  return target;
}

size_t CreateRoleReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.CreateRoleReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roleName = 2;
  if (this->rolename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rolename());
  }

  // string face = 4;
  if (this->face().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_face());
  }

  // int64 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_userid());
  }

  // int32 charId = 3;
  if (this->charid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_charid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateRoleReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.CreateRoleReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRoleReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateRoleReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.CreateRoleReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.CreateRoleReq)
    MergeFrom(*source);
  }
}

void CreateRoleReq::MergeFrom(const CreateRoleReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.CreateRoleReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rolename().size() > 0) {
    _internal_set_rolename(from._internal_rolename());
  }
  if (from.face().size() > 0) {
    _internal_set_face(from._internal_face());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from.charid() != 0) {
    _internal_set_charid(from._internal_charid());
  }
}

void CreateRoleReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.CreateRoleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoleReq::CopyFrom(const CreateRoleReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.CreateRoleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoleReq::IsInitialized() const {
  return true;
}

void CreateRoleReq::InternalSwap(CreateRoleReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rolename_.Swap(&other->rolename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  face_.Swap(&other->face_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateRoleReq, charid_)
      + sizeof(CreateRoleReq::charid_)
      - PROTOBUF_FIELD_OFFSET(CreateRoleReq, userid_)>(
          reinterpret_cast<char*>(&userid_),
          reinterpret_cast<char*>(&other->userid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRoleReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateRoleAck::InitAsDefaultInstance() {
  ::ss_proto::_CreateRoleAck_default_instance_._instance.get_mutable()->datas_ = const_cast< ::ss_proto::RoleDatas*>(
      ::ss_proto::RoleDatas::internal_default_instance());
}
class CreateRoleAck::_Internal {
 public:
  static const ::ss_proto::RoleDatas& datas(const CreateRoleAck* msg);
};

const ::ss_proto::RoleDatas&
CreateRoleAck::_Internal::datas(const CreateRoleAck* msg) {
  return *msg->datas_;
}
CreateRoleAck::CreateRoleAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.CreateRoleAck)
}
CreateRoleAck::CreateRoleAck(const CreateRoleAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_datas()) {
    datas_ = new ::ss_proto::RoleDatas(*from.datas_);
  } else {
    datas_ = nullptr;
  }
  roleid_ = from.roleid_;
  // @@protoc_insertion_point(copy_constructor:ss_proto.CreateRoleAck)
}

void CreateRoleAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateRoleAck_ss_5fproto_2eproto.base);
  ::memset(&datas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roleid_) -
      reinterpret_cast<char*>(&datas_)) + sizeof(roleid_));
}

CreateRoleAck::~CreateRoleAck() {
  // @@protoc_insertion_point(destructor:ss_proto.CreateRoleAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateRoleAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete datas_;
}

void CreateRoleAck::ArenaDtor(void* object) {
  CreateRoleAck* _this = reinterpret_cast< CreateRoleAck* >(object);
  (void)_this;
}
void CreateRoleAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateRoleAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateRoleAck& CreateRoleAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateRoleAck_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void CreateRoleAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.CreateRoleAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && datas_ != nullptr) {
    delete datas_;
  }
  datas_ = nullptr;
  roleid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRoleAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 roleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.RoleDatas datas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_datas(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateRoleAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.CreateRoleAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_roleid(), target);
  }

  // .ss_proto.RoleDatas datas = 2;
  if (this->has_datas()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::datas(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.CreateRoleAck)
  return target;
}

size_t CreateRoleAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.CreateRoleAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ss_proto.RoleDatas datas = 2;
  if (this->has_datas()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *datas_);
  }

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_roleid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateRoleAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.CreateRoleAck)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRoleAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateRoleAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.CreateRoleAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.CreateRoleAck)
    MergeFrom(*source);
  }
}

void CreateRoleAck::MergeFrom(const CreateRoleAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.CreateRoleAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_datas()) {
    _internal_mutable_datas()->::ss_proto::RoleDatas::MergeFrom(from._internal_datas());
  }
  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
}

void CreateRoleAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.CreateRoleAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoleAck::CopyFrom(const CreateRoleAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.CreateRoleAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoleAck::IsInitialized() const {
  return true;
}

void CreateRoleAck::InternalSwap(CreateRoleAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateRoleAck, roleid_)
      + sizeof(CreateRoleAck::roleid_)
      - PROTOBUF_FIELD_OFFSET(CreateRoleAck, datas_)>(
          reinterpret_cast<char*>(&datas_),
          reinterpret_cast<char*>(&other->datas_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRoleAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SaveRoleReq::InitAsDefaultInstance() {
  ::ss_proto::_SaveRoleReq_default_instance_._instance.get_mutable()->datas_ = const_cast< ::ss_proto::RoleDatas*>(
      ::ss_proto::RoleDatas::internal_default_instance());
}
class SaveRoleReq::_Internal {
 public:
  static const ::ss_proto::RoleDatas& datas(const SaveRoleReq* msg);
};

const ::ss_proto::RoleDatas&
SaveRoleReq::_Internal::datas(const SaveRoleReq* msg) {
  return *msg->datas_;
}
SaveRoleReq::SaveRoleReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.SaveRoleReq)
}
SaveRoleReq::SaveRoleReq(const SaveRoleReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_datas()) {
    datas_ = new ::ss_proto::RoleDatas(*from.datas_);
  } else {
    datas_ = nullptr;
  }
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sync_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(sync_));
  // @@protoc_insertion_point(copy_constructor:ss_proto.SaveRoleReq)
}

void SaveRoleReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SaveRoleReq_ss_5fproto_2eproto.base);
  ::memset(&datas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sync_) -
      reinterpret_cast<char*>(&datas_)) + sizeof(sync_));
}

SaveRoleReq::~SaveRoleReq() {
  // @@protoc_insertion_point(destructor:ss_proto.SaveRoleReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SaveRoleReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete datas_;
}

void SaveRoleReq::ArenaDtor(void* object) {
  SaveRoleReq* _this = reinterpret_cast< SaveRoleReq* >(object);
  (void)_this;
}
void SaveRoleReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaveRoleReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SaveRoleReq& SaveRoleReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SaveRoleReq_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void SaveRoleReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.SaveRoleReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && datas_ != nullptr) {
    delete datas_;
  }
  datas_ = nullptr;
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sync_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(sync_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveRoleReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 roleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.RoleDatas datas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_datas(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sync = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveRoleReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.SaveRoleReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_roleid(), target);
  }

  // .ss_proto.RoleDatas datas = 2;
  if (this->has_datas()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::datas(this), target, stream);
  }

  // bool sync = 3;
  if (this->sync() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_sync(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.SaveRoleReq)
  return target;
}

size_t SaveRoleReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.SaveRoleReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ss_proto.RoleDatas datas = 2;
  if (this->has_datas()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *datas_);
  }

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_roleid());
  }

  // bool sync = 3;
  if (this->sync() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SaveRoleReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.SaveRoleReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SaveRoleReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SaveRoleReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.SaveRoleReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.SaveRoleReq)
    MergeFrom(*source);
  }
}

void SaveRoleReq::MergeFrom(const SaveRoleReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.SaveRoleReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_datas()) {
    _internal_mutable_datas()->::ss_proto::RoleDatas::MergeFrom(from._internal_datas());
  }
  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.sync() != 0) {
    _internal_set_sync(from._internal_sync());
  }
}

void SaveRoleReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.SaveRoleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveRoleReq::CopyFrom(const SaveRoleReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.SaveRoleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveRoleReq::IsInitialized() const {
  return true;
}

void SaveRoleReq::InternalSwap(SaveRoleReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SaveRoleReq, sync_)
      + sizeof(SaveRoleReq::sync_)
      - PROTOBUF_FIELD_OFFSET(SaveRoleReq, datas_)>(
          reinterpret_cast<char*>(&datas_),
          reinterpret_cast<char*>(&other->datas_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveRoleReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SaveRoleAck::InitAsDefaultInstance() {
}
class SaveRoleAck::_Internal {
 public:
};

SaveRoleAck::SaveRoleAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.SaveRoleAck)
}
SaveRoleAck::SaveRoleAck(const SaveRoleAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ss_proto.SaveRoleAck)
}

void SaveRoleAck::SharedCtor() {
}

SaveRoleAck::~SaveRoleAck() {
  // @@protoc_insertion_point(destructor:ss_proto.SaveRoleAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SaveRoleAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SaveRoleAck::ArenaDtor(void* object) {
  SaveRoleAck* _this = reinterpret_cast< SaveRoleAck* >(object);
  (void)_this;
}
void SaveRoleAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaveRoleAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SaveRoleAck& SaveRoleAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SaveRoleAck_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void SaveRoleAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.SaveRoleAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveRoleAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveRoleAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.SaveRoleAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.SaveRoleAck)
  return target;
}

size_t SaveRoleAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.SaveRoleAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SaveRoleAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.SaveRoleAck)
  GOOGLE_DCHECK_NE(&from, this);
  const SaveRoleAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SaveRoleAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.SaveRoleAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.SaveRoleAck)
    MergeFrom(*source);
  }
}

void SaveRoleAck::MergeFrom(const SaveRoleAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.SaveRoleAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SaveRoleAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.SaveRoleAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveRoleAck::CopyFrom(const SaveRoleAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.SaveRoleAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveRoleAck::IsInitialized() const {
  return true;
}

void SaveRoleAck::InternalSwap(SaveRoleAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveRoleAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KickUserNtf::InitAsDefaultInstance() {
}
class KickUserNtf::_Internal {
 public:
};

KickUserNtf::KickUserNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.KickUserNtf)
}
KickUserNtf::KickUserNtf(const KickUserNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_account(),
      GetArena());
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:ss_proto.KickUserNtf)
}

void KickUserNtf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KickUserNtf_ss_5fproto_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_ = PROTOBUF_LONGLONG(0);
}

KickUserNtf::~KickUserNtf() {
  // @@protoc_insertion_point(destructor:ss_proto.KickUserNtf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KickUserNtf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KickUserNtf::ArenaDtor(void* object) {
  KickUserNtf* _this = reinterpret_cast< KickUserNtf* >(object);
  (void)_this;
}
void KickUserNtf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KickUserNtf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KickUserNtf& KickUserNtf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KickUserNtf_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void KickUserNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.KickUserNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  userid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KickUserNtf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ss_proto.KickUserNtf.account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ss_proto.KickUserNtf.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KickUserNtf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.KickUserNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 userId = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_userid(), target);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ss_proto.KickUserNtf.account");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account(), target);
  }

  // string token = 3;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ss_proto.KickUserNtf.token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.KickUserNtf)
  return target;
}

size_t KickUserNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.KickUserNtf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string token = 3;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // int64 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KickUserNtf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.KickUserNtf)
  GOOGLE_DCHECK_NE(&from, this);
  const KickUserNtf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KickUserNtf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.KickUserNtf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.KickUserNtf)
    MergeFrom(*source);
  }
}

void KickUserNtf::MergeFrom(const KickUserNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.KickUserNtf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {
    _internal_set_account(from._internal_account());
  }
  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void KickUserNtf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.KickUserNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickUserNtf::CopyFrom(const KickUserNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.KickUserNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickUserNtf::IsInitialized() const {
  return true;
}

void KickUserNtf::InternalSwap(KickUserNtf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KickUserNtf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncRole::InitAsDefaultInstance() {
}
class SyncRole::_Internal {
 public:
};

SyncRole::SyncRole(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.SyncRole)
}
SyncRole::SyncRole(const SyncRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&svrid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(svrid_));
  // @@protoc_insertion_point(copy_constructor:ss_proto.SyncRole)
}

void SyncRole::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&svrid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(svrid_));
}

SyncRole::~SyncRole() {
  // @@protoc_insertion_point(destructor:ss_proto.SyncRole)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncRole::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SyncRole::ArenaDtor(void* object) {
  SyncRole* _this = reinterpret_cast< SyncRole* >(object);
  (void)_this;
}
void SyncRole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncRole& SyncRole::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncRole_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void SyncRole::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.SyncRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&svrid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(svrid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 roleId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 svrId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          svrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncRole::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.SyncRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 userId = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_userid(), target);
  }

  // int64 roleId = 2;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_roleid(), target);
  }

  // int64 svrId = 3;
  if (this->svrid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_svrid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.SyncRole)
  return target;
}

size_t SyncRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.SyncRole)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_userid());
  }

  // int64 roleId = 2;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_roleid());
  }

  // int64 svrId = 3;
  if (this->svrid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_svrid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncRole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.SyncRole)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncRole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncRole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.SyncRole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.SyncRole)
    MergeFrom(*source);
  }
}

void SyncRole::MergeFrom(const SyncRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.SyncRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.svrid() != 0) {
    _internal_set_svrid(from._internal_svrid());
  }
}

void SyncRole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.SyncRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncRole::CopyFrom(const SyncRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.SyncRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncRole::IsInitialized() const {
  return true;
}

void SyncRole::InternalSwap(SyncRole* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncRole, svrid_)
      + sizeof(SyncRole::svrid_)
      - PROTOBUF_FIELD_OFFSET(SyncRole, userid_)>(
          reinterpret_cast<char*>(&userid_),
          reinterpret_cast<char*>(&other->userid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncRole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncRoleNtf::InitAsDefaultInstance() {
}
class SyncRoleNtf::_Internal {
 public:
};

SyncRoleNtf::SyncRoleNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  online_(arena),
  offline_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.SyncRoleNtf)
}
SyncRoleNtf::SyncRoleNtf(const SyncRoleNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      online_(from.online_),
      offline_(from.offline_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ss_proto.SyncRoleNtf)
}

void SyncRoleNtf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncRoleNtf_ss_5fproto_2eproto.base);
}

SyncRoleNtf::~SyncRoleNtf() {
  // @@protoc_insertion_point(destructor:ss_proto.SyncRoleNtf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncRoleNtf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SyncRoleNtf::ArenaDtor(void* object) {
  SyncRoleNtf* _this = reinterpret_cast< SyncRoleNtf* >(object);
  (void)_this;
}
void SyncRoleNtf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncRoleNtf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncRoleNtf& SyncRoleNtf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncRoleNtf_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void SyncRoleNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.SyncRoleNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  online_.Clear();
  offline_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncRoleNtf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ss_proto.SyncRole online = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_online(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int64 offline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_offline(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_offline(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncRoleNtf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.SyncRoleNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ss_proto.SyncRole online = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_online_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_online(i), target, stream);
  }

  // repeated int64 offline = 2;
  {
    int byte_size = _offline_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_offline(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.SyncRoleNtf)
  return target;
}

size_t SyncRoleNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.SyncRoleNtf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ss_proto.SyncRole online = 1;
  total_size += 1UL * this->_internal_online_size();
  for (const auto& msg : this->online_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 offline = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->offline_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _offline_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncRoleNtf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.SyncRoleNtf)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncRoleNtf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncRoleNtf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.SyncRoleNtf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.SyncRoleNtf)
    MergeFrom(*source);
  }
}

void SyncRoleNtf::MergeFrom(const SyncRoleNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.SyncRoleNtf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  online_.MergeFrom(from.online_);
  offline_.MergeFrom(from.offline_);
}

void SyncRoleNtf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.SyncRoleNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncRoleNtf::CopyFrom(const SyncRoleNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.SyncRoleNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncRoleNtf::IsInitialized() const {
  return true;
}

void SyncRoleNtf::InternalSwap(SyncRoleNtf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  online_.InternalSwap(&other->online_);
  offline_.InternalSwap(&other->offline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncRoleNtf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchBossReq::InitAsDefaultInstance() {
}
class SearchBossReq::_Internal {
 public:
};

SearchBossReq::SearchBossReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.SearchBossReq)
}
SearchBossReq::SearchBossReq(const SearchBossReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_team().empty()) {
    team_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_team(),
      GetArena());
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cheat_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(cheat_));
  // @@protoc_insertion_point(copy_constructor:ss_proto.SearchBossReq)
}

void SearchBossReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchBossReq_ss_5fproto_2eproto.base);
  team_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cheat_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(cheat_));
}

SearchBossReq::~SearchBossReq() {
  // @@protoc_insertion_point(destructor:ss_proto.SearchBossReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SearchBossReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SearchBossReq::ArenaDtor(void* object) {
  SearchBossReq* _this = reinterpret_cast< SearchBossReq* >(object);
  (void)_this;
}
void SearchBossReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchBossReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchBossReq& SearchBossReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchBossReq_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void SearchBossReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.SearchBossReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cheat_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(cheat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchBossReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 svrId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          svrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 snakeId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          snakeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes team = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_team();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sceneId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cheat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cheat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchBossReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.SearchBossReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 userId = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_userid(), target);
  }

  // int64 svrId = 2;
  if (this->svrid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_svrid(), target);
  }

  // int32 snakeId = 3;
  if (this->snakeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_snakeid(), target);
  }

  // bytes team = 4;
  if (this->team().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_team(), target);
  }

  // int32 sceneId = 5;
  if (this->sceneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_sceneid(), target);
  }

  // int32 cheat = 6;
  if (this->cheat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_cheat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.SearchBossReq)
  return target;
}

size_t SearchBossReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.SearchBossReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes team = 4;
  if (this->team().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_team());
  }

  // int64 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_userid());
  }

  // int64 svrId = 2;
  if (this->svrid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_svrid());
  }

  // int32 snakeId = 3;
  if (this->snakeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_snakeid());
  }

  // int32 sceneId = 5;
  if (this->sceneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sceneid());
  }

  // int32 cheat = 6;
  if (this->cheat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cheat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchBossReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.SearchBossReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchBossReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchBossReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.SearchBossReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.SearchBossReq)
    MergeFrom(*source);
  }
}

void SearchBossReq::MergeFrom(const SearchBossReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.SearchBossReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.team().size() > 0) {
    _internal_set_team(from._internal_team());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from.svrid() != 0) {
    _internal_set_svrid(from._internal_svrid());
  }
  if (from.snakeid() != 0) {
    _internal_set_snakeid(from._internal_snakeid());
  }
  if (from.sceneid() != 0) {
    _internal_set_sceneid(from._internal_sceneid());
  }
  if (from.cheat() != 0) {
    _internal_set_cheat(from._internal_cheat());
  }
}

void SearchBossReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.SearchBossReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchBossReq::CopyFrom(const SearchBossReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.SearchBossReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchBossReq::IsInitialized() const {
  return true;
}

void SearchBossReq::InternalSwap(SearchBossReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  team_.Swap(&other->team_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchBossReq, cheat_)
      + sizeof(SearchBossReq::cheat_)
      - PROTOBUF_FIELD_OFFSET(SearchBossReq, userid_)>(
          reinterpret_cast<char*>(&userid_),
          reinterpret_cast<char*>(&other->userid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchBossReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchBossAck::InitAsDefaultInstance() {
}
class SearchBossAck::_Internal {
 public:
};

SearchBossAck::SearchBossAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.SearchBossAck)
}
SearchBossAck::SearchBossAck(const SearchBossAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  startntf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_startntf().empty()) {
    startntf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_startntf(),
      GetArena());
  }
  updatentf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_updatentf().empty()) {
    updatentf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_updatentf(),
      GetArena());
  }
  endntf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_endntf().empty()) {
    endntf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_endntf(),
      GetArena());
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:ss_proto.SearchBossAck)
}

void SearchBossAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchBossAck_ss_5fproto_2eproto.base);
  startntf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updatentf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endntf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_ = PROTOBUF_LONGLONG(0);
}

SearchBossAck::~SearchBossAck() {
  // @@protoc_insertion_point(destructor:ss_proto.SearchBossAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SearchBossAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  startntf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updatentf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endntf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SearchBossAck::ArenaDtor(void* object) {
  SearchBossAck* _this = reinterpret_cast< SearchBossAck* >(object);
  (void)_this;
}
void SearchBossAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchBossAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchBossAck& SearchBossAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchBossAck_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void SearchBossAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.SearchBossAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  startntf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  updatentf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  endntf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  userid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchBossAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes startNtf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_startntf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes updateNtf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_updatentf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes endNtf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_endntf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchBossAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.SearchBossAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 userId = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_userid(), target);
  }

  // bytes startNtf = 2;
  if (this->startntf().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_startntf(), target);
  }

  // bytes updateNtf = 3;
  if (this->updatentf().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_updatentf(), target);
  }

  // bytes endNtf = 4;
  if (this->endntf().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_endntf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.SearchBossAck)
  return target;
}

size_t SearchBossAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.SearchBossAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes startNtf = 2;
  if (this->startntf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_startntf());
  }

  // bytes updateNtf = 3;
  if (this->updatentf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_updatentf());
  }

  // bytes endNtf = 4;
  if (this->endntf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_endntf());
  }

  // int64 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchBossAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.SearchBossAck)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchBossAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchBossAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.SearchBossAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.SearchBossAck)
    MergeFrom(*source);
  }
}

void SearchBossAck::MergeFrom(const SearchBossAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.SearchBossAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.startntf().size() > 0) {
    _internal_set_startntf(from._internal_startntf());
  }
  if (from.updatentf().size() > 0) {
    _internal_set_updatentf(from._internal_updatentf());
  }
  if (from.endntf().size() > 0) {
    _internal_set_endntf(from._internal_endntf());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void SearchBossAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.SearchBossAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchBossAck::CopyFrom(const SearchBossAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.SearchBossAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchBossAck::IsInitialized() const {
  return true;
}

void SearchBossAck::InternalSwap(SearchBossAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  startntf_.Swap(&other->startntf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  updatentf_.Swap(&other->updatentf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  endntf_.Swap(&other->endntf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchBossAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogDataReq::InitAsDefaultInstance() {
}
class LogDataReq::_Internal {
 public:
};

LogDataReq::LogDataReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.LogDataReq)
}
LogDataReq::LogDataReq(const LogDataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ss_proto.LogDataReq)
}

void LogDataReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogDataReq_ss_5fproto_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

LogDataReq::~LogDataReq() {
  // @@protoc_insertion_point(destructor:ss_proto.LogDataReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogDataReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogDataReq::ArenaDtor(void* object) {
  LogDataReq* _this = reinterpret_cast< LogDataReq* >(object);
  (void)_this;
}
void LogDataReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogDataReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogDataReq& LogDataReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogDataReq_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void LogDataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.LogDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogDataReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ss_proto.LogDataType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ss_proto::LogDataType>(val));
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogDataReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.LogDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ss_proto.LogDataType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.LogDataReq)
  return target;
}

size_t LogDataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.LogDataReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .ss_proto.LogDataType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogDataReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.LogDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LogDataReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogDataReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.LogDataReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.LogDataReq)
    MergeFrom(*source);
  }
}

void LogDataReq::MergeFrom(const LogDataReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.LogDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void LogDataReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.LogDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogDataReq::CopyFrom(const LogDataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.LogDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogDataReq::IsInitialized() const {
  return true;
}

void LogDataReq::InternalSwap(LogDataReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogDataReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogDataAck::InitAsDefaultInstance() {
}
class LogDataAck::_Internal {
 public:
};

LogDataAck::LogDataAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.LogDataAck)
}
LogDataAck::LogDataAck(const LogDataAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ss_proto.LogDataAck)
}

void LogDataAck::SharedCtor() {
}

LogDataAck::~LogDataAck() {
  // @@protoc_insertion_point(destructor:ss_proto.LogDataAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogDataAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogDataAck::ArenaDtor(void* object) {
  LogDataAck* _this = reinterpret_cast< LogDataAck* >(object);
  (void)_this;
}
void LogDataAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogDataAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogDataAck& LogDataAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogDataAck_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void LogDataAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.LogDataAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogDataAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogDataAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.LogDataAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.LogDataAck)
  return target;
}

size_t LogDataAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.LogDataAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogDataAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.LogDataAck)
  GOOGLE_DCHECK_NE(&from, this);
  const LogDataAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogDataAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.LogDataAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.LogDataAck)
    MergeFrom(*source);
  }
}

void LogDataAck::MergeFrom(const LogDataAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.LogDataAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LogDataAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.LogDataAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogDataAck::CopyFrom(const LogDataAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.LogDataAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogDataAck::IsInitialized() const {
  return true;
}

void LogDataAck::InternalSwap(LogDataAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogDataAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadRoleSkillReq::InitAsDefaultInstance() {
}
class LoadRoleSkillReq::_Internal {
 public:
};

LoadRoleSkillReq::LoadRoleSkillReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.LoadRoleSkillReq)
}
LoadRoleSkillReq::LoadRoleSkillReq(const LoadRoleSkillReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roleid_ = from.roleid_;
  // @@protoc_insertion_point(copy_constructor:ss_proto.LoadRoleSkillReq)
}

void LoadRoleSkillReq::SharedCtor() {
  roleid_ = PROTOBUF_LONGLONG(0);
}

LoadRoleSkillReq::~LoadRoleSkillReq() {
  // @@protoc_insertion_point(destructor:ss_proto.LoadRoleSkillReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadRoleSkillReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoadRoleSkillReq::ArenaDtor(void* object) {
  LoadRoleSkillReq* _this = reinterpret_cast< LoadRoleSkillReq* >(object);
  (void)_this;
}
void LoadRoleSkillReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadRoleSkillReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadRoleSkillReq& LoadRoleSkillReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadRoleSkillReq_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void LoadRoleSkillReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.LoadRoleSkillReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roleid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadRoleSkillReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 roleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadRoleSkillReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.LoadRoleSkillReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_roleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.LoadRoleSkillReq)
  return target;
}

size_t LoadRoleSkillReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.LoadRoleSkillReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_roleid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadRoleSkillReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.LoadRoleSkillReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadRoleSkillReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadRoleSkillReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.LoadRoleSkillReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.LoadRoleSkillReq)
    MergeFrom(*source);
  }
}

void LoadRoleSkillReq::MergeFrom(const LoadRoleSkillReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.LoadRoleSkillReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
}

void LoadRoleSkillReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.LoadRoleSkillReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadRoleSkillReq::CopyFrom(const LoadRoleSkillReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.LoadRoleSkillReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadRoleSkillReq::IsInitialized() const {
  return true;
}

void LoadRoleSkillReq::InternalSwap(LoadRoleSkillReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(roleid_, other->roleid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadRoleSkillReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadRoleSkillAck::InitAsDefaultInstance() {
}
class LoadRoleSkillAck::_Internal {
 public:
};

LoadRoleSkillAck::LoadRoleSkillAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.LoadRoleSkillAck)
}
LoadRoleSkillAck::LoadRoleSkillAck(const LoadRoleSkillAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  skilldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_skilldata().empty()) {
    skilldata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_skilldata(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ss_proto.LoadRoleSkillAck)
}

void LoadRoleSkillAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadRoleSkillAck_ss_5fproto_2eproto.base);
  skilldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LoadRoleSkillAck::~LoadRoleSkillAck() {
  // @@protoc_insertion_point(destructor:ss_proto.LoadRoleSkillAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadRoleSkillAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  skilldata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoadRoleSkillAck::ArenaDtor(void* object) {
  LoadRoleSkillAck* _this = reinterpret_cast< LoadRoleSkillAck* >(object);
  (void)_this;
}
void LoadRoleSkillAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadRoleSkillAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadRoleSkillAck& LoadRoleSkillAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadRoleSkillAck_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void LoadRoleSkillAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.LoadRoleSkillAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skilldata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadRoleSkillAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes skillData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_skilldata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadRoleSkillAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.LoadRoleSkillAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes skillData = 1;
  if (this->skilldata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_skilldata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.LoadRoleSkillAck)
  return target;
}

size_t LoadRoleSkillAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.LoadRoleSkillAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes skillData = 1;
  if (this->skilldata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_skilldata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadRoleSkillAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.LoadRoleSkillAck)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadRoleSkillAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadRoleSkillAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.LoadRoleSkillAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.LoadRoleSkillAck)
    MergeFrom(*source);
  }
}

void LoadRoleSkillAck::MergeFrom(const LoadRoleSkillAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.LoadRoleSkillAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.skilldata().size() > 0) {
    _internal_set_skilldata(from._internal_skilldata());
  }
}

void LoadRoleSkillAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.LoadRoleSkillAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadRoleSkillAck::CopyFrom(const LoadRoleSkillAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.LoadRoleSkillAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadRoleSkillAck::IsInitialized() const {
  return true;
}

void LoadRoleSkillAck::InternalSwap(LoadRoleSkillAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  skilldata_.Swap(&other->skilldata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadRoleSkillAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadRolePackageReq::InitAsDefaultInstance() {
}
class LoadRolePackageReq::_Internal {
 public:
};

LoadRolePackageReq::LoadRolePackageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.LoadRolePackageReq)
}
LoadRolePackageReq::LoadRolePackageReq(const LoadRolePackageReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&loaditemtype_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(loaditemtype_));
  // @@protoc_insertion_point(copy_constructor:ss_proto.LoadRolePackageReq)
}

void LoadRolePackageReq::SharedCtor() {
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&loaditemtype_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(loaditemtype_));
}

LoadRolePackageReq::~LoadRolePackageReq() {
  // @@protoc_insertion_point(destructor:ss_proto.LoadRolePackageReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadRolePackageReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoadRolePackageReq::ArenaDtor(void* object) {
  LoadRolePackageReq* _this = reinterpret_cast< LoadRolePackageReq* >(object);
  (void)_this;
}
void LoadRolePackageReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadRolePackageReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadRolePackageReq& LoadRolePackageReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadRolePackageReq_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void LoadRolePackageReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.LoadRolePackageReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&loaditemtype_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(loaditemtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadRolePackageReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 roleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 loadItemType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          loaditemtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadRolePackageReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.LoadRolePackageReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_roleid(), target);
  }

  // int32 loadItemType = 2;
  if (this->loaditemtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_loaditemtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.LoadRolePackageReq)
  return target;
}

size_t LoadRolePackageReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.LoadRolePackageReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_roleid());
  }

  // int32 loadItemType = 2;
  if (this->loaditemtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_loaditemtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadRolePackageReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.LoadRolePackageReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadRolePackageReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadRolePackageReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.LoadRolePackageReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.LoadRolePackageReq)
    MergeFrom(*source);
  }
}

void LoadRolePackageReq::MergeFrom(const LoadRolePackageReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.LoadRolePackageReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.loaditemtype() != 0) {
    _internal_set_loaditemtype(from._internal_loaditemtype());
  }
}

void LoadRolePackageReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.LoadRolePackageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadRolePackageReq::CopyFrom(const LoadRolePackageReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.LoadRolePackageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadRolePackageReq::IsInitialized() const {
  return true;
}

void LoadRolePackageReq::InternalSwap(LoadRolePackageReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadRolePackageReq, loaditemtype_)
      + sizeof(LoadRolePackageReq::loaditemtype_)
      - PROTOBUF_FIELD_OFFSET(LoadRolePackageReq, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadRolePackageReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadRolePackageAck::InitAsDefaultInstance() {
}
class LoadRolePackageAck::_Internal {
 public:
};

LoadRolePackageAck::LoadRolePackageAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.LoadRolePackageAck)
}
LoadRolePackageAck::LoadRolePackageAck(const LoadRolePackageAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  itemsdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_itemsdata().empty()) {
    itemsdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_itemsdata(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ss_proto.LoadRolePackageAck)
}

void LoadRolePackageAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadRolePackageAck_ss_5fproto_2eproto.base);
  itemsdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LoadRolePackageAck::~LoadRolePackageAck() {
  // @@protoc_insertion_point(destructor:ss_proto.LoadRolePackageAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadRolePackageAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  itemsdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoadRolePackageAck::ArenaDtor(void* object) {
  LoadRolePackageAck* _this = reinterpret_cast< LoadRolePackageAck* >(object);
  (void)_this;
}
void LoadRolePackageAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadRolePackageAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadRolePackageAck& LoadRolePackageAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadRolePackageAck_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void LoadRolePackageAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.LoadRolePackageAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itemsdata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadRolePackageAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes itemsData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_itemsdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadRolePackageAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.LoadRolePackageAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes itemsData = 1;
  if (this->itemsdata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_itemsdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.LoadRolePackageAck)
  return target;
}

size_t LoadRolePackageAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.LoadRolePackageAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes itemsData = 1;
  if (this->itemsdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_itemsdata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadRolePackageAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.LoadRolePackageAck)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadRolePackageAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadRolePackageAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.LoadRolePackageAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.LoadRolePackageAck)
    MergeFrom(*source);
  }
}

void LoadRolePackageAck::MergeFrom(const LoadRolePackageAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.LoadRolePackageAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.itemsdata().size() > 0) {
    _internal_set_itemsdata(from._internal_itemsdata());
  }
}

void LoadRolePackageAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.LoadRolePackageAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadRolePackageAck::CopyFrom(const LoadRolePackageAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.LoadRolePackageAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadRolePackageAck::IsInitialized() const {
  return true;
}

void LoadRolePackageAck::InternalSwap(LoadRolePackageAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  itemsdata_.Swap(&other->itemsdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadRolePackageAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SaveRolePackageReq::InitAsDefaultInstance() {
}
class SaveRolePackageReq::_Internal {
 public:
};

SaveRolePackageReq::SaveRolePackageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.SaveRolePackageReq)
}
SaveRolePackageReq::SaveRolePackageReq(const SaveRolePackageReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  itemdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_itemdata().empty()) {
    itemdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_itemdata(),
      GetArena());
  }
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&itemtype_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(itemtype_));
  // @@protoc_insertion_point(copy_constructor:ss_proto.SaveRolePackageReq)
}

void SaveRolePackageReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SaveRolePackageReq_ss_5fproto_2eproto.base);
  itemdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itemtype_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(itemtype_));
}

SaveRolePackageReq::~SaveRolePackageReq() {
  // @@protoc_insertion_point(destructor:ss_proto.SaveRolePackageReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SaveRolePackageReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  itemdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SaveRolePackageReq::ArenaDtor(void* object) {
  SaveRolePackageReq* _this = reinterpret_cast< SaveRolePackageReq* >(object);
  (void)_this;
}
void SaveRolePackageReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaveRolePackageReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SaveRolePackageReq& SaveRolePackageReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SaveRolePackageReq_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void SaveRolePackageReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.SaveRolePackageReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itemdata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itemtype_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(itemtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveRolePackageReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 roleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ItemType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          itemtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes itemData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_itemdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveRolePackageReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.SaveRolePackageReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_roleid(), target);
  }

  // int32 ItemType = 2;
  if (this->itemtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_itemtype(), target);
  }

  // bytes itemData = 3;
  if (this->itemdata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_itemdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.SaveRolePackageReq)
  return target;
}

size_t SaveRolePackageReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.SaveRolePackageReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes itemData = 3;
  if (this->itemdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_itemdata());
  }

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_roleid());
  }

  // int32 ItemType = 2;
  if (this->itemtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_itemtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SaveRolePackageReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.SaveRolePackageReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SaveRolePackageReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SaveRolePackageReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.SaveRolePackageReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.SaveRolePackageReq)
    MergeFrom(*source);
  }
}

void SaveRolePackageReq::MergeFrom(const SaveRolePackageReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.SaveRolePackageReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.itemdata().size() > 0) {
    _internal_set_itemdata(from._internal_itemdata());
  }
  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.itemtype() != 0) {
    _internal_set_itemtype(from._internal_itemtype());
  }
}

void SaveRolePackageReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.SaveRolePackageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveRolePackageReq::CopyFrom(const SaveRolePackageReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.SaveRolePackageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveRolePackageReq::IsInitialized() const {
  return true;
}

void SaveRolePackageReq::InternalSwap(SaveRolePackageReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  itemdata_.Swap(&other->itemdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SaveRolePackageReq, itemtype_)
      + sizeof(SaveRolePackageReq::itemtype_)
      - PROTOBUF_FIELD_OFFSET(SaveRolePackageReq, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveRolePackageReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SaveRolePackageAck::InitAsDefaultInstance() {
}
class SaveRolePackageAck::_Internal {
 public:
};

SaveRolePackageAck::SaveRolePackageAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.SaveRolePackageAck)
}
SaveRolePackageAck::SaveRolePackageAck(const SaveRolePackageAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ss_proto.SaveRolePackageAck)
}

void SaveRolePackageAck::SharedCtor() {
}

SaveRolePackageAck::~SaveRolePackageAck() {
  // @@protoc_insertion_point(destructor:ss_proto.SaveRolePackageAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SaveRolePackageAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SaveRolePackageAck::ArenaDtor(void* object) {
  SaveRolePackageAck* _this = reinterpret_cast< SaveRolePackageAck* >(object);
  (void)_this;
}
void SaveRolePackageAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaveRolePackageAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SaveRolePackageAck& SaveRolePackageAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SaveRolePackageAck_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void SaveRolePackageAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.SaveRolePackageAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveRolePackageAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveRolePackageAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.SaveRolePackageAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.SaveRolePackageAck)
  return target;
}

size_t SaveRolePackageAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.SaveRolePackageAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SaveRolePackageAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.SaveRolePackageAck)
  GOOGLE_DCHECK_NE(&from, this);
  const SaveRolePackageAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SaveRolePackageAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.SaveRolePackageAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.SaveRolePackageAck)
    MergeFrom(*source);
  }
}

void SaveRolePackageAck::MergeFrom(const SaveRolePackageAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.SaveRolePackageAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SaveRolePackageAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.SaveRolePackageAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveRolePackageAck::CopyFrom(const SaveRolePackageAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.SaveRolePackageAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveRolePackageAck::IsInitialized() const {
  return true;
}

void SaveRolePackageAck::InternalSwap(SaveRolePackageAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveRolePackageAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FriendAddReq::InitAsDefaultInstance() {
}
class FriendAddReq::_Internal {
 public:
};

FriendAddReq::FriendAddReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.FriendAddReq)
}
FriendAddReq::FriendAddReq(const FriendAddReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&srcid_, &from.srcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&destid_) -
    reinterpret_cast<char*>(&srcid_)) + sizeof(destid_));
  // @@protoc_insertion_point(copy_constructor:ss_proto.FriendAddReq)
}

void FriendAddReq::SharedCtor() {
  ::memset(&srcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destid_) -
      reinterpret_cast<char*>(&srcid_)) + sizeof(destid_));
}

FriendAddReq::~FriendAddReq() {
  // @@protoc_insertion_point(destructor:ss_proto.FriendAddReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FriendAddReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FriendAddReq::ArenaDtor(void* object) {
  FriendAddReq* _this = reinterpret_cast< FriendAddReq* >(object);
  (void)_this;
}
void FriendAddReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FriendAddReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FriendAddReq& FriendAddReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FriendAddReq_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void FriendAddReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.FriendAddReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&srcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destid_) -
      reinterpret_cast<char*>(&srcid_)) + sizeof(destid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendAddReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 srcId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          srcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 destId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          destid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FriendAddReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.FriendAddReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 srcId = 1;
  if (this->srcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_srcid(), target);
  }

  // int64 destId = 2;
  if (this->destid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_destid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.FriendAddReq)
  return target;
}

size_t FriendAddReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.FriendAddReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 srcId = 1;
  if (this->srcid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_srcid());
  }

  // int64 destId = 2;
  if (this->destid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_destid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendAddReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.FriendAddReq)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendAddReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FriendAddReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.FriendAddReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.FriendAddReq)
    MergeFrom(*source);
  }
}

void FriendAddReq::MergeFrom(const FriendAddReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.FriendAddReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.srcid() != 0) {
    _internal_set_srcid(from._internal_srcid());
  }
  if (from.destid() != 0) {
    _internal_set_destid(from._internal_destid());
  }
}

void FriendAddReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.FriendAddReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendAddReq::CopyFrom(const FriendAddReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.FriendAddReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendAddReq::IsInitialized() const {
  return true;
}

void FriendAddReq::InternalSwap(FriendAddReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FriendAddReq, destid_)
      + sizeof(FriendAddReq::destid_)
      - PROTOBUF_FIELD_OFFSET(FriendAddReq, srcid_)>(
          reinterpret_cast<char*>(&srcid_),
          reinterpret_cast<char*>(&other->srcid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendAddReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FriendAddAck::InitAsDefaultInstance() {
}
class FriendAddAck::_Internal {
 public:
};

FriendAddAck::FriendAddAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.FriendAddAck)
}
FriendAddAck::FriendAddAck(const FriendAddAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ss_proto.FriendAddAck)
}

void FriendAddAck::SharedCtor() {
}

FriendAddAck::~FriendAddAck() {
  // @@protoc_insertion_point(destructor:ss_proto.FriendAddAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FriendAddAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FriendAddAck::ArenaDtor(void* object) {
  FriendAddAck* _this = reinterpret_cast< FriendAddAck* >(object);
  (void)_this;
}
void FriendAddAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FriendAddAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FriendAddAck& FriendAddAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FriendAddAck_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void FriendAddAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.FriendAddAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendAddAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FriendAddAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.FriendAddAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.FriendAddAck)
  return target;
}

size_t FriendAddAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.FriendAddAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendAddAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.FriendAddAck)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendAddAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FriendAddAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.FriendAddAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.FriendAddAck)
    MergeFrom(*source);
  }
}

void FriendAddAck::MergeFrom(const FriendAddAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.FriendAddAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FriendAddAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.FriendAddAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendAddAck::CopyFrom(const FriendAddAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.FriendAddAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendAddAck::IsInitialized() const {
  return true;
}

void FriendAddAck::InternalSwap(FriendAddAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendAddAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FriendDelReq::InitAsDefaultInstance() {
}
class FriendDelReq::_Internal {
 public:
};

FriendDelReq::FriendDelReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.FriendDelReq)
}
FriendDelReq::FriendDelReq(const FriendDelReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&srcid_, &from.srcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&destid_) -
    reinterpret_cast<char*>(&srcid_)) + sizeof(destid_));
  // @@protoc_insertion_point(copy_constructor:ss_proto.FriendDelReq)
}

void FriendDelReq::SharedCtor() {
  ::memset(&srcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destid_) -
      reinterpret_cast<char*>(&srcid_)) + sizeof(destid_));
}

FriendDelReq::~FriendDelReq() {
  // @@protoc_insertion_point(destructor:ss_proto.FriendDelReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FriendDelReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FriendDelReq::ArenaDtor(void* object) {
  FriendDelReq* _this = reinterpret_cast< FriendDelReq* >(object);
  (void)_this;
}
void FriendDelReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FriendDelReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FriendDelReq& FriendDelReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FriendDelReq_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void FriendDelReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.FriendDelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&srcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destid_) -
      reinterpret_cast<char*>(&srcid_)) + sizeof(destid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendDelReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 srcId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          srcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 destId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          destid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FriendDelReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.FriendDelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 srcId = 1;
  if (this->srcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_srcid(), target);
  }

  // int64 destId = 2;
  if (this->destid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_destid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.FriendDelReq)
  return target;
}

size_t FriendDelReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.FriendDelReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 srcId = 1;
  if (this->srcid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_srcid());
  }

  // int64 destId = 2;
  if (this->destid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_destid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendDelReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.FriendDelReq)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendDelReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FriendDelReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.FriendDelReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.FriendDelReq)
    MergeFrom(*source);
  }
}

void FriendDelReq::MergeFrom(const FriendDelReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.FriendDelReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.srcid() != 0) {
    _internal_set_srcid(from._internal_srcid());
  }
  if (from.destid() != 0) {
    _internal_set_destid(from._internal_destid());
  }
}

void FriendDelReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.FriendDelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendDelReq::CopyFrom(const FriendDelReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.FriendDelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendDelReq::IsInitialized() const {
  return true;
}

void FriendDelReq::InternalSwap(FriendDelReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FriendDelReq, destid_)
      + sizeof(FriendDelReq::destid_)
      - PROTOBUF_FIELD_OFFSET(FriendDelReq, srcid_)>(
          reinterpret_cast<char*>(&srcid_),
          reinterpret_cast<char*>(&other->srcid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendDelReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FriendDelAck::InitAsDefaultInstance() {
}
class FriendDelAck::_Internal {
 public:
};

FriendDelAck::FriendDelAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.FriendDelAck)
}
FriendDelAck::FriendDelAck(const FriendDelAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ss_proto.FriendDelAck)
}

void FriendDelAck::SharedCtor() {
}

FriendDelAck::~FriendDelAck() {
  // @@protoc_insertion_point(destructor:ss_proto.FriendDelAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FriendDelAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FriendDelAck::ArenaDtor(void* object) {
  FriendDelAck* _this = reinterpret_cast< FriendDelAck* >(object);
  (void)_this;
}
void FriendDelAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FriendDelAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FriendDelAck& FriendDelAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FriendDelAck_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void FriendDelAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.FriendDelAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendDelAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FriendDelAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.FriendDelAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.FriendDelAck)
  return target;
}

size_t FriendDelAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.FriendDelAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendDelAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.FriendDelAck)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendDelAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FriendDelAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.FriendDelAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.FriendDelAck)
    MergeFrom(*source);
  }
}

void FriendDelAck::MergeFrom(const FriendDelAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.FriendDelAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FriendDelAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.FriendDelAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendDelAck::CopyFrom(const FriendDelAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.FriendDelAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendDelAck::IsInitialized() const {
  return true;
}

void FriendDelAck::InternalSwap(FriendDelAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendDelAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FriendInfo::InitAsDefaultInstance() {
}
class FriendInfo::_Internal {
 public:
};

FriendInfo::FriendInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.FriendInfo)
}
FriendInfo::FriendInfo(const FriendInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:ss_proto.FriendInfo)
}

void FriendInfo::SharedCtor() {
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(flag_));
}

FriendInfo::~FriendInfo() {
  // @@protoc_insertion_point(destructor:ss_proto.FriendInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FriendInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FriendInfo::ArenaDtor(void* object) {
  FriendInfo* _this = reinterpret_cast< FriendInfo* >(object);
  (void)_this;
}
void FriendInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FriendInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FriendInfo& FriendInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FriendInfo_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void FriendInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.FriendInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 roleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FriendInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.FriendInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_roleid(), target);
  }

  // int64 flag = 2;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.FriendInfo)
  return target;
}

size_t FriendInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.FriendInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_roleid());
  }

  // int64 flag = 2;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.FriendInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FriendInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.FriendInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.FriendInfo)
    MergeFrom(*source);
  }
}

void FriendInfo::MergeFrom(const FriendInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.FriendInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
}

void FriendInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.FriendInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendInfo::CopyFrom(const FriendInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.FriendInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInfo::IsInitialized() const {
  return true;
}

void FriendInfo::InternalSwap(FriendInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FriendInfo, flag_)
      + sizeof(FriendInfo::flag_)
      - PROTOBUF_FIELD_OFFSET(FriendInfo, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FriendListReq::InitAsDefaultInstance() {
}
class FriendListReq::_Internal {
 public:
};

FriendListReq::FriendListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.FriendListReq)
}
FriendListReq::FriendListReq(const FriendListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  srcid_ = from.srcid_;
  // @@protoc_insertion_point(copy_constructor:ss_proto.FriendListReq)
}

void FriendListReq::SharedCtor() {
  srcid_ = PROTOBUF_LONGLONG(0);
}

FriendListReq::~FriendListReq() {
  // @@protoc_insertion_point(destructor:ss_proto.FriendListReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FriendListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FriendListReq::ArenaDtor(void* object) {
  FriendListReq* _this = reinterpret_cast< FriendListReq* >(object);
  (void)_this;
}
void FriendListReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FriendListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FriendListReq& FriendListReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FriendListReq_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void FriendListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.FriendListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srcid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendListReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 srcId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          srcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FriendListReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.FriendListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 srcId = 1;
  if (this->srcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_srcid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.FriendListReq)
  return target;
}

size_t FriendListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.FriendListReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 srcId = 1;
  if (this->srcid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_srcid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendListReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.FriendListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendListReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FriendListReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.FriendListReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.FriendListReq)
    MergeFrom(*source);
  }
}

void FriendListReq::MergeFrom(const FriendListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.FriendListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.srcid() != 0) {
    _internal_set_srcid(from._internal_srcid());
  }
}

void FriendListReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.FriendListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendListReq::CopyFrom(const FriendListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.FriendListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendListReq::IsInitialized() const {
  return true;
}

void FriendListReq::InternalSwap(FriendListReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(srcid_, other->srcid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendListReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FriendListAck::InitAsDefaultInstance() {
}
class FriendListAck::_Internal {
 public:
};

FriendListAck::FriendListAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  friends_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.FriendListAck)
}
FriendListAck::FriendListAck(const FriendListAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ss_proto.FriendListAck)
}

void FriendListAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FriendListAck_ss_5fproto_2eproto.base);
}

FriendListAck::~FriendListAck() {
  // @@protoc_insertion_point(destructor:ss_proto.FriendListAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FriendListAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FriendListAck::ArenaDtor(void* object) {
  FriendListAck* _this = reinterpret_cast< FriendListAck* >(object);
  (void)_this;
}
void FriendListAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FriendListAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FriendListAck& FriendListAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FriendListAck_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void FriendListAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.FriendListAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friends_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendListAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ss_proto.FriendInfo friends = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FriendListAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.FriendListAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ss_proto.FriendInfo friends = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_friends_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_friends(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.FriendListAck)
  return target;
}

size_t FriendListAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.FriendListAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ss_proto.FriendInfo friends = 1;
  total_size += 1UL * this->_internal_friends_size();
  for (const auto& msg : this->friends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendListAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.FriendListAck)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendListAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FriendListAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.FriendListAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.FriendListAck)
    MergeFrom(*source);
  }
}

void FriendListAck::MergeFrom(const FriendListAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.FriendListAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
}

void FriendListAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.FriendListAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendListAck::CopyFrom(const FriendListAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.FriendListAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendListAck::IsInitialized() const {
  return true;
}

void FriendListAck::InternalSwap(FriendListAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  friends_.InternalSwap(&other->friends_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendListAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoleBoardReq::InitAsDefaultInstance() {
}
class RoleBoardReq::_Internal {
 public:
};

RoleBoardReq::RoleBoardReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  roleids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.RoleBoardReq)
}
RoleBoardReq::RoleBoardReq(const RoleBoardReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roleids_(from.roleids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  small_ = from.small_;
  // @@protoc_insertion_point(copy_constructor:ss_proto.RoleBoardReq)
}

void RoleBoardReq::SharedCtor() {
  small_ = false;
}

RoleBoardReq::~RoleBoardReq() {
  // @@protoc_insertion_point(destructor:ss_proto.RoleBoardReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoleBoardReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoleBoardReq::ArenaDtor(void* object) {
  RoleBoardReq* _this = reinterpret_cast< RoleBoardReq* >(object);
  (void)_this;
}
void RoleBoardReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoleBoardReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleBoardReq& RoleBoardReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleBoardReq_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void RoleBoardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.RoleBoardReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roleids_.Clear();
  small_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleBoardReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 roleIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_roleids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_roleids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool small = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          small_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleBoardReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.RoleBoardReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 roleIds = 1;
  {
    int byte_size = _roleids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_roleids(), byte_size, target);
    }
  }

  // bool small = 2;
  if (this->small() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_small(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.RoleBoardReq)
  return target;
}

size_t RoleBoardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.RoleBoardReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 roleIds = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->roleids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _roleids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool small = 2;
  if (this->small() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleBoardReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.RoleBoardReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleBoardReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoleBoardReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.RoleBoardReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.RoleBoardReq)
    MergeFrom(*source);
  }
}

void RoleBoardReq::MergeFrom(const RoleBoardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.RoleBoardReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roleids_.MergeFrom(from.roleids_);
  if (from.small() != 0) {
    _internal_set_small(from._internal_small());
  }
}

void RoleBoardReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.RoleBoardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleBoardReq::CopyFrom(const RoleBoardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.RoleBoardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleBoardReq::IsInitialized() const {
  return true;
}

void RoleBoardReq::InternalSwap(RoleBoardReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  roleids_.InternalSwap(&other->roleids_);
  swap(small_, other->small_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleBoardReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoleBoardAck::InitAsDefaultInstance() {
}
class RoleBoardAck::_Internal {
 public:
};

RoleBoardAck::RoleBoardAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.RoleBoardAck)
}
RoleBoardAck::RoleBoardAck(const RoleBoardAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  datas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_datas().empty()) {
    datas_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_datas(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ss_proto.RoleBoardAck)
}

void RoleBoardAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoleBoardAck_ss_5fproto_2eproto.base);
  datas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RoleBoardAck::~RoleBoardAck() {
  // @@protoc_insertion_point(destructor:ss_proto.RoleBoardAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoleBoardAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  datas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoleBoardAck::ArenaDtor(void* object) {
  RoleBoardAck* _this = reinterpret_cast< RoleBoardAck* >(object);
  (void)_this;
}
void RoleBoardAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoleBoardAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleBoardAck& RoleBoardAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleBoardAck_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void RoleBoardAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.RoleBoardAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleBoardAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_datas();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleBoardAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.RoleBoardAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes datas = 1;
  if (this->datas().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_datas(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.RoleBoardAck)
  return target;
}

size_t RoleBoardAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.RoleBoardAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes datas = 1;
  if (this->datas().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_datas());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleBoardAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.RoleBoardAck)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleBoardAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoleBoardAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.RoleBoardAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.RoleBoardAck)
    MergeFrom(*source);
  }
}

void RoleBoardAck::MergeFrom(const RoleBoardAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.RoleBoardAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.datas().size() > 0) {
    _internal_set_datas(from._internal_datas());
  }
}

void RoleBoardAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.RoleBoardAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleBoardAck::CopyFrom(const RoleBoardAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.RoleBoardAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleBoardAck::IsInitialized() const {
  return true;
}

void RoleBoardAck::InternalSwap(RoleBoardAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  datas_.Swap(&other->datas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleBoardAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoleMailReq::InitAsDefaultInstance() {
}
class RoleMailReq::_Internal {
 public:
};

RoleMailReq::RoleMailReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.RoleMailReq)
}
RoleMailReq::RoleMailReq(const RoleMailReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&createtime_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(createtime_));
  // @@protoc_insertion_point(copy_constructor:ss_proto.RoleMailReq)
}

void RoleMailReq::SharedCtor() {
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&createtime_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(createtime_));
}

RoleMailReq::~RoleMailReq() {
  // @@protoc_insertion_point(destructor:ss_proto.RoleMailReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoleMailReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoleMailReq::ArenaDtor(void* object) {
  RoleMailReq* _this = reinterpret_cast< RoleMailReq* >(object);
  (void)_this;
}
void RoleMailReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoleMailReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleMailReq& RoleMailReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleMailReq_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void RoleMailReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.RoleMailReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&createtime_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(createtime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleMailReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 lastMailId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lastmailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 roleId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 createTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleMailReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.RoleMailReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lastMailId = 1;
  if (this->lastmailid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_lastmailid(), target);
  }

  // int64 roleId = 2;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_roleid(), target);
  }

  // int64 createTime = 3;
  if (this->createtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_createtime(), target);
  }

  // int32 count = 4;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.RoleMailReq)
  return target;
}

size_t RoleMailReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.RoleMailReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 roleId = 2;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_roleid());
  }

  // int32 lastMailId = 1;
  if (this->lastmailid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lastmailid());
  }

  // int32 count = 4;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  // int64 createTime = 3;
  if (this->createtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_createtime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleMailReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.RoleMailReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleMailReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoleMailReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.RoleMailReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.RoleMailReq)
    MergeFrom(*source);
  }
}

void RoleMailReq::MergeFrom(const RoleMailReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.RoleMailReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.lastmailid() != 0) {
    _internal_set_lastmailid(from._internal_lastmailid());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.createtime() != 0) {
    _internal_set_createtime(from._internal_createtime());
  }
}

void RoleMailReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.RoleMailReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleMailReq::CopyFrom(const RoleMailReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.RoleMailReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleMailReq::IsInitialized() const {
  return true;
}

void RoleMailReq::InternalSwap(RoleMailReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleMailReq, createtime_)
      + sizeof(RoleMailReq::createtime_)
      - PROTOBUF_FIELD_OFFSET(RoleMailReq, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleMailReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoleMailAck::InitAsDefaultInstance() {
}
class RoleMailAck::_Internal {
 public:
};

RoleMailAck::RoleMailAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.RoleMailAck)
}
RoleMailAck::RoleMailAck(const RoleMailAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  datas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_datas().empty()) {
    datas_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_datas(),
      GetArena());
  }
  lastmailid_ = from.lastmailid_;
  // @@protoc_insertion_point(copy_constructor:ss_proto.RoleMailAck)
}

void RoleMailAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoleMailAck_ss_5fproto_2eproto.base);
  datas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lastmailid_ = 0;
}

RoleMailAck::~RoleMailAck() {
  // @@protoc_insertion_point(destructor:ss_proto.RoleMailAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoleMailAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  datas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoleMailAck::ArenaDtor(void* object) {
  RoleMailAck* _this = reinterpret_cast< RoleMailAck* >(object);
  (void)_this;
}
void RoleMailAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoleMailAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleMailAck& RoleMailAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleMailAck_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void RoleMailAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.RoleMailAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lastmailid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleMailAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_datas();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lastMailId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lastmailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleMailAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.RoleMailAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes datas = 1;
  if (this->datas().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_datas(), target);
  }

  // int32 lastMailId = 2;
  if (this->lastmailid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_lastmailid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.RoleMailAck)
  return target;
}

size_t RoleMailAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.RoleMailAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes datas = 1;
  if (this->datas().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_datas());
  }

  // int32 lastMailId = 2;
  if (this->lastmailid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lastmailid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleMailAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.RoleMailAck)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleMailAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoleMailAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.RoleMailAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.RoleMailAck)
    MergeFrom(*source);
  }
}

void RoleMailAck::MergeFrom(const RoleMailAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.RoleMailAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.datas().size() > 0) {
    _internal_set_datas(from._internal_datas());
  }
  if (from.lastmailid() != 0) {
    _internal_set_lastmailid(from._internal_lastmailid());
  }
}

void RoleMailAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.RoleMailAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleMailAck::CopyFrom(const RoleMailAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.RoleMailAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleMailAck::IsInitialized() const {
  return true;
}

void RoleMailAck::InternalSwap(RoleMailAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  datas_.Swap(&other->datas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(lastmailid_, other->lastmailid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleMailAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TopNUpdateReq::InitAsDefaultInstance() {
}
class TopNUpdateReq::_Internal {
 public:
};

TopNUpdateReq::TopNUpdateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.TopNUpdateReq)
}
TopNUpdateReq::TopNUpdateReq(const TopNUpdateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  ::memcpy(&worldid_, &from.worldid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tnt_) -
    reinterpret_cast<char*>(&worldid_)) + sizeof(tnt_));
  // @@protoc_insertion_point(copy_constructor:ss_proto.TopNUpdateReq)
}

void TopNUpdateReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TopNUpdateReq_ss_5fproto_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&worldid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tnt_) -
      reinterpret_cast<char*>(&worldid_)) + sizeof(tnt_));
}

TopNUpdateReq::~TopNUpdateReq() {
  // @@protoc_insertion_point(destructor:ss_proto.TopNUpdateReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TopNUpdateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TopNUpdateReq::ArenaDtor(void* object) {
  TopNUpdateReq* _this = reinterpret_cast< TopNUpdateReq* >(object);
  (void)_this;
}
void TopNUpdateReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TopNUpdateReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopNUpdateReq& TopNUpdateReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopNUpdateReq_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void TopNUpdateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.TopNUpdateReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&worldid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tnt_) -
      reinterpret_cast<char*>(&worldid_)) + sizeof(tnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopNUpdateReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 worldId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopNUpdateReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.TopNUpdateReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 worldId = 1;
  if (this->worldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_worldid(), target);
  }

  // int32 tnt = 2;
  if (this->tnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tnt(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.TopNUpdateReq)
  return target;
}

size_t TopNUpdateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.TopNUpdateReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int64 worldId = 1;
  if (this->worldid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_worldid());
  }

  // int32 tnt = 2;
  if (this->tnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tnt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopNUpdateReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.TopNUpdateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TopNUpdateReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopNUpdateReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.TopNUpdateReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.TopNUpdateReq)
    MergeFrom(*source);
  }
}

void TopNUpdateReq::MergeFrom(const TopNUpdateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.TopNUpdateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.worldid() != 0) {
    _internal_set_worldid(from._internal_worldid());
  }
  if (from.tnt() != 0) {
    _internal_set_tnt(from._internal_tnt());
  }
}

void TopNUpdateReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.TopNUpdateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopNUpdateReq::CopyFrom(const TopNUpdateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.TopNUpdateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopNUpdateReq::IsInitialized() const {
  return true;
}

void TopNUpdateReq::InternalSwap(TopNUpdateReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TopNUpdateReq, tnt_)
      + sizeof(TopNUpdateReq::tnt_)
      - PROTOBUF_FIELD_OFFSET(TopNUpdateReq, worldid_)>(
          reinterpret_cast<char*>(&worldid_),
          reinterpret_cast<char*>(&other->worldid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TopNUpdateReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TopNUpdateAck::InitAsDefaultInstance() {
}
class TopNUpdateAck::_Internal {
 public:
};

TopNUpdateAck::TopNUpdateAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.TopNUpdateAck)
}
TopNUpdateAck::TopNUpdateAck(const TopNUpdateAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ss_proto.TopNUpdateAck)
}

void TopNUpdateAck::SharedCtor() {
}

TopNUpdateAck::~TopNUpdateAck() {
  // @@protoc_insertion_point(destructor:ss_proto.TopNUpdateAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TopNUpdateAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TopNUpdateAck::ArenaDtor(void* object) {
  TopNUpdateAck* _this = reinterpret_cast< TopNUpdateAck* >(object);
  (void)_this;
}
void TopNUpdateAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TopNUpdateAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopNUpdateAck& TopNUpdateAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopNUpdateAck_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void TopNUpdateAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.TopNUpdateAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopNUpdateAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopNUpdateAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.TopNUpdateAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.TopNUpdateAck)
  return target;
}

size_t TopNUpdateAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.TopNUpdateAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopNUpdateAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.TopNUpdateAck)
  GOOGLE_DCHECK_NE(&from, this);
  const TopNUpdateAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopNUpdateAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.TopNUpdateAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.TopNUpdateAck)
    MergeFrom(*source);
  }
}

void TopNUpdateAck::MergeFrom(const TopNUpdateAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.TopNUpdateAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TopNUpdateAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.TopNUpdateAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopNUpdateAck::CopyFrom(const TopNUpdateAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.TopNUpdateAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopNUpdateAck::IsInitialized() const {
  return true;
}

void TopNUpdateAck::InternalSwap(TopNUpdateAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopNUpdateAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TopNListReq::InitAsDefaultInstance() {
}
class TopNListReq::_Internal {
 public:
};

TopNListReq::TopNListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.TopNListReq)
}
TopNListReq::TopNListReq(const TopNListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  ::memcpy(&worldid_, &from.worldid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tnt_) -
    reinterpret_cast<char*>(&worldid_)) + sizeof(tnt_));
  // @@protoc_insertion_point(copy_constructor:ss_proto.TopNListReq)
}

void TopNListReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TopNListReq_ss_5fproto_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&worldid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tnt_) -
      reinterpret_cast<char*>(&worldid_)) + sizeof(tnt_));
}

TopNListReq::~TopNListReq() {
  // @@protoc_insertion_point(destructor:ss_proto.TopNListReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TopNListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TopNListReq::ArenaDtor(void* object) {
  TopNListReq* _this = reinterpret_cast< TopNListReq* >(object);
  (void)_this;
}
void TopNListReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TopNListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopNListReq& TopNListReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopNListReq_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void TopNListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.TopNListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&worldid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tnt_) -
      reinterpret_cast<char*>(&worldid_)) + sizeof(tnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopNListReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 worldId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopNListReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.TopNListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 worldId = 1;
  if (this->worldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_worldid(), target);
  }

  // int32 tnt = 2;
  if (this->tnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tnt(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.TopNListReq)
  return target;
}

size_t TopNListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.TopNListReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int64 worldId = 1;
  if (this->worldid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_worldid());
  }

  // int32 tnt = 2;
  if (this->tnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tnt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopNListReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.TopNListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TopNListReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopNListReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.TopNListReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.TopNListReq)
    MergeFrom(*source);
  }
}

void TopNListReq::MergeFrom(const TopNListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.TopNListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.worldid() != 0) {
    _internal_set_worldid(from._internal_worldid());
  }
  if (from.tnt() != 0) {
    _internal_set_tnt(from._internal_tnt());
  }
}

void TopNListReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.TopNListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopNListReq::CopyFrom(const TopNListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.TopNListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopNListReq::IsInitialized() const {
  return true;
}

void TopNListReq::InternalSwap(TopNListReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TopNListReq, tnt_)
      + sizeof(TopNListReq::tnt_)
      - PROTOBUF_FIELD_OFFSET(TopNListReq, worldid_)>(
          reinterpret_cast<char*>(&worldid_),
          reinterpret_cast<char*>(&other->worldid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TopNListReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TopNListAck::InitAsDefaultInstance() {
}
class TopNListAck::_Internal {
 public:
};

TopNListAck::TopNListAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.TopNListAck)
}
TopNListAck::TopNListAck(const TopNListAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  topn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_topn().empty()) {
    topn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_topn(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ss_proto.TopNListAck)
}

void TopNListAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TopNListAck_ss_5fproto_2eproto.base);
  topn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TopNListAck::~TopNListAck() {
  // @@protoc_insertion_point(destructor:ss_proto.TopNListAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TopNListAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  topn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TopNListAck::ArenaDtor(void* object) {
  TopNListAck* _this = reinterpret_cast< TopNListAck* >(object);
  (void)_this;
}
void TopNListAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TopNListAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopNListAck& TopNListAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopNListAck_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void TopNListAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.TopNListAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopNListAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes topn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_topn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopNListAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.TopNListAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes topn = 1;
  if (this->topn().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_topn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.TopNListAck)
  return target;
}

size_t TopNListAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.TopNListAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes topn = 1;
  if (this->topn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_topn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopNListAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.TopNListAck)
  GOOGLE_DCHECK_NE(&from, this);
  const TopNListAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopNListAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.TopNListAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.TopNListAck)
    MergeFrom(*source);
  }
}

void TopNListAck::MergeFrom(const TopNListAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.TopNListAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topn().size() > 0) {
    _internal_set_topn(from._internal_topn());
  }
}

void TopNListAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.TopNListAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopNListAck::CopyFrom(const TopNListAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.TopNListAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopNListAck::IsInitialized() const {
  return true;
}

void TopNListAck::InternalSwap(TopNListAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  topn_.Swap(&other->topn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TopNListAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SceneUpdateReq::InitAsDefaultInstance() {
}
class SceneUpdateReq::_Internal {
 public:
};

SceneUpdateReq::SceneUpdateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.SceneUpdateReq)
}
SceneUpdateReq::SceneUpdateReq(const SceneUpdateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  topn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_topn().empty()) {
    topn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_topn(),
      GetArena());
  }
  ::memcpy(&worldid_, &from.worldid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nlevel_) -
    reinterpret_cast<char*>(&worldid_)) + sizeof(nlevel_));
  // @@protoc_insertion_point(copy_constructor:ss_proto.SceneUpdateReq)
}

void SceneUpdateReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SceneUpdateReq_ss_5fproto_2eproto.base);
  topn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&worldid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nlevel_) -
      reinterpret_cast<char*>(&worldid_)) + sizeof(nlevel_));
}

SceneUpdateReq::~SceneUpdateReq() {
  // @@protoc_insertion_point(destructor:ss_proto.SceneUpdateReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SceneUpdateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  topn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SceneUpdateReq::ArenaDtor(void* object) {
  SceneUpdateReq* _this = reinterpret_cast< SceneUpdateReq* >(object);
  (void)_this;
}
void SceneUpdateReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SceneUpdateReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SceneUpdateReq& SceneUpdateReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SceneUpdateReq_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void SceneUpdateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.SceneUpdateReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&worldid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nlevel_) -
      reinterpret_cast<char*>(&worldid_)) + sizeof(nlevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneUpdateReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 worldId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 olevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          olevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nlevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          nlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes topn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_topn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SceneUpdateReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.SceneUpdateReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 worldId = 1;
  if (this->worldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_worldid(), target);
  }

  // int32 olevel = 2;
  if (this->olevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_olevel(), target);
  }

  // int32 nlevel = 3;
  if (this->nlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_nlevel(), target);
  }

  // bytes topn = 4;
  if (this->topn().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_topn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.SceneUpdateReq)
  return target;
}

size_t SceneUpdateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.SceneUpdateReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes topn = 4;
  if (this->topn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_topn());
  }

  // int64 worldId = 1;
  if (this->worldid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_worldid());
  }

  // int32 olevel = 2;
  if (this->olevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_olevel());
  }

  // int32 nlevel = 3;
  if (this->nlevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nlevel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SceneUpdateReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.SceneUpdateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneUpdateReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SceneUpdateReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.SceneUpdateReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.SceneUpdateReq)
    MergeFrom(*source);
  }
}

void SceneUpdateReq::MergeFrom(const SceneUpdateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.SceneUpdateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topn().size() > 0) {
    _internal_set_topn(from._internal_topn());
  }
  if (from.worldid() != 0) {
    _internal_set_worldid(from._internal_worldid());
  }
  if (from.olevel() != 0) {
    _internal_set_olevel(from._internal_olevel());
  }
  if (from.nlevel() != 0) {
    _internal_set_nlevel(from._internal_nlevel());
  }
}

void SceneUpdateReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.SceneUpdateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneUpdateReq::CopyFrom(const SceneUpdateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.SceneUpdateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneUpdateReq::IsInitialized() const {
  return true;
}

void SceneUpdateReq::InternalSwap(SceneUpdateReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  topn_.Swap(&other->topn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneUpdateReq, nlevel_)
      + sizeof(SceneUpdateReq::nlevel_)
      - PROTOBUF_FIELD_OFFSET(SceneUpdateReq, worldid_)>(
          reinterpret_cast<char*>(&worldid_),
          reinterpret_cast<char*>(&other->worldid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneUpdateReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SceneUpdateAck::InitAsDefaultInstance() {
}
class SceneUpdateAck::_Internal {
 public:
};

SceneUpdateAck::SceneUpdateAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.SceneUpdateAck)
}
SceneUpdateAck::SceneUpdateAck(const SceneUpdateAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ss_proto.SceneUpdateAck)
}

void SceneUpdateAck::SharedCtor() {
}

SceneUpdateAck::~SceneUpdateAck() {
  // @@protoc_insertion_point(destructor:ss_proto.SceneUpdateAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SceneUpdateAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SceneUpdateAck::ArenaDtor(void* object) {
  SceneUpdateAck* _this = reinterpret_cast< SceneUpdateAck* >(object);
  (void)_this;
}
void SceneUpdateAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SceneUpdateAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SceneUpdateAck& SceneUpdateAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SceneUpdateAck_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void SceneUpdateAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.SceneUpdateAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneUpdateAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SceneUpdateAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.SceneUpdateAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.SceneUpdateAck)
  return target;
}

size_t SceneUpdateAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.SceneUpdateAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SceneUpdateAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.SceneUpdateAck)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneUpdateAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SceneUpdateAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.SceneUpdateAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.SceneUpdateAck)
    MergeFrom(*source);
  }
}

void SceneUpdateAck::MergeFrom(const SceneUpdateAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.SceneUpdateAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SceneUpdateAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.SceneUpdateAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneUpdateAck::CopyFrom(const SceneUpdateAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.SceneUpdateAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneUpdateAck::IsInitialized() const {
  return true;
}

void SceneUpdateAck::InternalSwap(SceneUpdateAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneUpdateAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SceneProcReq::InitAsDefaultInstance() {
}
class SceneProcReq::_Internal {
 public:
};

SceneProcReq::SceneProcReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.SceneProcReq)
}
SceneProcReq::SceneProcReq(const SceneProcReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&worldid_, &from.worldid_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&worldid_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:ss_proto.SceneProcReq)
}

void SceneProcReq::SharedCtor() {
  ::memset(&worldid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&worldid_)) + sizeof(level_));
}

SceneProcReq::~SceneProcReq() {
  // @@protoc_insertion_point(destructor:ss_proto.SceneProcReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SceneProcReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SceneProcReq::ArenaDtor(void* object) {
  SceneProcReq* _this = reinterpret_cast< SceneProcReq* >(object);
  (void)_this;
}
void SceneProcReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SceneProcReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SceneProcReq& SceneProcReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SceneProcReq_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void SceneProcReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.SceneProcReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&worldid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&worldid_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneProcReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 worldId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SceneProcReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.SceneProcReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 worldId = 1;
  if (this->worldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_worldid(), target);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.SceneProcReq)
  return target;
}

size_t SceneProcReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.SceneProcReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 worldId = 1;
  if (this->worldid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_worldid());
  }

  // int32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SceneProcReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.SceneProcReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneProcReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SceneProcReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.SceneProcReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.SceneProcReq)
    MergeFrom(*source);
  }
}

void SceneProcReq::MergeFrom(const SceneProcReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.SceneProcReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.worldid() != 0) {
    _internal_set_worldid(from._internal_worldid());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void SceneProcReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.SceneProcReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneProcReq::CopyFrom(const SceneProcReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.SceneProcReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneProcReq::IsInitialized() const {
  return true;
}

void SceneProcReq::InternalSwap(SceneProcReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneProcReq, level_)
      + sizeof(SceneProcReq::level_)
      - PROTOBUF_FIELD_OFFSET(SceneProcReq, worldid_)>(
          reinterpret_cast<char*>(&worldid_),
          reinterpret_cast<char*>(&other->worldid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneProcReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SceneProcAck::InitAsDefaultInstance() {
}
class SceneProcAck::_Internal {
 public:
};

SceneProcAck::SceneProcAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.SceneProcAck)
}
SceneProcAck::SceneProcAck(const SceneProcAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  topn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_topn().empty()) {
    topn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_topn(),
      GetArena());
  }
  proc_ = from.proc_;
  // @@protoc_insertion_point(copy_constructor:ss_proto.SceneProcAck)
}

void SceneProcAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SceneProcAck_ss_5fproto_2eproto.base);
  topn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proc_ = 0;
}

SceneProcAck::~SceneProcAck() {
  // @@protoc_insertion_point(destructor:ss_proto.SceneProcAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SceneProcAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  topn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SceneProcAck::ArenaDtor(void* object) {
  SceneProcAck* _this = reinterpret_cast< SceneProcAck* >(object);
  (void)_this;
}
void SceneProcAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SceneProcAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SceneProcAck& SceneProcAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SceneProcAck_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void SceneProcAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.SceneProcAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proc_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneProcAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float proc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          proc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bytes topn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_topn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SceneProcAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.SceneProcAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float proc = 1;
  if (!(this->proc() <= 0 && this->proc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_proc(), target);
  }

  // bytes topn = 2;
  if (this->topn().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_topn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.SceneProcAck)
  return target;
}

size_t SceneProcAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.SceneProcAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes topn = 2;
  if (this->topn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_topn());
  }

  // float proc = 1;
  if (!(this->proc() <= 0 && this->proc() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SceneProcAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.SceneProcAck)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneProcAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SceneProcAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.SceneProcAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.SceneProcAck)
    MergeFrom(*source);
  }
}

void SceneProcAck::MergeFrom(const SceneProcAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.SceneProcAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topn().size() > 0) {
    _internal_set_topn(from._internal_topn());
  }
  if (!(from.proc() <= 0 && from.proc() >= 0)) {
    _internal_set_proc(from._internal_proc());
  }
}

void SceneProcAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.SceneProcAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneProcAck::CopyFrom(const SceneProcAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.SceneProcAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneProcAck::IsInitialized() const {
  return true;
}

void SceneProcAck::InternalSwap(SceneProcAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  topn_.Swap(&other->topn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(proc_, other->proc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneProcAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginSwtichReq::InitAsDefaultInstance() {
}
class LoginSwtichReq::_Internal {
 public:
};

LoginSwtichReq::LoginSwtichReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.LoginSwtichReq)
}
LoginSwtichReq::LoginSwtichReq(const LoginSwtichReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ptid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ptid().empty()) {
    ptid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ptid(),
      GetArena());
  }
  pttype_ = from.pttype_;
  // @@protoc_insertion_point(copy_constructor:ss_proto.LoginSwtichReq)
}

void LoginSwtichReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginSwtichReq_ss_5fproto_2eproto.base);
  ptid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pttype_ = 0;
}

LoginSwtichReq::~LoginSwtichReq() {
  // @@protoc_insertion_point(destructor:ss_proto.LoginSwtichReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginSwtichReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ptid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginSwtichReq::ArenaDtor(void* object) {
  LoginSwtichReq* _this = reinterpret_cast< LoginSwtichReq* >(object);
  (void)_this;
}
void LoginSwtichReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginSwtichReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginSwtichReq& LoginSwtichReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginSwtichReq_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void LoginSwtichReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.LoginSwtichReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ptid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pttype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginSwtichReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ptId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ptid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ss_proto.LoginSwtichReq.ptId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ptType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginSwtichReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.LoginSwtichReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ptId = 1;
  if (this->ptid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ptid().data(), static_cast<int>(this->_internal_ptid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ss_proto.LoginSwtichReq.ptId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ptid(), target);
  }

  // int32 ptType = 2;
  if (this->pttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pttype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.LoginSwtichReq)
  return target;
}

size_t LoginSwtichReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.LoginSwtichReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ptId = 1;
  if (this->ptid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ptid());
  }

  // int32 ptType = 2;
  if (this->pttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pttype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginSwtichReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.LoginSwtichReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginSwtichReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginSwtichReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.LoginSwtichReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.LoginSwtichReq)
    MergeFrom(*source);
  }
}

void LoginSwtichReq::MergeFrom(const LoginSwtichReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.LoginSwtichReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ptid().size() > 0) {
    _internal_set_ptid(from._internal_ptid());
  }
  if (from.pttype() != 0) {
    _internal_set_pttype(from._internal_pttype());
  }
}

void LoginSwtichReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.LoginSwtichReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginSwtichReq::CopyFrom(const LoginSwtichReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.LoginSwtichReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginSwtichReq::IsInitialized() const {
  return true;
}

void LoginSwtichReq::InternalSwap(LoginSwtichReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ptid_.Swap(&other->ptid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pttype_, other->pttype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginSwtichReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginSwtichAck::InitAsDefaultInstance() {
}
class LoginSwtichAck::_Internal {
 public:
};

LoginSwtichAck::LoginSwtichAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.LoginSwtichAck)
}
LoginSwtichAck::LoginSwtichAck(const LoginSwtichAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ss_proto.LoginSwtichAck)
}

void LoginSwtichAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginSwtichAck_ss_5fproto_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LoginSwtichAck::~LoginSwtichAck() {
  // @@protoc_insertion_point(destructor:ss_proto.LoginSwtichAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginSwtichAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginSwtichAck::ArenaDtor(void* object) {
  LoginSwtichAck* _this = reinterpret_cast< LoginSwtichAck* >(object);
  (void)_this;
}
void LoginSwtichAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginSwtichAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginSwtichAck& LoginSwtichAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginSwtichAck_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void LoginSwtichAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.LoginSwtichAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginSwtichAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ss_proto.LoginSwtichAck.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginSwtichAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.LoginSwtichAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ss_proto.LoginSwtichAck.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.LoginSwtichAck)
  return target;
}

size_t LoginSwtichAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.LoginSwtichAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginSwtichAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.LoginSwtichAck)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginSwtichAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginSwtichAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.LoginSwtichAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.LoginSwtichAck)
    MergeFrom(*source);
  }
}

void LoginSwtichAck::MergeFrom(const LoginSwtichAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.LoginSwtichAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
}

void LoginSwtichAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.LoginSwtichAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginSwtichAck::CopyFrom(const LoginSwtichAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.LoginSwtichAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginSwtichAck::IsInitialized() const {
  return true;
}

void LoginSwtichAck::InternalSwap(LoginSwtichAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginSwtichAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadInteractionReq::InitAsDefaultInstance() {
}
class LoadInteractionReq::_Internal {
 public:
};

LoadInteractionReq::LoadInteractionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.LoadInteractionReq)
}
LoadInteractionReq::LoadInteractionReq(const LoadInteractionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roleid_ = from.roleid_;
  // @@protoc_insertion_point(copy_constructor:ss_proto.LoadInteractionReq)
}

void LoadInteractionReq::SharedCtor() {
  roleid_ = PROTOBUF_LONGLONG(0);
}

LoadInteractionReq::~LoadInteractionReq() {
  // @@protoc_insertion_point(destructor:ss_proto.LoadInteractionReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadInteractionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoadInteractionReq::ArenaDtor(void* object) {
  LoadInteractionReq* _this = reinterpret_cast< LoadInteractionReq* >(object);
  (void)_this;
}
void LoadInteractionReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadInteractionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadInteractionReq& LoadInteractionReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadInteractionReq_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void LoadInteractionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.LoadInteractionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roleid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadInteractionReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 roleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadInteractionReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.LoadInteractionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_roleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.LoadInteractionReq)
  return target;
}

size_t LoadInteractionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.LoadInteractionReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_roleid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadInteractionReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.LoadInteractionReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadInteractionReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadInteractionReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.LoadInteractionReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.LoadInteractionReq)
    MergeFrom(*source);
  }
}

void LoadInteractionReq::MergeFrom(const LoadInteractionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.LoadInteractionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
}

void LoadInteractionReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.LoadInteractionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadInteractionReq::CopyFrom(const LoadInteractionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.LoadInteractionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadInteractionReq::IsInitialized() const {
  return true;
}

void LoadInteractionReq::InternalSwap(LoadInteractionReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(roleid_, other->roleid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadInteractionReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadInteractionAck::InitAsDefaultInstance() {
}
class LoadInteractionAck::_Internal {
 public:
};

LoadInteractionAck::LoadInteractionAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.LoadInteractionAck)
}
LoadInteractionAck::LoadInteractionAck(const LoadInteractionAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  interactiondata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interactiondata().empty()) {
    interactiondata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_interactiondata(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ss_proto.LoadInteractionAck)
}

void LoadInteractionAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadInteractionAck_ss_5fproto_2eproto.base);
  interactiondata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LoadInteractionAck::~LoadInteractionAck() {
  // @@protoc_insertion_point(destructor:ss_proto.LoadInteractionAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadInteractionAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  interactiondata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoadInteractionAck::ArenaDtor(void* object) {
  LoadInteractionAck* _this = reinterpret_cast< LoadInteractionAck* >(object);
  (void)_this;
}
void LoadInteractionAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadInteractionAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadInteractionAck& LoadInteractionAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadInteractionAck_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void LoadInteractionAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.LoadInteractionAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interactiondata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadInteractionAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes interactionData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_interactiondata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadInteractionAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.LoadInteractionAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes interactionData = 1;
  if (this->interactiondata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_interactiondata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.LoadInteractionAck)
  return target;
}

size_t LoadInteractionAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.LoadInteractionAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes interactionData = 1;
  if (this->interactiondata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_interactiondata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadInteractionAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.LoadInteractionAck)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadInteractionAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadInteractionAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.LoadInteractionAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.LoadInteractionAck)
    MergeFrom(*source);
  }
}

void LoadInteractionAck::MergeFrom(const LoadInteractionAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.LoadInteractionAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interactiondata().size() > 0) {
    _internal_set_interactiondata(from._internal_interactiondata());
  }
}

void LoadInteractionAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.LoadInteractionAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadInteractionAck::CopyFrom(const LoadInteractionAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.LoadInteractionAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadInteractionAck::IsInitialized() const {
  return true;
}

void LoadInteractionAck::InternalSwap(LoadInteractionAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  interactiondata_.Swap(&other->interactiondata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadInteractionAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommonMessage::InitAsDefaultInstance() {
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->adddbntf_ = const_cast< ::ss_proto::AddDBNtf*>(
      ::ss_proto::AddDBNtf::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->servercmd_ = const_cast< ::ss_proto::ServerCmd*>(
      ::ss_proto::ServerCmd::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->newmailntf_ = const_cast< ::ss_proto::NewMailNtf*>(
      ::ss_proto::NewMailNtf::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->serverreport_ = const_cast< ::ss_proto::ServerReport*>(
      ::ss_proto::ServerReport::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->servercastntf_ = const_cast< ::ss_proto::ServerCastNtf*>(
      ::ss_proto::ServerCastNtf::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->topnupdatereq_ = const_cast< ::ss_proto::TopNUpdateReq*>(
      ::ss_proto::TopNUpdateReq::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->topnupdateack_ = const_cast< ::ss_proto::TopNUpdateAck*>(
      ::ss_proto::TopNUpdateAck::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->topnlistreq_ = const_cast< ::ss_proto::TopNListReq*>(
      ::ss_proto::TopNListReq::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->topnlistack_ = const_cast< ::ss_proto::TopNListAck*>(
      ::ss_proto::TopNListAck::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->userloginreq_ = const_cast< ::ss_proto::UserLoginReq*>(
      ::ss_proto::UserLoginReq::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->userloginack_ = const_cast< ::ss_proto::UserLoginAck*>(
      ::ss_proto::UserLoginAck::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->loginworldreq_ = const_cast< ::ss_proto::LoginWorldReq*>(
      ::ss_proto::LoginWorldReq::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->loginworldack_ = const_cast< ::ss_proto::LoginWorldAck*>(
      ::ss_proto::LoginWorldAck::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->logingamereq_ = const_cast< ::ss_proto::LoginGameReq*>(
      ::ss_proto::LoginGameReq::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->logingameack_ = const_cast< ::ss_proto::LoginGameAck*>(
      ::ss_proto::LoginGameAck::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->logoutgamereq_ = const_cast< ::ss_proto::LogoutGameReq*>(
      ::ss_proto::LogoutGameReq::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->logoutgameack_ = const_cast< ::ss_proto::LogoutGameAck*>(
      ::ss_proto::LogoutGameAck::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->createrolereq_ = const_cast< ::ss_proto::CreateRoleReq*>(
      ::ss_proto::CreateRoleReq::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->createroleack_ = const_cast< ::ss_proto::CreateRoleAck*>(
      ::ss_proto::CreateRoleAck::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->saverolereq_ = const_cast< ::ss_proto::SaveRoleReq*>(
      ::ss_proto::SaveRoleReq::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->saveroleack_ = const_cast< ::ss_proto::SaveRoleAck*>(
      ::ss_proto::SaveRoleAck::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->kickuserntf_ = const_cast< ::ss_proto::KickUserNtf*>(
      ::ss_proto::KickUserNtf::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->syncrolentf_ = const_cast< ::ss_proto::SyncRoleNtf*>(
      ::ss_proto::SyncRoleNtf::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->searchbossreq_ = const_cast< ::ss_proto::SearchBossReq*>(
      ::ss_proto::SearchBossReq::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->searchbossack_ = const_cast< ::ss_proto::SearchBossAck*>(
      ::ss_proto::SearchBossAck::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->logdatareq_ = const_cast< ::ss_proto::LogDataReq*>(
      ::ss_proto::LogDataReq::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->logdataack_ = const_cast< ::ss_proto::LogDataAck*>(
      ::ss_proto::LogDataAck::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->loadroleskillreq_ = const_cast< ::ss_proto::LoadRoleSkillReq*>(
      ::ss_proto::LoadRoleSkillReq::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->loadroleskillack_ = const_cast< ::ss_proto::LoadRoleSkillAck*>(
      ::ss_proto::LoadRoleSkillAck::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->loadrolepackagereq_ = const_cast< ::ss_proto::LoadRolePackageReq*>(
      ::ss_proto::LoadRolePackageReq::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->loadrolepackageack_ = const_cast< ::ss_proto::LoadRolePackageAck*>(
      ::ss_proto::LoadRolePackageAck::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->friendaddreq_ = const_cast< ::ss_proto::FriendAddReq*>(
      ::ss_proto::FriendAddReq::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->friendaddack_ = const_cast< ::ss_proto::FriendAddAck*>(
      ::ss_proto::FriendAddAck::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->frienddelreq_ = const_cast< ::ss_proto::FriendDelReq*>(
      ::ss_proto::FriendDelReq::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->frienddelack_ = const_cast< ::ss_proto::FriendDelAck*>(
      ::ss_proto::FriendDelAck::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->friendlistreq_ = const_cast< ::ss_proto::FriendListReq*>(
      ::ss_proto::FriendListReq::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->friendlistack_ = const_cast< ::ss_proto::FriendListAck*>(
      ::ss_proto::FriendListAck::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->roleboardreq_ = const_cast< ::ss_proto::RoleBoardReq*>(
      ::ss_proto::RoleBoardReq::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->roleboardack_ = const_cast< ::ss_proto::RoleBoardAck*>(
      ::ss_proto::RoleBoardAck::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->sceneupdatereq_ = const_cast< ::ss_proto::SceneUpdateReq*>(
      ::ss_proto::SceneUpdateReq::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->sceneupdateack_ = const_cast< ::ss_proto::SceneUpdateAck*>(
      ::ss_proto::SceneUpdateAck::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->sceneprocreq_ = const_cast< ::ss_proto::SceneProcReq*>(
      ::ss_proto::SceneProcReq::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->sceneprocack_ = const_cast< ::ss_proto::SceneProcAck*>(
      ::ss_proto::SceneProcAck::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->loginswtichreq_ = const_cast< ::ss_proto::LoginSwtichReq*>(
      ::ss_proto::LoginSwtichReq::internal_default_instance());
  ::ss_proto::_CommonMessage_default_instance_._instance.get_mutable()->loginswtichack_ = const_cast< ::ss_proto::LoginSwtichAck*>(
      ::ss_proto::LoginSwtichAck::internal_default_instance());
}
class CommonMessage::_Internal {
 public:
  static const ::ss_proto::AddDBNtf& adddbntf(const CommonMessage* msg);
  static const ::ss_proto::ServerCmd& servercmd(const CommonMessage* msg);
  static const ::ss_proto::NewMailNtf& newmailntf(const CommonMessage* msg);
  static const ::ss_proto::ServerReport& serverreport(const CommonMessage* msg);
  static const ::ss_proto::ServerCastNtf& servercastntf(const CommonMessage* msg);
  static const ::ss_proto::TopNUpdateReq& topnupdatereq(const CommonMessage* msg);
  static const ::ss_proto::TopNUpdateAck& topnupdateack(const CommonMessage* msg);
  static const ::ss_proto::TopNListReq& topnlistreq(const CommonMessage* msg);
  static const ::ss_proto::TopNListAck& topnlistack(const CommonMessage* msg);
  static const ::ss_proto::UserLoginReq& userloginreq(const CommonMessage* msg);
  static const ::ss_proto::UserLoginAck& userloginack(const CommonMessage* msg);
  static const ::ss_proto::LoginWorldReq& loginworldreq(const CommonMessage* msg);
  static const ::ss_proto::LoginWorldAck& loginworldack(const CommonMessage* msg);
  static const ::ss_proto::LoginGameReq& logingamereq(const CommonMessage* msg);
  static const ::ss_proto::LoginGameAck& logingameack(const CommonMessage* msg);
  static const ::ss_proto::LogoutGameReq& logoutgamereq(const CommonMessage* msg);
  static const ::ss_proto::LogoutGameAck& logoutgameack(const CommonMessage* msg);
  static const ::ss_proto::CreateRoleReq& createrolereq(const CommonMessage* msg);
  static const ::ss_proto::CreateRoleAck& createroleack(const CommonMessage* msg);
  static const ::ss_proto::SaveRoleReq& saverolereq(const CommonMessage* msg);
  static const ::ss_proto::SaveRoleAck& saveroleack(const CommonMessage* msg);
  static const ::ss_proto::KickUserNtf& kickuserntf(const CommonMessage* msg);
  static const ::ss_proto::SyncRoleNtf& syncrolentf(const CommonMessage* msg);
  static const ::ss_proto::SearchBossReq& searchbossreq(const CommonMessage* msg);
  static const ::ss_proto::SearchBossAck& searchbossack(const CommonMessage* msg);
  static const ::ss_proto::LogDataReq& logdatareq(const CommonMessage* msg);
  static const ::ss_proto::LogDataAck& logdataack(const CommonMessage* msg);
  static const ::ss_proto::LoadRoleSkillReq& loadroleskillreq(const CommonMessage* msg);
  static const ::ss_proto::LoadRoleSkillAck& loadroleskillack(const CommonMessage* msg);
  static const ::ss_proto::LoadRolePackageReq& loadrolepackagereq(const CommonMessage* msg);
  static const ::ss_proto::LoadRolePackageAck& loadrolepackageack(const CommonMessage* msg);
  static const ::ss_proto::FriendAddReq& friendaddreq(const CommonMessage* msg);
  static const ::ss_proto::FriendAddAck& friendaddack(const CommonMessage* msg);
  static const ::ss_proto::FriendDelReq& frienddelreq(const CommonMessage* msg);
  static const ::ss_proto::FriendDelAck& frienddelack(const CommonMessage* msg);
  static const ::ss_proto::FriendListReq& friendlistreq(const CommonMessage* msg);
  static const ::ss_proto::FriendListAck& friendlistack(const CommonMessage* msg);
  static const ::ss_proto::RoleBoardReq& roleboardreq(const CommonMessage* msg);
  static const ::ss_proto::RoleBoardAck& roleboardack(const CommonMessage* msg);
  static const ::ss_proto::SceneUpdateReq& sceneupdatereq(const CommonMessage* msg);
  static const ::ss_proto::SceneUpdateAck& sceneupdateack(const CommonMessage* msg);
  static const ::ss_proto::SceneProcReq& sceneprocreq(const CommonMessage* msg);
  static const ::ss_proto::SceneProcAck& sceneprocack(const CommonMessage* msg);
  static const ::ss_proto::LoginSwtichReq& loginswtichreq(const CommonMessage* msg);
  static const ::ss_proto::LoginSwtichAck& loginswtichack(const CommonMessage* msg);
};

const ::ss_proto::AddDBNtf&
CommonMessage::_Internal::adddbntf(const CommonMessage* msg) {
  return *msg->adddbntf_;
}
const ::ss_proto::ServerCmd&
CommonMessage::_Internal::servercmd(const CommonMessage* msg) {
  return *msg->servercmd_;
}
const ::ss_proto::NewMailNtf&
CommonMessage::_Internal::newmailntf(const CommonMessage* msg) {
  return *msg->newmailntf_;
}
const ::ss_proto::ServerReport&
CommonMessage::_Internal::serverreport(const CommonMessage* msg) {
  return *msg->serverreport_;
}
const ::ss_proto::ServerCastNtf&
CommonMessage::_Internal::servercastntf(const CommonMessage* msg) {
  return *msg->servercastntf_;
}
const ::ss_proto::TopNUpdateReq&
CommonMessage::_Internal::topnupdatereq(const CommonMessage* msg) {
  return *msg->topnupdatereq_;
}
const ::ss_proto::TopNUpdateAck&
CommonMessage::_Internal::topnupdateack(const CommonMessage* msg) {
  return *msg->topnupdateack_;
}
const ::ss_proto::TopNListReq&
CommonMessage::_Internal::topnlistreq(const CommonMessage* msg) {
  return *msg->topnlistreq_;
}
const ::ss_proto::TopNListAck&
CommonMessage::_Internal::topnlistack(const CommonMessage* msg) {
  return *msg->topnlistack_;
}
const ::ss_proto::UserLoginReq&
CommonMessage::_Internal::userloginreq(const CommonMessage* msg) {
  return *msg->userloginreq_;
}
const ::ss_proto::UserLoginAck&
CommonMessage::_Internal::userloginack(const CommonMessage* msg) {
  return *msg->userloginack_;
}
const ::ss_proto::LoginWorldReq&
CommonMessage::_Internal::loginworldreq(const CommonMessage* msg) {
  return *msg->loginworldreq_;
}
const ::ss_proto::LoginWorldAck&
CommonMessage::_Internal::loginworldack(const CommonMessage* msg) {
  return *msg->loginworldack_;
}
const ::ss_proto::LoginGameReq&
CommonMessage::_Internal::logingamereq(const CommonMessage* msg) {
  return *msg->logingamereq_;
}
const ::ss_proto::LoginGameAck&
CommonMessage::_Internal::logingameack(const CommonMessage* msg) {
  return *msg->logingameack_;
}
const ::ss_proto::LogoutGameReq&
CommonMessage::_Internal::logoutgamereq(const CommonMessage* msg) {
  return *msg->logoutgamereq_;
}
const ::ss_proto::LogoutGameAck&
CommonMessage::_Internal::logoutgameack(const CommonMessage* msg) {
  return *msg->logoutgameack_;
}
const ::ss_proto::CreateRoleReq&
CommonMessage::_Internal::createrolereq(const CommonMessage* msg) {
  return *msg->createrolereq_;
}
const ::ss_proto::CreateRoleAck&
CommonMessage::_Internal::createroleack(const CommonMessage* msg) {
  return *msg->createroleack_;
}
const ::ss_proto::SaveRoleReq&
CommonMessage::_Internal::saverolereq(const CommonMessage* msg) {
  return *msg->saverolereq_;
}
const ::ss_proto::SaveRoleAck&
CommonMessage::_Internal::saveroleack(const CommonMessage* msg) {
  return *msg->saveroleack_;
}
const ::ss_proto::KickUserNtf&
CommonMessage::_Internal::kickuserntf(const CommonMessage* msg) {
  return *msg->kickuserntf_;
}
const ::ss_proto::SyncRoleNtf&
CommonMessage::_Internal::syncrolentf(const CommonMessage* msg) {
  return *msg->syncrolentf_;
}
const ::ss_proto::SearchBossReq&
CommonMessage::_Internal::searchbossreq(const CommonMessage* msg) {
  return *msg->searchbossreq_;
}
const ::ss_proto::SearchBossAck&
CommonMessage::_Internal::searchbossack(const CommonMessage* msg) {
  return *msg->searchbossack_;
}
const ::ss_proto::LogDataReq&
CommonMessage::_Internal::logdatareq(const CommonMessage* msg) {
  return *msg->logdatareq_;
}
const ::ss_proto::LogDataAck&
CommonMessage::_Internal::logdataack(const CommonMessage* msg) {
  return *msg->logdataack_;
}
const ::ss_proto::LoadRoleSkillReq&
CommonMessage::_Internal::loadroleskillreq(const CommonMessage* msg) {
  return *msg->loadroleskillreq_;
}
const ::ss_proto::LoadRoleSkillAck&
CommonMessage::_Internal::loadroleskillack(const CommonMessage* msg) {
  return *msg->loadroleskillack_;
}
const ::ss_proto::LoadRolePackageReq&
CommonMessage::_Internal::loadrolepackagereq(const CommonMessage* msg) {
  return *msg->loadrolepackagereq_;
}
const ::ss_proto::LoadRolePackageAck&
CommonMessage::_Internal::loadrolepackageack(const CommonMessage* msg) {
  return *msg->loadrolepackageack_;
}
const ::ss_proto::FriendAddReq&
CommonMessage::_Internal::friendaddreq(const CommonMessage* msg) {
  return *msg->friendaddreq_;
}
const ::ss_proto::FriendAddAck&
CommonMessage::_Internal::friendaddack(const CommonMessage* msg) {
  return *msg->friendaddack_;
}
const ::ss_proto::FriendDelReq&
CommonMessage::_Internal::frienddelreq(const CommonMessage* msg) {
  return *msg->frienddelreq_;
}
const ::ss_proto::FriendDelAck&
CommonMessage::_Internal::frienddelack(const CommonMessage* msg) {
  return *msg->frienddelack_;
}
const ::ss_proto::FriendListReq&
CommonMessage::_Internal::friendlistreq(const CommonMessage* msg) {
  return *msg->friendlistreq_;
}
const ::ss_proto::FriendListAck&
CommonMessage::_Internal::friendlistack(const CommonMessage* msg) {
  return *msg->friendlistack_;
}
const ::ss_proto::RoleBoardReq&
CommonMessage::_Internal::roleboardreq(const CommonMessage* msg) {
  return *msg->roleboardreq_;
}
const ::ss_proto::RoleBoardAck&
CommonMessage::_Internal::roleboardack(const CommonMessage* msg) {
  return *msg->roleboardack_;
}
const ::ss_proto::SceneUpdateReq&
CommonMessage::_Internal::sceneupdatereq(const CommonMessage* msg) {
  return *msg->sceneupdatereq_;
}
const ::ss_proto::SceneUpdateAck&
CommonMessage::_Internal::sceneupdateack(const CommonMessage* msg) {
  return *msg->sceneupdateack_;
}
const ::ss_proto::SceneProcReq&
CommonMessage::_Internal::sceneprocreq(const CommonMessage* msg) {
  return *msg->sceneprocreq_;
}
const ::ss_proto::SceneProcAck&
CommonMessage::_Internal::sceneprocack(const CommonMessage* msg) {
  return *msg->sceneprocack_;
}
const ::ss_proto::LoginSwtichReq&
CommonMessage::_Internal::loginswtichreq(const CommonMessage* msg) {
  return *msg->loginswtichreq_;
}
const ::ss_proto::LoginSwtichAck&
CommonMessage::_Internal::loginswtichack(const CommonMessage* msg) {
  return *msg->loginswtichack_;
}
CommonMessage::CommonMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ss_proto.CommonMessage)
}
CommonMessage::CommonMessage(const CommonMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_adddbntf()) {
    adddbntf_ = new ::ss_proto::AddDBNtf(*from.adddbntf_);
  } else {
    adddbntf_ = nullptr;
  }
  if (from._internal_has_servercmd()) {
    servercmd_ = new ::ss_proto::ServerCmd(*from.servercmd_);
  } else {
    servercmd_ = nullptr;
  }
  if (from._internal_has_newmailntf()) {
    newmailntf_ = new ::ss_proto::NewMailNtf(*from.newmailntf_);
  } else {
    newmailntf_ = nullptr;
  }
  if (from._internal_has_serverreport()) {
    serverreport_ = new ::ss_proto::ServerReport(*from.serverreport_);
  } else {
    serverreport_ = nullptr;
  }
  if (from._internal_has_servercastntf()) {
    servercastntf_ = new ::ss_proto::ServerCastNtf(*from.servercastntf_);
  } else {
    servercastntf_ = nullptr;
  }
  if (from._internal_has_topnupdatereq()) {
    topnupdatereq_ = new ::ss_proto::TopNUpdateReq(*from.topnupdatereq_);
  } else {
    topnupdatereq_ = nullptr;
  }
  if (from._internal_has_topnupdateack()) {
    topnupdateack_ = new ::ss_proto::TopNUpdateAck(*from.topnupdateack_);
  } else {
    topnupdateack_ = nullptr;
  }
  if (from._internal_has_topnlistreq()) {
    topnlistreq_ = new ::ss_proto::TopNListReq(*from.topnlistreq_);
  } else {
    topnlistreq_ = nullptr;
  }
  if (from._internal_has_topnlistack()) {
    topnlistack_ = new ::ss_proto::TopNListAck(*from.topnlistack_);
  } else {
    topnlistack_ = nullptr;
  }
  if (from._internal_has_userloginreq()) {
    userloginreq_ = new ::ss_proto::UserLoginReq(*from.userloginreq_);
  } else {
    userloginreq_ = nullptr;
  }
  if (from._internal_has_userloginack()) {
    userloginack_ = new ::ss_proto::UserLoginAck(*from.userloginack_);
  } else {
    userloginack_ = nullptr;
  }
  if (from._internal_has_loginworldreq()) {
    loginworldreq_ = new ::ss_proto::LoginWorldReq(*from.loginworldreq_);
  } else {
    loginworldreq_ = nullptr;
  }
  if (from._internal_has_loginworldack()) {
    loginworldack_ = new ::ss_proto::LoginWorldAck(*from.loginworldack_);
  } else {
    loginworldack_ = nullptr;
  }
  if (from._internal_has_logingamereq()) {
    logingamereq_ = new ::ss_proto::LoginGameReq(*from.logingamereq_);
  } else {
    logingamereq_ = nullptr;
  }
  if (from._internal_has_logingameack()) {
    logingameack_ = new ::ss_proto::LoginGameAck(*from.logingameack_);
  } else {
    logingameack_ = nullptr;
  }
  if (from._internal_has_logoutgamereq()) {
    logoutgamereq_ = new ::ss_proto::LogoutGameReq(*from.logoutgamereq_);
  } else {
    logoutgamereq_ = nullptr;
  }
  if (from._internal_has_logoutgameack()) {
    logoutgameack_ = new ::ss_proto::LogoutGameAck(*from.logoutgameack_);
  } else {
    logoutgameack_ = nullptr;
  }
  if (from._internal_has_createrolereq()) {
    createrolereq_ = new ::ss_proto::CreateRoleReq(*from.createrolereq_);
  } else {
    createrolereq_ = nullptr;
  }
  if (from._internal_has_createroleack()) {
    createroleack_ = new ::ss_proto::CreateRoleAck(*from.createroleack_);
  } else {
    createroleack_ = nullptr;
  }
  if (from._internal_has_saverolereq()) {
    saverolereq_ = new ::ss_proto::SaveRoleReq(*from.saverolereq_);
  } else {
    saverolereq_ = nullptr;
  }
  if (from._internal_has_saveroleack()) {
    saveroleack_ = new ::ss_proto::SaveRoleAck(*from.saveroleack_);
  } else {
    saveroleack_ = nullptr;
  }
  if (from._internal_has_kickuserntf()) {
    kickuserntf_ = new ::ss_proto::KickUserNtf(*from.kickuserntf_);
  } else {
    kickuserntf_ = nullptr;
  }
  if (from._internal_has_syncrolentf()) {
    syncrolentf_ = new ::ss_proto::SyncRoleNtf(*from.syncrolentf_);
  } else {
    syncrolentf_ = nullptr;
  }
  if (from._internal_has_searchbossreq()) {
    searchbossreq_ = new ::ss_proto::SearchBossReq(*from.searchbossreq_);
  } else {
    searchbossreq_ = nullptr;
  }
  if (from._internal_has_searchbossack()) {
    searchbossack_ = new ::ss_proto::SearchBossAck(*from.searchbossack_);
  } else {
    searchbossack_ = nullptr;
  }
  if (from._internal_has_logdatareq()) {
    logdatareq_ = new ::ss_proto::LogDataReq(*from.logdatareq_);
  } else {
    logdatareq_ = nullptr;
  }
  if (from._internal_has_logdataack()) {
    logdataack_ = new ::ss_proto::LogDataAck(*from.logdataack_);
  } else {
    logdataack_ = nullptr;
  }
  if (from._internal_has_loadroleskillreq()) {
    loadroleskillreq_ = new ::ss_proto::LoadRoleSkillReq(*from.loadroleskillreq_);
  } else {
    loadroleskillreq_ = nullptr;
  }
  if (from._internal_has_loadroleskillack()) {
    loadroleskillack_ = new ::ss_proto::LoadRoleSkillAck(*from.loadroleskillack_);
  } else {
    loadroleskillack_ = nullptr;
  }
  if (from._internal_has_loadrolepackagereq()) {
    loadrolepackagereq_ = new ::ss_proto::LoadRolePackageReq(*from.loadrolepackagereq_);
  } else {
    loadrolepackagereq_ = nullptr;
  }
  if (from._internal_has_loadrolepackageack()) {
    loadrolepackageack_ = new ::ss_proto::LoadRolePackageAck(*from.loadrolepackageack_);
  } else {
    loadrolepackageack_ = nullptr;
  }
  if (from._internal_has_friendaddreq()) {
    friendaddreq_ = new ::ss_proto::FriendAddReq(*from.friendaddreq_);
  } else {
    friendaddreq_ = nullptr;
  }
  if (from._internal_has_friendaddack()) {
    friendaddack_ = new ::ss_proto::FriendAddAck(*from.friendaddack_);
  } else {
    friendaddack_ = nullptr;
  }
  if (from._internal_has_frienddelreq()) {
    frienddelreq_ = new ::ss_proto::FriendDelReq(*from.frienddelreq_);
  } else {
    frienddelreq_ = nullptr;
  }
  if (from._internal_has_frienddelack()) {
    frienddelack_ = new ::ss_proto::FriendDelAck(*from.frienddelack_);
  } else {
    frienddelack_ = nullptr;
  }
  if (from._internal_has_friendlistreq()) {
    friendlistreq_ = new ::ss_proto::FriendListReq(*from.friendlistreq_);
  } else {
    friendlistreq_ = nullptr;
  }
  if (from._internal_has_friendlistack()) {
    friendlistack_ = new ::ss_proto::FriendListAck(*from.friendlistack_);
  } else {
    friendlistack_ = nullptr;
  }
  if (from._internal_has_roleboardreq()) {
    roleboardreq_ = new ::ss_proto::RoleBoardReq(*from.roleboardreq_);
  } else {
    roleboardreq_ = nullptr;
  }
  if (from._internal_has_roleboardack()) {
    roleboardack_ = new ::ss_proto::RoleBoardAck(*from.roleboardack_);
  } else {
    roleboardack_ = nullptr;
  }
  if (from._internal_has_sceneupdatereq()) {
    sceneupdatereq_ = new ::ss_proto::SceneUpdateReq(*from.sceneupdatereq_);
  } else {
    sceneupdatereq_ = nullptr;
  }
  if (from._internal_has_sceneupdateack()) {
    sceneupdateack_ = new ::ss_proto::SceneUpdateAck(*from.sceneupdateack_);
  } else {
    sceneupdateack_ = nullptr;
  }
  if (from._internal_has_sceneprocreq()) {
    sceneprocreq_ = new ::ss_proto::SceneProcReq(*from.sceneprocreq_);
  } else {
    sceneprocreq_ = nullptr;
  }
  if (from._internal_has_sceneprocack()) {
    sceneprocack_ = new ::ss_proto::SceneProcAck(*from.sceneprocack_);
  } else {
    sceneprocack_ = nullptr;
  }
  if (from._internal_has_loginswtichreq()) {
    loginswtichreq_ = new ::ss_proto::LoginSwtichReq(*from.loginswtichreq_);
  } else {
    loginswtichreq_ = nullptr;
  }
  if (from._internal_has_loginswtichack()) {
    loginswtichack_ = new ::ss_proto::LoginSwtichAck(*from.loginswtichack_);
  } else {
    loginswtichack_ = nullptr;
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&taskid_) -
    reinterpret_cast<char*>(&code_)) + sizeof(taskid_));
  // @@protoc_insertion_point(copy_constructor:ss_proto.CommonMessage)
}

void CommonMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommonMessage_ss_5fproto_2eproto.base);
  ::memset(&adddbntf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&taskid_) -
      reinterpret_cast<char*>(&adddbntf_)) + sizeof(taskid_));
}

CommonMessage::~CommonMessage() {
  // @@protoc_insertion_point(destructor:ss_proto.CommonMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete adddbntf_;
  if (this != internal_default_instance()) delete servercmd_;
  if (this != internal_default_instance()) delete newmailntf_;
  if (this != internal_default_instance()) delete serverreport_;
  if (this != internal_default_instance()) delete servercastntf_;
  if (this != internal_default_instance()) delete topnupdatereq_;
  if (this != internal_default_instance()) delete topnupdateack_;
  if (this != internal_default_instance()) delete topnlistreq_;
  if (this != internal_default_instance()) delete topnlistack_;
  if (this != internal_default_instance()) delete userloginreq_;
  if (this != internal_default_instance()) delete userloginack_;
  if (this != internal_default_instance()) delete loginworldreq_;
  if (this != internal_default_instance()) delete loginworldack_;
  if (this != internal_default_instance()) delete logingamereq_;
  if (this != internal_default_instance()) delete logingameack_;
  if (this != internal_default_instance()) delete logoutgamereq_;
  if (this != internal_default_instance()) delete logoutgameack_;
  if (this != internal_default_instance()) delete createrolereq_;
  if (this != internal_default_instance()) delete createroleack_;
  if (this != internal_default_instance()) delete saverolereq_;
  if (this != internal_default_instance()) delete saveroleack_;
  if (this != internal_default_instance()) delete kickuserntf_;
  if (this != internal_default_instance()) delete syncrolentf_;
  if (this != internal_default_instance()) delete searchbossreq_;
  if (this != internal_default_instance()) delete searchbossack_;
  if (this != internal_default_instance()) delete logdatareq_;
  if (this != internal_default_instance()) delete logdataack_;
  if (this != internal_default_instance()) delete loadroleskillreq_;
  if (this != internal_default_instance()) delete loadroleskillack_;
  if (this != internal_default_instance()) delete loadrolepackagereq_;
  if (this != internal_default_instance()) delete loadrolepackageack_;
  if (this != internal_default_instance()) delete friendaddreq_;
  if (this != internal_default_instance()) delete friendaddack_;
  if (this != internal_default_instance()) delete frienddelreq_;
  if (this != internal_default_instance()) delete frienddelack_;
  if (this != internal_default_instance()) delete friendlistreq_;
  if (this != internal_default_instance()) delete friendlistack_;
  if (this != internal_default_instance()) delete roleboardreq_;
  if (this != internal_default_instance()) delete roleboardack_;
  if (this != internal_default_instance()) delete sceneupdatereq_;
  if (this != internal_default_instance()) delete sceneupdateack_;
  if (this != internal_default_instance()) delete sceneprocreq_;
  if (this != internal_default_instance()) delete sceneprocack_;
  if (this != internal_default_instance()) delete loginswtichreq_;
  if (this != internal_default_instance()) delete loginswtichack_;
}

void CommonMessage::ArenaDtor(void* object) {
  CommonMessage* _this = reinterpret_cast< CommonMessage* >(object);
  (void)_this;
}
void CommonMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommonMessage& CommonMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommonMessage_ss_5fproto_2eproto.base);
  return *internal_default_instance();
}


void CommonMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ss_proto.CommonMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && adddbntf_ != nullptr) {
    delete adddbntf_;
  }
  adddbntf_ = nullptr;
  if (GetArena() == nullptr && servercmd_ != nullptr) {
    delete servercmd_;
  }
  servercmd_ = nullptr;
  if (GetArena() == nullptr && newmailntf_ != nullptr) {
    delete newmailntf_;
  }
  newmailntf_ = nullptr;
  if (GetArena() == nullptr && serverreport_ != nullptr) {
    delete serverreport_;
  }
  serverreport_ = nullptr;
  if (GetArena() == nullptr && servercastntf_ != nullptr) {
    delete servercastntf_;
  }
  servercastntf_ = nullptr;
  if (GetArena() == nullptr && topnupdatereq_ != nullptr) {
    delete topnupdatereq_;
  }
  topnupdatereq_ = nullptr;
  if (GetArena() == nullptr && topnupdateack_ != nullptr) {
    delete topnupdateack_;
  }
  topnupdateack_ = nullptr;
  if (GetArena() == nullptr && topnlistreq_ != nullptr) {
    delete topnlistreq_;
  }
  topnlistreq_ = nullptr;
  if (GetArena() == nullptr && topnlistack_ != nullptr) {
    delete topnlistack_;
  }
  topnlistack_ = nullptr;
  if (GetArena() == nullptr && userloginreq_ != nullptr) {
    delete userloginreq_;
  }
  userloginreq_ = nullptr;
  if (GetArena() == nullptr && userloginack_ != nullptr) {
    delete userloginack_;
  }
  userloginack_ = nullptr;
  if (GetArena() == nullptr && loginworldreq_ != nullptr) {
    delete loginworldreq_;
  }
  loginworldreq_ = nullptr;
  if (GetArena() == nullptr && loginworldack_ != nullptr) {
    delete loginworldack_;
  }
  loginworldack_ = nullptr;
  if (GetArena() == nullptr && logingamereq_ != nullptr) {
    delete logingamereq_;
  }
  logingamereq_ = nullptr;
  if (GetArena() == nullptr && logingameack_ != nullptr) {
    delete logingameack_;
  }
  logingameack_ = nullptr;
  if (GetArena() == nullptr && logoutgamereq_ != nullptr) {
    delete logoutgamereq_;
  }
  logoutgamereq_ = nullptr;
  if (GetArena() == nullptr && logoutgameack_ != nullptr) {
    delete logoutgameack_;
  }
  logoutgameack_ = nullptr;
  if (GetArena() == nullptr && createrolereq_ != nullptr) {
    delete createrolereq_;
  }
  createrolereq_ = nullptr;
  if (GetArena() == nullptr && createroleack_ != nullptr) {
    delete createroleack_;
  }
  createroleack_ = nullptr;
  if (GetArena() == nullptr && saverolereq_ != nullptr) {
    delete saverolereq_;
  }
  saverolereq_ = nullptr;
  if (GetArena() == nullptr && saveroleack_ != nullptr) {
    delete saveroleack_;
  }
  saveroleack_ = nullptr;
  if (GetArena() == nullptr && kickuserntf_ != nullptr) {
    delete kickuserntf_;
  }
  kickuserntf_ = nullptr;
  if (GetArena() == nullptr && syncrolentf_ != nullptr) {
    delete syncrolentf_;
  }
  syncrolentf_ = nullptr;
  if (GetArena() == nullptr && searchbossreq_ != nullptr) {
    delete searchbossreq_;
  }
  searchbossreq_ = nullptr;
  if (GetArena() == nullptr && searchbossack_ != nullptr) {
    delete searchbossack_;
  }
  searchbossack_ = nullptr;
  if (GetArena() == nullptr && logdatareq_ != nullptr) {
    delete logdatareq_;
  }
  logdatareq_ = nullptr;
  if (GetArena() == nullptr && logdataack_ != nullptr) {
    delete logdataack_;
  }
  logdataack_ = nullptr;
  if (GetArena() == nullptr && loadroleskillreq_ != nullptr) {
    delete loadroleskillreq_;
  }
  loadroleskillreq_ = nullptr;
  if (GetArena() == nullptr && loadroleskillack_ != nullptr) {
    delete loadroleskillack_;
  }
  loadroleskillack_ = nullptr;
  if (GetArena() == nullptr && loadrolepackagereq_ != nullptr) {
    delete loadrolepackagereq_;
  }
  loadrolepackagereq_ = nullptr;
  if (GetArena() == nullptr && loadrolepackageack_ != nullptr) {
    delete loadrolepackageack_;
  }
  loadrolepackageack_ = nullptr;
  if (GetArena() == nullptr && friendaddreq_ != nullptr) {
    delete friendaddreq_;
  }
  friendaddreq_ = nullptr;
  if (GetArena() == nullptr && friendaddack_ != nullptr) {
    delete friendaddack_;
  }
  friendaddack_ = nullptr;
  if (GetArena() == nullptr && frienddelreq_ != nullptr) {
    delete frienddelreq_;
  }
  frienddelreq_ = nullptr;
  if (GetArena() == nullptr && frienddelack_ != nullptr) {
    delete frienddelack_;
  }
  frienddelack_ = nullptr;
  if (GetArena() == nullptr && friendlistreq_ != nullptr) {
    delete friendlistreq_;
  }
  friendlistreq_ = nullptr;
  if (GetArena() == nullptr && friendlistack_ != nullptr) {
    delete friendlistack_;
  }
  friendlistack_ = nullptr;
  if (GetArena() == nullptr && roleboardreq_ != nullptr) {
    delete roleboardreq_;
  }
  roleboardreq_ = nullptr;
  if (GetArena() == nullptr && roleboardack_ != nullptr) {
    delete roleboardack_;
  }
  roleboardack_ = nullptr;
  if (GetArena() == nullptr && sceneupdatereq_ != nullptr) {
    delete sceneupdatereq_;
  }
  sceneupdatereq_ = nullptr;
  if (GetArena() == nullptr && sceneupdateack_ != nullptr) {
    delete sceneupdateack_;
  }
  sceneupdateack_ = nullptr;
  if (GetArena() == nullptr && sceneprocreq_ != nullptr) {
    delete sceneprocreq_;
  }
  sceneprocreq_ = nullptr;
  if (GetArena() == nullptr && sceneprocack_ != nullptr) {
    delete sceneprocack_;
  }
  sceneprocack_ = nullptr;
  if (GetArena() == nullptr && loginswtichreq_ != nullptr) {
    delete loginswtichreq_;
  }
  loginswtichreq_ = nullptr;
  if (GetArena() == nullptr && loginswtichack_ != nullptr) {
    delete loginswtichack_;
  }
  loginswtichack_ = nullptr;
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&taskid_) -
      reinterpret_cast<char*>(&code_)) + sizeof(taskid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ss_proto.Cmd code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::ss_proto::Cmd>(val));
        } else goto handle_unusual;
        continue;
      // .ss_proto.ErrorCode errorCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_errorcode(static_cast<::ss_proto::ErrorCode>(val));
        } else goto handle_unusual;
        continue;
      // int64 taskId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.AddDBNtf addDBNtf = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_adddbntf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.ServerCmd serverCmd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_servercmd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.NewMailNtf newMailNtf = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_newmailntf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.ServerReport serverReport = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_serverreport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.ServerCastNtf serverCastNtf = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_servercastntf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.TopNUpdateReq topNUpdateReq = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_topnupdatereq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.TopNUpdateAck topNUpdateAck = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_topnupdateack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.TopNListReq topNListReq = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_topnlistreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.TopNListAck topNListAck = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_topnlistack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.UserLoginReq userLoginReq = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_userloginreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.UserLoginAck userLoginAck = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_userloginack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.LoginWorldReq loginWorldReq = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_loginworldreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.LoginWorldAck loginWorldAck = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_loginworldack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.LoginGameReq loginGameReq = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_logingamereq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.LoginGameAck loginGameAck = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_logingameack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.LogoutGameReq logoutGameReq = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_logoutgamereq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.LogoutGameAck logoutGameAck = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_logoutgameack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.CreateRoleReq createRoleReq = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_createrolereq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.CreateRoleAck createRoleAck = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_createroleack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.SaveRoleReq saveRoleReq = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_saverolereq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.SaveRoleAck saveRoleAck = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_saveroleack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.KickUserNtf kickUserNtf = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_kickuserntf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.SyncRoleNtf syncRoleNtf = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_syncrolentf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.SearchBossReq searchBossReq = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_searchbossreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.SearchBossAck searchBossAck = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_searchbossack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.LogDataReq logDataReq = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_logdatareq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.LogDataAck logDataAck = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_logdataack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.LoadRoleSkillReq loadRoleSkillReq = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_loadroleskillreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.LoadRoleSkillAck loadRoleSkillAck = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_loadroleskillack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.LoadRolePackageReq loadRolePackageReq = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_loadrolepackagereq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.LoadRolePackageAck loadRolePackageAck = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_loadrolepackageack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.FriendAddReq friendAddReq = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_friendaddreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.FriendAddAck friendAddAck = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_friendaddack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.FriendDelReq friendDelReq = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_frienddelreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.FriendDelAck friendDelAck = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_frienddelack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.FriendListReq friendListReq = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_friendlistreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.FriendListAck friendListAck = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_friendlistack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.RoleBoardReq roleBoardReq = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_roleboardreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.RoleBoardAck roleBoardAck = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_roleboardack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.SceneUpdateReq sceneUpdateReq = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_sceneupdatereq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.SceneUpdateAck sceneUpdateAck = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_sceneupdateack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.SceneProcReq sceneProcReq = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_sceneprocreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.SceneProcAck sceneProcAck = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_sceneprocack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.LoginSwtichReq loginSwtichReq = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_loginswtichreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ss_proto.LoginSwtichAck loginSwtichAck = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_loginswtichack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ss_proto.CommonMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ss_proto.Cmd code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // .ss_proto.ErrorCode errorCode = 2;
  if (this->errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_errorcode(), target);
  }

  // int64 taskId = 3;
  if (this->taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_taskid(), target);
  }

  // .ss_proto.AddDBNtf addDBNtf = 5;
  if (this->has_adddbntf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::adddbntf(this), target, stream);
  }

  // .ss_proto.ServerCmd serverCmd = 6;
  if (this->has_servercmd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::servercmd(this), target, stream);
  }

  // .ss_proto.NewMailNtf newMailNtf = 7;
  if (this->has_newmailntf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::newmailntf(this), target, stream);
  }

  // .ss_proto.ServerReport serverReport = 8;
  if (this->has_serverreport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::serverreport(this), target, stream);
  }

  // .ss_proto.ServerCastNtf serverCastNtf = 9;
  if (this->has_servercastntf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::servercastntf(this), target, stream);
  }

  // .ss_proto.TopNUpdateReq topNUpdateReq = 10;
  if (this->has_topnupdatereq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::topnupdatereq(this), target, stream);
  }

  // .ss_proto.TopNUpdateAck topNUpdateAck = 11;
  if (this->has_topnupdateack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::topnupdateack(this), target, stream);
  }

  // .ss_proto.TopNListReq topNListReq = 12;
  if (this->has_topnlistreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::topnlistreq(this), target, stream);
  }

  // .ss_proto.TopNListAck topNListAck = 13;
  if (this->has_topnlistack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::topnlistack(this), target, stream);
  }

  // .ss_proto.UserLoginReq userLoginReq = 20;
  if (this->has_userloginreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::userloginreq(this), target, stream);
  }

  // .ss_proto.UserLoginAck userLoginAck = 21;
  if (this->has_userloginack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::userloginack(this), target, stream);
  }

  // .ss_proto.LoginWorldReq loginWorldReq = 22;
  if (this->has_loginworldreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::loginworldreq(this), target, stream);
  }

  // .ss_proto.LoginWorldAck loginWorldAck = 23;
  if (this->has_loginworldack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::loginworldack(this), target, stream);
  }

  // .ss_proto.LoginGameReq loginGameReq = 24;
  if (this->has_logingamereq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::logingamereq(this), target, stream);
  }

  // .ss_proto.LoginGameAck loginGameAck = 25;
  if (this->has_logingameack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::logingameack(this), target, stream);
  }

  // .ss_proto.LogoutGameReq logoutGameReq = 26;
  if (this->has_logoutgamereq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::logoutgamereq(this), target, stream);
  }

  // .ss_proto.LogoutGameAck logoutGameAck = 27;
  if (this->has_logoutgameack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::logoutgameack(this), target, stream);
  }

  // .ss_proto.CreateRoleReq createRoleReq = 28;
  if (this->has_createrolereq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::createrolereq(this), target, stream);
  }

  // .ss_proto.CreateRoleAck createRoleAck = 29;
  if (this->has_createroleack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::createroleack(this), target, stream);
  }

  // .ss_proto.SaveRoleReq saveRoleReq = 30;
  if (this->has_saverolereq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::saverolereq(this), target, stream);
  }

  // .ss_proto.SaveRoleAck saveRoleAck = 31;
  if (this->has_saveroleack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::saveroleack(this), target, stream);
  }

  // .ss_proto.KickUserNtf kickUserNtf = 32;
  if (this->has_kickuserntf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::kickuserntf(this), target, stream);
  }

  // .ss_proto.SyncRoleNtf syncRoleNtf = 33;
  if (this->has_syncrolentf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::syncrolentf(this), target, stream);
  }

  // .ss_proto.SearchBossReq searchBossReq = 34;
  if (this->has_searchbossreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::searchbossreq(this), target, stream);
  }

  // .ss_proto.SearchBossAck searchBossAck = 35;
  if (this->has_searchbossack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::searchbossack(this), target, stream);
  }

  // .ss_proto.LogDataReq logDataReq = 36;
  if (this->has_logdatareq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::logdatareq(this), target, stream);
  }

  // .ss_proto.LogDataAck logDataAck = 37;
  if (this->has_logdataack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::logdataack(this), target, stream);
  }

  // .ss_proto.LoadRoleSkillReq loadRoleSkillReq = 38;
  if (this->has_loadroleskillreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::loadroleskillreq(this), target, stream);
  }

  // .ss_proto.LoadRoleSkillAck loadRoleSkillAck = 39;
  if (this->has_loadroleskillack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::loadroleskillack(this), target, stream);
  }

  // .ss_proto.LoadRolePackageReq loadRolePackageReq = 40;
  if (this->has_loadrolepackagereq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::loadrolepackagereq(this), target, stream);
  }

  // .ss_proto.LoadRolePackageAck loadRolePackageAck = 41;
  if (this->has_loadrolepackageack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::loadrolepackageack(this), target, stream);
  }

  // .ss_proto.FriendAddReq friendAddReq = 44;
  if (this->has_friendaddreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::friendaddreq(this), target, stream);
  }

  // .ss_proto.FriendAddAck friendAddAck = 45;
  if (this->has_friendaddack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        45, _Internal::friendaddack(this), target, stream);
  }

  // .ss_proto.FriendDelReq friendDelReq = 46;
  if (this->has_frienddelreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        46, _Internal::frienddelreq(this), target, stream);
  }

  // .ss_proto.FriendDelAck friendDelAck = 47;
  if (this->has_frienddelack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        47, _Internal::frienddelack(this), target, stream);
  }

  // .ss_proto.FriendListReq friendListReq = 48;
  if (this->has_friendlistreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        48, _Internal::friendlistreq(this), target, stream);
  }

  // .ss_proto.FriendListAck friendListAck = 49;
  if (this->has_friendlistack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        49, _Internal::friendlistack(this), target, stream);
  }

  // .ss_proto.RoleBoardReq roleBoardReq = 50;
  if (this->has_roleboardreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::roleboardreq(this), target, stream);
  }

  // .ss_proto.RoleBoardAck roleBoardAck = 51;
  if (this->has_roleboardack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        51, _Internal::roleboardack(this), target, stream);
  }

  // .ss_proto.SceneUpdateReq sceneUpdateReq = 54;
  if (this->has_sceneupdatereq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        54, _Internal::sceneupdatereq(this), target, stream);
  }

  // .ss_proto.SceneUpdateAck sceneUpdateAck = 55;
  if (this->has_sceneupdateack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        55, _Internal::sceneupdateack(this), target, stream);
  }

  // .ss_proto.SceneProcReq sceneProcReq = 56;
  if (this->has_sceneprocreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        56, _Internal::sceneprocreq(this), target, stream);
  }

  // .ss_proto.SceneProcAck sceneProcAck = 57;
  if (this->has_sceneprocack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        57, _Internal::sceneprocack(this), target, stream);
  }

  // .ss_proto.LoginSwtichReq loginSwtichReq = 58;
  if (this->has_loginswtichreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        58, _Internal::loginswtichreq(this), target, stream);
  }

  // .ss_proto.LoginSwtichAck loginSwtichAck = 59;
  if (this->has_loginswtichack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        59, _Internal::loginswtichack(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ss_proto.CommonMessage)
  return target;
}

size_t CommonMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ss_proto.CommonMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ss_proto.AddDBNtf addDBNtf = 5;
  if (this->has_adddbntf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *adddbntf_);
  }

  // .ss_proto.ServerCmd serverCmd = 6;
  if (this->has_servercmd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *servercmd_);
  }

  // .ss_proto.NewMailNtf newMailNtf = 7;
  if (this->has_newmailntf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *newmailntf_);
  }

  // .ss_proto.ServerReport serverReport = 8;
  if (this->has_serverreport()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *serverreport_);
  }

  // .ss_proto.ServerCastNtf serverCastNtf = 9;
  if (this->has_servercastntf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *servercastntf_);
  }

  // .ss_proto.TopNUpdateReq topNUpdateReq = 10;
  if (this->has_topnupdatereq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *topnupdatereq_);
  }

  // .ss_proto.TopNUpdateAck topNUpdateAck = 11;
  if (this->has_topnupdateack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *topnupdateack_);
  }

  // .ss_proto.TopNListReq topNListReq = 12;
  if (this->has_topnlistreq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *topnlistreq_);
  }

  // .ss_proto.TopNListAck topNListAck = 13;
  if (this->has_topnlistack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *topnlistack_);
  }

  // .ss_proto.UserLoginReq userLoginReq = 20;
  if (this->has_userloginreq()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *userloginreq_);
  }

  // .ss_proto.UserLoginAck userLoginAck = 21;
  if (this->has_userloginack()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *userloginack_);
  }

  // .ss_proto.LoginWorldReq loginWorldReq = 22;
  if (this->has_loginworldreq()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *loginworldreq_);
  }

  // .ss_proto.LoginWorldAck loginWorldAck = 23;
  if (this->has_loginworldack()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *loginworldack_);
  }

  // .ss_proto.LoginGameReq loginGameReq = 24;
  if (this->has_logingamereq()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logingamereq_);
  }

  // .ss_proto.LoginGameAck loginGameAck = 25;
  if (this->has_logingameack()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logingameack_);
  }

  // .ss_proto.LogoutGameReq logoutGameReq = 26;
  if (this->has_logoutgamereq()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logoutgamereq_);
  }

  // .ss_proto.LogoutGameAck logoutGameAck = 27;
  if (this->has_logoutgameack()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logoutgameack_);
  }

  // .ss_proto.CreateRoleReq createRoleReq = 28;
  if (this->has_createrolereq()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *createrolereq_);
  }

  // .ss_proto.CreateRoleAck createRoleAck = 29;
  if (this->has_createroleack()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *createroleack_);
  }

  // .ss_proto.SaveRoleReq saveRoleReq = 30;
  if (this->has_saverolereq()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *saverolereq_);
  }

  // .ss_proto.SaveRoleAck saveRoleAck = 31;
  if (this->has_saveroleack()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *saveroleack_);
  }

  // .ss_proto.KickUserNtf kickUserNtf = 32;
  if (this->has_kickuserntf()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kickuserntf_);
  }

  // .ss_proto.SyncRoleNtf syncRoleNtf = 33;
  if (this->has_syncrolentf()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *syncrolentf_);
  }

  // .ss_proto.SearchBossReq searchBossReq = 34;
  if (this->has_searchbossreq()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *searchbossreq_);
  }

  // .ss_proto.SearchBossAck searchBossAck = 35;
  if (this->has_searchbossack()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *searchbossack_);
  }

  // .ss_proto.LogDataReq logDataReq = 36;
  if (this->has_logdatareq()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logdatareq_);
  }

  // .ss_proto.LogDataAck logDataAck = 37;
  if (this->has_logdataack()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logdataack_);
  }

  // .ss_proto.LoadRoleSkillReq loadRoleSkillReq = 38;
  if (this->has_loadroleskillreq()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *loadroleskillreq_);
  }

  // .ss_proto.LoadRoleSkillAck loadRoleSkillAck = 39;
  if (this->has_loadroleskillack()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *loadroleskillack_);
  }

  // .ss_proto.LoadRolePackageReq loadRolePackageReq = 40;
  if (this->has_loadrolepackagereq()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *loadrolepackagereq_);
  }

  // .ss_proto.LoadRolePackageAck loadRolePackageAck = 41;
  if (this->has_loadrolepackageack()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *loadrolepackageack_);
  }

  // .ss_proto.FriendAddReq friendAddReq = 44;
  if (this->has_friendaddreq()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *friendaddreq_);
  }

  // .ss_proto.FriendAddAck friendAddAck = 45;
  if (this->has_friendaddack()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *friendaddack_);
  }

  // .ss_proto.FriendDelReq friendDelReq = 46;
  if (this->has_frienddelreq()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frienddelreq_);
  }

  // .ss_proto.FriendDelAck friendDelAck = 47;
  if (this->has_frienddelack()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frienddelack_);
  }

  // .ss_proto.FriendListReq friendListReq = 48;
  if (this->has_friendlistreq()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *friendlistreq_);
  }

  // .ss_proto.FriendListAck friendListAck = 49;
  if (this->has_friendlistack()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *friendlistack_);
  }

  // .ss_proto.RoleBoardReq roleBoardReq = 50;
  if (this->has_roleboardreq()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roleboardreq_);
  }

  // .ss_proto.RoleBoardAck roleBoardAck = 51;
  if (this->has_roleboardack()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roleboardack_);
  }

  // .ss_proto.SceneUpdateReq sceneUpdateReq = 54;
  if (this->has_sceneupdatereq()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sceneupdatereq_);
  }

  // .ss_proto.SceneUpdateAck sceneUpdateAck = 55;
  if (this->has_sceneupdateack()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sceneupdateack_);
  }

  // .ss_proto.SceneProcReq sceneProcReq = 56;
  if (this->has_sceneprocreq()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sceneprocreq_);
  }

  // .ss_proto.SceneProcAck sceneProcAck = 57;
  if (this->has_sceneprocack()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sceneprocack_);
  }

  // .ss_proto.LoginSwtichReq loginSwtichReq = 58;
  if (this->has_loginswtichreq()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *loginswtichreq_);
  }

  // .ss_proto.LoginSwtichAck loginSwtichAck = 59;
  if (this->has_loginswtichack()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *loginswtichack_);
  }

  // .ss_proto.Cmd code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  // .ss_proto.ErrorCode errorCode = 2;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_errorcode());
  }

  // int64 taskId = 3;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_taskid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ss_proto.CommonMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ss_proto.CommonMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ss_proto.CommonMessage)
    MergeFrom(*source);
  }
}

void CommonMessage::MergeFrom(const CommonMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ss_proto.CommonMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_adddbntf()) {
    _internal_mutable_adddbntf()->::ss_proto::AddDBNtf::MergeFrom(from._internal_adddbntf());
  }
  if (from.has_servercmd()) {
    _internal_mutable_servercmd()->::ss_proto::ServerCmd::MergeFrom(from._internal_servercmd());
  }
  if (from.has_newmailntf()) {
    _internal_mutable_newmailntf()->::ss_proto::NewMailNtf::MergeFrom(from._internal_newmailntf());
  }
  if (from.has_serverreport()) {
    _internal_mutable_serverreport()->::ss_proto::ServerReport::MergeFrom(from._internal_serverreport());
  }
  if (from.has_servercastntf()) {
    _internal_mutable_servercastntf()->::ss_proto::ServerCastNtf::MergeFrom(from._internal_servercastntf());
  }
  if (from.has_topnupdatereq()) {
    _internal_mutable_topnupdatereq()->::ss_proto::TopNUpdateReq::MergeFrom(from._internal_topnupdatereq());
  }
  if (from.has_topnupdateack()) {
    _internal_mutable_topnupdateack()->::ss_proto::TopNUpdateAck::MergeFrom(from._internal_topnupdateack());
  }
  if (from.has_topnlistreq()) {
    _internal_mutable_topnlistreq()->::ss_proto::TopNListReq::MergeFrom(from._internal_topnlistreq());
  }
  if (from.has_topnlistack()) {
    _internal_mutable_topnlistack()->::ss_proto::TopNListAck::MergeFrom(from._internal_topnlistack());
  }
  if (from.has_userloginreq()) {
    _internal_mutable_userloginreq()->::ss_proto::UserLoginReq::MergeFrom(from._internal_userloginreq());
  }
  if (from.has_userloginack()) {
    _internal_mutable_userloginack()->::ss_proto::UserLoginAck::MergeFrom(from._internal_userloginack());
  }
  if (from.has_loginworldreq()) {
    _internal_mutable_loginworldreq()->::ss_proto::LoginWorldReq::MergeFrom(from._internal_loginworldreq());
  }
  if (from.has_loginworldack()) {
    _internal_mutable_loginworldack()->::ss_proto::LoginWorldAck::MergeFrom(from._internal_loginworldack());
  }
  if (from.has_logingamereq()) {
    _internal_mutable_logingamereq()->::ss_proto::LoginGameReq::MergeFrom(from._internal_logingamereq());
  }
  if (from.has_logingameack()) {
    _internal_mutable_logingameack()->::ss_proto::LoginGameAck::MergeFrom(from._internal_logingameack());
  }
  if (from.has_logoutgamereq()) {
    _internal_mutable_logoutgamereq()->::ss_proto::LogoutGameReq::MergeFrom(from._internal_logoutgamereq());
  }
  if (from.has_logoutgameack()) {
    _internal_mutable_logoutgameack()->::ss_proto::LogoutGameAck::MergeFrom(from._internal_logoutgameack());
  }
  if (from.has_createrolereq()) {
    _internal_mutable_createrolereq()->::ss_proto::CreateRoleReq::MergeFrom(from._internal_createrolereq());
  }
  if (from.has_createroleack()) {
    _internal_mutable_createroleack()->::ss_proto::CreateRoleAck::MergeFrom(from._internal_createroleack());
  }
  if (from.has_saverolereq()) {
    _internal_mutable_saverolereq()->::ss_proto::SaveRoleReq::MergeFrom(from._internal_saverolereq());
  }
  if (from.has_saveroleack()) {
    _internal_mutable_saveroleack()->::ss_proto::SaveRoleAck::MergeFrom(from._internal_saveroleack());
  }
  if (from.has_kickuserntf()) {
    _internal_mutable_kickuserntf()->::ss_proto::KickUserNtf::MergeFrom(from._internal_kickuserntf());
  }
  if (from.has_syncrolentf()) {
    _internal_mutable_syncrolentf()->::ss_proto::SyncRoleNtf::MergeFrom(from._internal_syncrolentf());
  }
  if (from.has_searchbossreq()) {
    _internal_mutable_searchbossreq()->::ss_proto::SearchBossReq::MergeFrom(from._internal_searchbossreq());
  }
  if (from.has_searchbossack()) {
    _internal_mutable_searchbossack()->::ss_proto::SearchBossAck::MergeFrom(from._internal_searchbossack());
  }
  if (from.has_logdatareq()) {
    _internal_mutable_logdatareq()->::ss_proto::LogDataReq::MergeFrom(from._internal_logdatareq());
  }
  if (from.has_logdataack()) {
    _internal_mutable_logdataack()->::ss_proto::LogDataAck::MergeFrom(from._internal_logdataack());
  }
  if (from.has_loadroleskillreq()) {
    _internal_mutable_loadroleskillreq()->::ss_proto::LoadRoleSkillReq::MergeFrom(from._internal_loadroleskillreq());
  }
  if (from.has_loadroleskillack()) {
    _internal_mutable_loadroleskillack()->::ss_proto::LoadRoleSkillAck::MergeFrom(from._internal_loadroleskillack());
  }
  if (from.has_loadrolepackagereq()) {
    _internal_mutable_loadrolepackagereq()->::ss_proto::LoadRolePackageReq::MergeFrom(from._internal_loadrolepackagereq());
  }
  if (from.has_loadrolepackageack()) {
    _internal_mutable_loadrolepackageack()->::ss_proto::LoadRolePackageAck::MergeFrom(from._internal_loadrolepackageack());
  }
  if (from.has_friendaddreq()) {
    _internal_mutable_friendaddreq()->::ss_proto::FriendAddReq::MergeFrom(from._internal_friendaddreq());
  }
  if (from.has_friendaddack()) {
    _internal_mutable_friendaddack()->::ss_proto::FriendAddAck::MergeFrom(from._internal_friendaddack());
  }
  if (from.has_frienddelreq()) {
    _internal_mutable_frienddelreq()->::ss_proto::FriendDelReq::MergeFrom(from._internal_frienddelreq());
  }
  if (from.has_frienddelack()) {
    _internal_mutable_frienddelack()->::ss_proto::FriendDelAck::MergeFrom(from._internal_frienddelack());
  }
  if (from.has_friendlistreq()) {
    _internal_mutable_friendlistreq()->::ss_proto::FriendListReq::MergeFrom(from._internal_friendlistreq());
  }
  if (from.has_friendlistack()) {
    _internal_mutable_friendlistack()->::ss_proto::FriendListAck::MergeFrom(from._internal_friendlistack());
  }
  if (from.has_roleboardreq()) {
    _internal_mutable_roleboardreq()->::ss_proto::RoleBoardReq::MergeFrom(from._internal_roleboardreq());
  }
  if (from.has_roleboardack()) {
    _internal_mutable_roleboardack()->::ss_proto::RoleBoardAck::MergeFrom(from._internal_roleboardack());
  }
  if (from.has_sceneupdatereq()) {
    _internal_mutable_sceneupdatereq()->::ss_proto::SceneUpdateReq::MergeFrom(from._internal_sceneupdatereq());
  }
  if (from.has_sceneupdateack()) {
    _internal_mutable_sceneupdateack()->::ss_proto::SceneUpdateAck::MergeFrom(from._internal_sceneupdateack());
  }
  if (from.has_sceneprocreq()) {
    _internal_mutable_sceneprocreq()->::ss_proto::SceneProcReq::MergeFrom(from._internal_sceneprocreq());
  }
  if (from.has_sceneprocack()) {
    _internal_mutable_sceneprocack()->::ss_proto::SceneProcAck::MergeFrom(from._internal_sceneprocack());
  }
  if (from.has_loginswtichreq()) {
    _internal_mutable_loginswtichreq()->::ss_proto::LoginSwtichReq::MergeFrom(from._internal_loginswtichreq());
  }
  if (from.has_loginswtichack()) {
    _internal_mutable_loginswtichack()->::ss_proto::LoginSwtichAck::MergeFrom(from._internal_loginswtichack());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.errorcode() != 0) {
    _internal_set_errorcode(from._internal_errorcode());
  }
  if (from.taskid() != 0) {
    _internal_set_taskid(from._internal_taskid());
  }
}

void CommonMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ss_proto.CommonMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonMessage::CopyFrom(const CommonMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ss_proto.CommonMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonMessage::IsInitialized() const {
  return true;
}

void CommonMessage::InternalSwap(CommonMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonMessage, taskid_)
      + sizeof(CommonMessage::taskid_)
      - PROTOBUF_FIELD_OFFSET(CommonMessage, adddbntf_)>(
          reinterpret_cast<char*>(&adddbntf_),
          reinterpret_cast<char*>(&other->adddbntf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ss_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ss_proto::AddDBNtf* Arena::CreateMaybeMessage< ::ss_proto::AddDBNtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::AddDBNtf >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::ServerReport* Arena::CreateMaybeMessage< ::ss_proto::ServerReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::ServerReport >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::ServerCmd* Arena::CreateMaybeMessage< ::ss_proto::ServerCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::ServerCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::ServerCastNtf* Arena::CreateMaybeMessage< ::ss_proto::ServerCastNtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::ServerCastNtf >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::NewMailNtf* Arena::CreateMaybeMessage< ::ss_proto::NewMailNtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::NewMailNtf >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::UserLoginReq* Arena::CreateMaybeMessage< ::ss_proto::UserLoginReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::UserLoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::UserRole* Arena::CreateMaybeMessage< ::ss_proto::UserRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::UserRole >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::UserLoginAck* Arena::CreateMaybeMessage< ::ss_proto::UserLoginAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::UserLoginAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::LoginWorldReq* Arena::CreateMaybeMessage< ::ss_proto::LoginWorldReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::LoginWorldReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::LoginWorldAck* Arena::CreateMaybeMessage< ::ss_proto::LoginWorldAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::LoginWorldAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::LoginGameReq* Arena::CreateMaybeMessage< ::ss_proto::LoginGameReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::LoginGameReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::RoleDatas* Arena::CreateMaybeMessage< ::ss_proto::RoleDatas >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::RoleDatas >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::LoginGameAck* Arena::CreateMaybeMessage< ::ss_proto::LoginGameAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::LoginGameAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::LogoutGameReq* Arena::CreateMaybeMessage< ::ss_proto::LogoutGameReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::LogoutGameReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::LogoutGameAck* Arena::CreateMaybeMessage< ::ss_proto::LogoutGameAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::LogoutGameAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::CreateRoleReq* Arena::CreateMaybeMessage< ::ss_proto::CreateRoleReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::CreateRoleReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::CreateRoleAck* Arena::CreateMaybeMessage< ::ss_proto::CreateRoleAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::CreateRoleAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::SaveRoleReq* Arena::CreateMaybeMessage< ::ss_proto::SaveRoleReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::SaveRoleReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::SaveRoleAck* Arena::CreateMaybeMessage< ::ss_proto::SaveRoleAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::SaveRoleAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::KickUserNtf* Arena::CreateMaybeMessage< ::ss_proto::KickUserNtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::KickUserNtf >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::SyncRole* Arena::CreateMaybeMessage< ::ss_proto::SyncRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::SyncRole >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::SyncRoleNtf* Arena::CreateMaybeMessage< ::ss_proto::SyncRoleNtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::SyncRoleNtf >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::SearchBossReq* Arena::CreateMaybeMessage< ::ss_proto::SearchBossReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::SearchBossReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::SearchBossAck* Arena::CreateMaybeMessage< ::ss_proto::SearchBossAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::SearchBossAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::LogDataReq* Arena::CreateMaybeMessage< ::ss_proto::LogDataReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::LogDataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::LogDataAck* Arena::CreateMaybeMessage< ::ss_proto::LogDataAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::LogDataAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::LoadRoleSkillReq* Arena::CreateMaybeMessage< ::ss_proto::LoadRoleSkillReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::LoadRoleSkillReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::LoadRoleSkillAck* Arena::CreateMaybeMessage< ::ss_proto::LoadRoleSkillAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::LoadRoleSkillAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::LoadRolePackageReq* Arena::CreateMaybeMessage< ::ss_proto::LoadRolePackageReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::LoadRolePackageReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::LoadRolePackageAck* Arena::CreateMaybeMessage< ::ss_proto::LoadRolePackageAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::LoadRolePackageAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::SaveRolePackageReq* Arena::CreateMaybeMessage< ::ss_proto::SaveRolePackageReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::SaveRolePackageReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::SaveRolePackageAck* Arena::CreateMaybeMessage< ::ss_proto::SaveRolePackageAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::SaveRolePackageAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::FriendAddReq* Arena::CreateMaybeMessage< ::ss_proto::FriendAddReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::FriendAddReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::FriendAddAck* Arena::CreateMaybeMessage< ::ss_proto::FriendAddAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::FriendAddAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::FriendDelReq* Arena::CreateMaybeMessage< ::ss_proto::FriendDelReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::FriendDelReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::FriendDelAck* Arena::CreateMaybeMessage< ::ss_proto::FriendDelAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::FriendDelAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::FriendInfo* Arena::CreateMaybeMessage< ::ss_proto::FriendInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::FriendInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::FriendListReq* Arena::CreateMaybeMessage< ::ss_proto::FriendListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::FriendListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::FriendListAck* Arena::CreateMaybeMessage< ::ss_proto::FriendListAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::FriendListAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::RoleBoardReq* Arena::CreateMaybeMessage< ::ss_proto::RoleBoardReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::RoleBoardReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::RoleBoardAck* Arena::CreateMaybeMessage< ::ss_proto::RoleBoardAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::RoleBoardAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::RoleMailReq* Arena::CreateMaybeMessage< ::ss_proto::RoleMailReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::RoleMailReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::RoleMailAck* Arena::CreateMaybeMessage< ::ss_proto::RoleMailAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::RoleMailAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::TopNUpdateReq* Arena::CreateMaybeMessage< ::ss_proto::TopNUpdateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::TopNUpdateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::TopNUpdateAck* Arena::CreateMaybeMessage< ::ss_proto::TopNUpdateAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::TopNUpdateAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::TopNListReq* Arena::CreateMaybeMessage< ::ss_proto::TopNListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::TopNListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::TopNListAck* Arena::CreateMaybeMessage< ::ss_proto::TopNListAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::TopNListAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::SceneUpdateReq* Arena::CreateMaybeMessage< ::ss_proto::SceneUpdateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::SceneUpdateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::SceneUpdateAck* Arena::CreateMaybeMessage< ::ss_proto::SceneUpdateAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::SceneUpdateAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::SceneProcReq* Arena::CreateMaybeMessage< ::ss_proto::SceneProcReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::SceneProcReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::SceneProcAck* Arena::CreateMaybeMessage< ::ss_proto::SceneProcAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::SceneProcAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::LoginSwtichReq* Arena::CreateMaybeMessage< ::ss_proto::LoginSwtichReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::LoginSwtichReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::LoginSwtichAck* Arena::CreateMaybeMessage< ::ss_proto::LoginSwtichAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::LoginSwtichAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::LoadInteractionReq* Arena::CreateMaybeMessage< ::ss_proto::LoadInteractionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::LoadInteractionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::LoadInteractionAck* Arena::CreateMaybeMessage< ::ss_proto::LoadInteractionAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::LoadInteractionAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ss_proto::CommonMessage* Arena::CreateMaybeMessage< ::ss_proto::CommonMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ss_proto::CommonMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_login_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_login_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_login_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_login_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_login_2eproto;
namespace Tom {
class LoginFaild;
class LoginFaildDefaultTypeInternal;
extern LoginFaildDefaultTypeInternal _LoginFaild_default_instance_;
class LoginOk;
class LoginOkDefaultTypeInternal;
extern LoginOkDefaultTypeInternal _LoginOk_default_instance_;
class PlayerBaseInfo;
class PlayerBaseInfoDefaultTypeInternal;
extern PlayerBaseInfoDefaultTypeInternal _PlayerBaseInfo_default_instance_;
class ReqLogin;
class ReqLoginDefaultTypeInternal;
extern ReqLoginDefaultTypeInternal _ReqLogin_default_instance_;
class SignUpResponse;
class SignUpResponseDefaultTypeInternal;
extern SignUpResponseDefaultTypeInternal _SignUpResponse_default_instance_;
class TestEcho;
class TestEchoDefaultTypeInternal;
extern TestEchoDefaultTypeInternal _TestEcho_default_instance_;
class TocChat;
class TocChatDefaultTypeInternal;
extern TocChatDefaultTypeInternal _TocChat_default_instance_;
class TosChat;
class TosChatDefaultTypeInternal;
extern TosChatDefaultTypeInternal _TosChat_default_instance_;
}  // namespace Tom
PROTOBUF_NAMESPACE_OPEN
template<> ::Tom::LoginFaild* Arena::CreateMaybeMessage<::Tom::LoginFaild>(Arena*);
template<> ::Tom::LoginOk* Arena::CreateMaybeMessage<::Tom::LoginOk>(Arena*);
template<> ::Tom::PlayerBaseInfo* Arena::CreateMaybeMessage<::Tom::PlayerBaseInfo>(Arena*);
template<> ::Tom::ReqLogin* Arena::CreateMaybeMessage<::Tom::ReqLogin>(Arena*);
template<> ::Tom::SignUpResponse* Arena::CreateMaybeMessage<::Tom::SignUpResponse>(Arena*);
template<> ::Tom::TestEcho* Arena::CreateMaybeMessage<::Tom::TestEcho>(Arena*);
template<> ::Tom::TocChat* Arena::CreateMaybeMessage<::Tom::TocChat>(Arena*);
template<> ::Tom::TosChat* Arena::CreateMaybeMessage<::Tom::TosChat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Tom {

enum LoginFaild_ErrorCode : int {
  LoginFaild_ErrorCode_AccountOrPasswardNotMatch = 0,
  LoginFaild_ErrorCode_AccIDInvalid = 1,
  LoginFaild_ErrorCode_LoginRepeat = 2,
  LoginFaild_ErrorCode_InnerError = 3,
  LoginFaild_ErrorCode_LoginFaild_ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoginFaild_ErrorCode_LoginFaild_ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoginFaild_ErrorCode_IsValid(int value);
constexpr LoginFaild_ErrorCode LoginFaild_ErrorCode_ErrorCode_MIN = LoginFaild_ErrorCode_AccountOrPasswardNotMatch;
constexpr LoginFaild_ErrorCode LoginFaild_ErrorCode_ErrorCode_MAX = LoginFaild_ErrorCode_InnerError;
constexpr int LoginFaild_ErrorCode_ErrorCode_ARRAYSIZE = LoginFaild_ErrorCode_ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginFaild_ErrorCode_descriptor();
template<typename T>
inline const std::string& LoginFaild_ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginFaild_ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginFaild_ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginFaild_ErrorCode_descriptor(), enum_t_value);
}
inline bool LoginFaild_ErrorCode_Parse(
    const std::string& name, LoginFaild_ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginFaild_ErrorCode>(
    LoginFaild_ErrorCode_descriptor(), name, value);
}
// ===================================================================

class SignUpResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tom.SignUpResponse) */ {
 public:
  inline SignUpResponse() : SignUpResponse(nullptr) {};
  virtual ~SignUpResponse();

  SignUpResponse(const SignUpResponse& from);
  SignUpResponse(SignUpResponse&& from) noexcept
    : SignUpResponse() {
    *this = ::std::move(from);
  }

  inline SignUpResponse& operator=(const SignUpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignUpResponse& operator=(SignUpResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignUpResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignUpResponse* internal_default_instance() {
    return reinterpret_cast<const SignUpResponse*>(
               &_SignUpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SignUpResponse& a, SignUpResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SignUpResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignUpResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignUpResponse* New() const final {
    return CreateMaybeMessage<SignUpResponse>(nullptr);
  }

  SignUpResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignUpResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignUpResponse& from);
  void MergeFrom(const SignUpResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignUpResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tom.SignUpResponse";
  }
  protected:
  explicit SignUpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodeFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // int32 errorCode = 1;
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float version = 2;
  void clear_version();
  float version() const;
  void set_version(float value);
  private:
  float _internal_version() const;
  void _internal_set_version(float value);
  public:

  // @@protoc_insertion_point(class_scope:Tom.SignUpResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode_;
  float version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class TosChat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tom.TosChat) */ {
 public:
  inline TosChat() : TosChat(nullptr) {};
  virtual ~TosChat();

  TosChat(const TosChat& from);
  TosChat(TosChat&& from) noexcept
    : TosChat() {
    *this = ::std::move(from);
  }

  inline TosChat& operator=(const TosChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline TosChat& operator=(TosChat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TosChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TosChat* internal_default_instance() {
    return reinterpret_cast<const TosChat*>(
               &_TosChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TosChat& a, TosChat& b) {
    a.Swap(&b);
  }
  inline void Swap(TosChat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TosChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TosChat* New() const final {
    return CreateMaybeMessage<TosChat>(nullptr);
  }

  TosChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TosChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TosChat& from);
  void MergeFrom(const TosChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TosChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tom.TosChat";
  }
  protected:
  explicit TosChat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string content = 2;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:Tom.TosChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class TocChat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tom.TocChat) */ {
 public:
  inline TocChat() : TocChat(nullptr) {};
  virtual ~TocChat();

  TocChat(const TocChat& from);
  TocChat(TocChat&& from) noexcept
    : TocChat() {
    *this = ::std::move(from);
  }

  inline TocChat& operator=(const TocChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline TocChat& operator=(TocChat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TocChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TocChat* internal_default_instance() {
    return reinterpret_cast<const TocChat*>(
               &_TocChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TocChat& a, TocChat& b) {
    a.Swap(&b);
  }
  inline void Swap(TocChat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TocChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TocChat* New() const final {
    return CreateMaybeMessage<TocChat>(nullptr);
  }

  TocChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TocChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TocChat& from);
  void MergeFrom(const TocChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TocChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tom.TocChat";
  }
  protected:
  explicit TocChat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string content = 2;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:Tom.TocChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class ReqLogin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tom.ReqLogin) */ {
 public:
  inline ReqLogin() : ReqLogin(nullptr) {};
  virtual ~ReqLogin();

  ReqLogin(const ReqLogin& from);
  ReqLogin(ReqLogin&& from) noexcept
    : ReqLogin() {
    *this = ::std::move(from);
  }

  inline ReqLogin& operator=(const ReqLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqLogin& operator=(ReqLogin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqLogin* internal_default_instance() {
    return reinterpret_cast<const ReqLogin*>(
               &_ReqLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReqLogin& a, ReqLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqLogin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqLogin* New() const final {
    return CreateMaybeMessage<ReqLogin>(nullptr);
  }

  ReqLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqLogin& from);
  void MergeFrom(const ReqLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tom.ReqLogin";
  }
  protected:
  explicit ReqLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPasswardFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_account();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_account(
      std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string passward = 2;
  void clear_passward();
  const std::string& passward() const;
  void set_passward(const std::string& value);
  void set_passward(std::string&& value);
  void set_passward(const char* value);
  void set_passward(const char* value, size_t size);
  std::string* mutable_passward();
  std::string* release_passward();
  void set_allocated_passward(std::string* passward);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_passward();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_passward(
      std::string* passward);
  private:
  const std::string& _internal_passward() const;
  void _internal_set_passward(const std::string& value);
  std::string* _internal_mutable_passward();
  public:

  // @@protoc_insertion_point(class_scope:Tom.ReqLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class TestEcho PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tom.TestEcho) */ {
 public:
  inline TestEcho() : TestEcho(nullptr) {};
  virtual ~TestEcho();

  TestEcho(const TestEcho& from);
  TestEcho(TestEcho&& from) noexcept
    : TestEcho() {
    *this = ::std::move(from);
  }

  inline TestEcho& operator=(const TestEcho& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestEcho& operator=(TestEcho&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestEcho& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestEcho* internal_default_instance() {
    return reinterpret_cast<const TestEcho*>(
               &_TestEcho_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TestEcho& a, TestEcho& b) {
    a.Swap(&b);
  }
  inline void Swap(TestEcho* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestEcho* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestEcho* New() const final {
    return CreateMaybeMessage<TestEcho>(nullptr);
  }

  TestEcho* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestEcho>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestEcho& from);
  void MergeFrom(const TestEcho& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestEcho* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tom.TestEcho";
  }
  protected:
  explicit TestEcho(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kMsgFieldNumber = 2,
    kTimeFieldNumber = 3,
  };
  // string index = 1;
  void clear_index();
  const std::string& index() const;
  void set_index(const std::string& value);
  void set_index(std::string&& value);
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  std::string* mutable_index();
  std::string* release_index();
  void set_allocated_index(std::string* index);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_index();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_index(
      std::string* index);
  private:
  const std::string& _internal_index() const;
  void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int64 time = 3;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Tom.TestEcho)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class PlayerBaseInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tom.PlayerBaseInfo) */ {
 public:
  inline PlayerBaseInfo() : PlayerBaseInfo(nullptr) {};
  virtual ~PlayerBaseInfo();

  PlayerBaseInfo(const PlayerBaseInfo& from);
  PlayerBaseInfo(PlayerBaseInfo&& from) noexcept
    : PlayerBaseInfo() {
    *this = ::std::move(from);
  }

  inline PlayerBaseInfo& operator=(const PlayerBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerBaseInfo& operator=(PlayerBaseInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerBaseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerBaseInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerBaseInfo*>(
               &_PlayerBaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlayerBaseInfo& a, PlayerBaseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerBaseInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerBaseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerBaseInfo* New() const final {
    return CreateMaybeMessage<PlayerBaseInfo>(nullptr);
  }

  PlayerBaseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerBaseInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerBaseInfo& from);
  void MergeFrom(const PlayerBaseInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerBaseInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tom.PlayerBaseInfo";
  }
  protected:
  explicit PlayerBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPlayerIDFieldNumber = 1,
  };
  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 PlayerID = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Tom.PlayerBaseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class LoginOk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tom.LoginOk) */ {
 public:
  inline LoginOk() : LoginOk(nullptr) {};
  virtual ~LoginOk();

  LoginOk(const LoginOk& from);
  LoginOk(LoginOk&& from) noexcept
    : LoginOk() {
    *this = ::std::move(from);
  }

  inline LoginOk& operator=(const LoginOk& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginOk& operator=(LoginOk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginOk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginOk* internal_default_instance() {
    return reinterpret_cast<const LoginOk*>(
               &_LoginOk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LoginOk& a, LoginOk& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginOk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginOk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginOk* New() const final {
    return CreateMaybeMessage<LoginOk>(nullptr);
  }

  LoginOk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginOk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginOk& from);
  void MergeFrom(const LoginOk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginOk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tom.LoginOk";
  }
  protected:
  explicit LoginOk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerBaseInfoFieldNumber = 1,
  };
  // .Tom.PlayerBaseInfo playerBaseInfo = 1;
  bool has_playerbaseinfo() const;
  private:
  bool _internal_has_playerbaseinfo() const;
  public:
  void clear_playerbaseinfo();
  const ::Tom::PlayerBaseInfo& playerbaseinfo() const;
  ::Tom::PlayerBaseInfo* release_playerbaseinfo();
  ::Tom::PlayerBaseInfo* mutable_playerbaseinfo();
  void set_allocated_playerbaseinfo(::Tom::PlayerBaseInfo* playerbaseinfo);
  private:
  const ::Tom::PlayerBaseInfo& _internal_playerbaseinfo() const;
  ::Tom::PlayerBaseInfo* _internal_mutable_playerbaseinfo();
  public:
  void unsafe_arena_set_allocated_playerbaseinfo(
      ::Tom::PlayerBaseInfo* playerbaseinfo);
  ::Tom::PlayerBaseInfo* unsafe_arena_release_playerbaseinfo();

  // @@protoc_insertion_point(class_scope:Tom.LoginOk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Tom::PlayerBaseInfo* playerbaseinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class LoginFaild PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tom.LoginFaild) */ {
 public:
  inline LoginFaild() : LoginFaild(nullptr) {};
  virtual ~LoginFaild();

  LoginFaild(const LoginFaild& from);
  LoginFaild(LoginFaild&& from) noexcept
    : LoginFaild() {
    *this = ::std::move(from);
  }

  inline LoginFaild& operator=(const LoginFaild& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginFaild& operator=(LoginFaild&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginFaild& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginFaild* internal_default_instance() {
    return reinterpret_cast<const LoginFaild*>(
               &_LoginFaild_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LoginFaild& a, LoginFaild& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginFaild* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginFaild* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginFaild* New() const final {
    return CreateMaybeMessage<LoginFaild>(nullptr);
  }

  LoginFaild* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginFaild>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginFaild& from);
  void MergeFrom(const LoginFaild& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginFaild* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tom.LoginFaild";
  }
  protected:
  explicit LoginFaild(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LoginFaild_ErrorCode ErrorCode;
  static constexpr ErrorCode AccountOrPasswardNotMatch =
    LoginFaild_ErrorCode_AccountOrPasswardNotMatch;
  static constexpr ErrorCode AccIDInvalid =
    LoginFaild_ErrorCode_AccIDInvalid;
  static constexpr ErrorCode LoginRepeat =
    LoginFaild_ErrorCode_LoginRepeat;
  static constexpr ErrorCode InnerError =
    LoginFaild_ErrorCode_InnerError;
  static inline bool ErrorCode_IsValid(int value) {
    return LoginFaild_ErrorCode_IsValid(value);
  }
  static constexpr ErrorCode ErrorCode_MIN =
    LoginFaild_ErrorCode_ErrorCode_MIN;
  static constexpr ErrorCode ErrorCode_MAX =
    LoginFaild_ErrorCode_ErrorCode_MAX;
  static constexpr int ErrorCode_ARRAYSIZE =
    LoginFaild_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ErrorCode_descriptor() {
    return LoginFaild_ErrorCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ErrorCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ErrorCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ErrorCode_Name.");
    return LoginFaild_ErrorCode_Name(enum_t_value);
  }
  static inline bool ErrorCode_Parse(const std::string& name,
      ErrorCode* value) {
    return LoginFaild_ErrorCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // .Tom.LoginFaild.ErrorCode code = 1;
  void clear_code();
  ::Tom::LoginFaild_ErrorCode code() const;
  void set_code(::Tom::LoginFaild_ErrorCode value);
  private:
  ::Tom::LoginFaild_ErrorCode _internal_code() const;
  void _internal_set_code(::Tom::LoginFaild_ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:Tom.LoginFaild)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SignUpResponse

// int32 errorCode = 1;
inline void SignUpResponse::clear_errorcode() {
  errorcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SignUpResponse::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SignUpResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:Tom.SignUpResponse.errorCode)
  return _internal_errorcode();
}
inline void SignUpResponse::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errorcode_ = value;
}
inline void SignUpResponse::set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:Tom.SignUpResponse.errorCode)
}

// float version = 2;
inline void SignUpResponse::clear_version() {
  version_ = 0;
}
inline float SignUpResponse::_internal_version() const {
  return version_;
}
inline float SignUpResponse::version() const {
  // @@protoc_insertion_point(field_get:Tom.SignUpResponse.version)
  return _internal_version();
}
inline void SignUpResponse::_internal_set_version(float value) {
  
  version_ = value;
}
inline void SignUpResponse::set_version(float value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:Tom.SignUpResponse.version)
}

// -------------------------------------------------------------------

// TosChat

// string name = 1;
inline void TosChat::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TosChat::name() const {
  // @@protoc_insertion_point(field_get:Tom.TosChat.name)
  return _internal_name();
}
inline void TosChat::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Tom.TosChat.name)
}
inline std::string* TosChat::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Tom.TosChat.name)
  return _internal_mutable_name();
}
inline const std::string& TosChat::_internal_name() const {
  return name_.Get();
}
inline void TosChat::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TosChat::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Tom.TosChat.name)
}
inline void TosChat::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Tom.TosChat.name)
}
inline void TosChat::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Tom.TosChat.name)
}
inline std::string* TosChat::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TosChat::release_name() {
  // @@protoc_insertion_point(field_release:Tom.TosChat.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TosChat::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Tom.TosChat.name)
}
inline std::string* TosChat::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Tom.TosChat.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TosChat::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Tom.TosChat.name)
}

// string content = 2;
inline void TosChat::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TosChat::content() const {
  // @@protoc_insertion_point(field_get:Tom.TosChat.content)
  return _internal_content();
}
inline void TosChat::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:Tom.TosChat.content)
}
inline std::string* TosChat::mutable_content() {
  // @@protoc_insertion_point(field_mutable:Tom.TosChat.content)
  return _internal_mutable_content();
}
inline const std::string& TosChat::_internal_content() const {
  return content_.Get();
}
inline void TosChat::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TosChat::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Tom.TosChat.content)
}
inline void TosChat::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Tom.TosChat.content)
}
inline void TosChat::set_content(const char* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Tom.TosChat.content)
}
inline std::string* TosChat::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TosChat::release_content() {
  // @@protoc_insertion_point(field_release:Tom.TosChat.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TosChat::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Tom.TosChat.content)
}
inline std::string* TosChat::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Tom.TosChat.content)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TosChat::unsafe_arena_set_allocated_content(
    std::string* content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (content != nullptr) {
    
  } else {
    
  }
  content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      content, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Tom.TosChat.content)
}

// -------------------------------------------------------------------

// TocChat

// string name = 1;
inline void TocChat::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TocChat::name() const {
  // @@protoc_insertion_point(field_get:Tom.TocChat.name)
  return _internal_name();
}
inline void TocChat::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Tom.TocChat.name)
}
inline std::string* TocChat::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Tom.TocChat.name)
  return _internal_mutable_name();
}
inline const std::string& TocChat::_internal_name() const {
  return name_.Get();
}
inline void TocChat::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TocChat::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Tom.TocChat.name)
}
inline void TocChat::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Tom.TocChat.name)
}
inline void TocChat::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Tom.TocChat.name)
}
inline std::string* TocChat::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TocChat::release_name() {
  // @@protoc_insertion_point(field_release:Tom.TocChat.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TocChat::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Tom.TocChat.name)
}
inline std::string* TocChat::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Tom.TocChat.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TocChat::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Tom.TocChat.name)
}

// string content = 2;
inline void TocChat::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TocChat::content() const {
  // @@protoc_insertion_point(field_get:Tom.TocChat.content)
  return _internal_content();
}
inline void TocChat::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:Tom.TocChat.content)
}
inline std::string* TocChat::mutable_content() {
  // @@protoc_insertion_point(field_mutable:Tom.TocChat.content)
  return _internal_mutable_content();
}
inline const std::string& TocChat::_internal_content() const {
  return content_.Get();
}
inline void TocChat::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TocChat::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Tom.TocChat.content)
}
inline void TocChat::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Tom.TocChat.content)
}
inline void TocChat::set_content(const char* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Tom.TocChat.content)
}
inline std::string* TocChat::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TocChat::release_content() {
  // @@protoc_insertion_point(field_release:Tom.TocChat.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TocChat::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Tom.TocChat.content)
}
inline std::string* TocChat::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Tom.TocChat.content)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TocChat::unsafe_arena_set_allocated_content(
    std::string* content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (content != nullptr) {
    
  } else {
    
  }
  content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      content, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Tom.TocChat.content)
}

// -------------------------------------------------------------------

// ReqLogin

// string account = 1;
inline void ReqLogin::clear_account() {
  account_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReqLogin::account() const {
  // @@protoc_insertion_point(field_get:Tom.ReqLogin.account)
  return _internal_account();
}
inline void ReqLogin::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:Tom.ReqLogin.account)
}
inline std::string* ReqLogin::mutable_account() {
  // @@protoc_insertion_point(field_mutable:Tom.ReqLogin.account)
  return _internal_mutable_account();
}
inline const std::string& ReqLogin::_internal_account() const {
  return account_.Get();
}
inline void ReqLogin::_internal_set_account(const std::string& value) {
  
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReqLogin::set_account(std::string&& value) {
  
  account_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Tom.ReqLogin.account)
}
inline void ReqLogin::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Tom.ReqLogin.account)
}
inline void ReqLogin::set_account(const char* value,
    size_t size) {
  
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Tom.ReqLogin.account)
}
inline std::string* ReqLogin::_internal_mutable_account() {
  
  return account_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReqLogin::release_account() {
  // @@protoc_insertion_point(field_release:Tom.ReqLogin.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReqLogin::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Tom.ReqLogin.account)
}
inline std::string* ReqLogin::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Tom.ReqLogin.account)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return account_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReqLogin::unsafe_arena_set_allocated_account(
    std::string* account) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (account != nullptr) {
    
  } else {
    
  }
  account_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      account, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Tom.ReqLogin.account)
}

// string passward = 2;
inline void ReqLogin::clear_passward() {
  passward_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReqLogin::passward() const {
  // @@protoc_insertion_point(field_get:Tom.ReqLogin.passward)
  return _internal_passward();
}
inline void ReqLogin::set_passward(const std::string& value) {
  _internal_set_passward(value);
  // @@protoc_insertion_point(field_set:Tom.ReqLogin.passward)
}
inline std::string* ReqLogin::mutable_passward() {
  // @@protoc_insertion_point(field_mutable:Tom.ReqLogin.passward)
  return _internal_mutable_passward();
}
inline const std::string& ReqLogin::_internal_passward() const {
  return passward_.Get();
}
inline void ReqLogin::_internal_set_passward(const std::string& value) {
  
  passward_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReqLogin::set_passward(std::string&& value) {
  
  passward_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Tom.ReqLogin.passward)
}
inline void ReqLogin::set_passward(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  passward_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Tom.ReqLogin.passward)
}
inline void ReqLogin::set_passward(const char* value,
    size_t size) {
  
  passward_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Tom.ReqLogin.passward)
}
inline std::string* ReqLogin::_internal_mutable_passward() {
  
  return passward_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReqLogin::release_passward() {
  // @@protoc_insertion_point(field_release:Tom.ReqLogin.passward)
  return passward_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReqLogin::set_allocated_passward(std::string* passward) {
  if (passward != nullptr) {
    
  } else {
    
  }
  passward_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passward,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Tom.ReqLogin.passward)
}
inline std::string* ReqLogin::unsafe_arena_release_passward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Tom.ReqLogin.passward)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return passward_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReqLogin::unsafe_arena_set_allocated_passward(
    std::string* passward) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (passward != nullptr) {
    
  } else {
    
  }
  passward_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      passward, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Tom.ReqLogin.passward)
}

// -------------------------------------------------------------------

// TestEcho

// string index = 1;
inline void TestEcho::clear_index() {
  index_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TestEcho::index() const {
  // @@protoc_insertion_point(field_get:Tom.TestEcho.index)
  return _internal_index();
}
inline void TestEcho::set_index(const std::string& value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Tom.TestEcho.index)
}
inline std::string* TestEcho::mutable_index() {
  // @@protoc_insertion_point(field_mutable:Tom.TestEcho.index)
  return _internal_mutable_index();
}
inline const std::string& TestEcho::_internal_index() const {
  return index_.Get();
}
inline void TestEcho::_internal_set_index(const std::string& value) {
  
  index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TestEcho::set_index(std::string&& value) {
  
  index_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Tom.TestEcho.index)
}
inline void TestEcho::set_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Tom.TestEcho.index)
}
inline void TestEcho::set_index(const char* value,
    size_t size) {
  
  index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Tom.TestEcho.index)
}
inline std::string* TestEcho::_internal_mutable_index() {
  
  return index_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TestEcho::release_index() {
  // @@protoc_insertion_point(field_release:Tom.TestEcho.index)
  return index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestEcho::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Tom.TestEcho.index)
}
inline std::string* TestEcho::unsafe_arena_release_index() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Tom.TestEcho.index)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return index_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TestEcho::unsafe_arena_set_allocated_index(
    std::string* index) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (index != nullptr) {
    
  } else {
    
  }
  index_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      index, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Tom.TestEcho.index)
}

// string msg = 2;
inline void TestEcho::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TestEcho::msg() const {
  // @@protoc_insertion_point(field_get:Tom.TestEcho.msg)
  return _internal_msg();
}
inline void TestEcho::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:Tom.TestEcho.msg)
}
inline std::string* TestEcho::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:Tom.TestEcho.msg)
  return _internal_mutable_msg();
}
inline const std::string& TestEcho::_internal_msg() const {
  return msg_.Get();
}
inline void TestEcho::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TestEcho::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Tom.TestEcho.msg)
}
inline void TestEcho::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Tom.TestEcho.msg)
}
inline void TestEcho::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Tom.TestEcho.msg)
}
inline std::string* TestEcho::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TestEcho::release_msg() {
  // @@protoc_insertion_point(field_release:Tom.TestEcho.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestEcho::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Tom.TestEcho.msg)
}
inline std::string* TestEcho::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Tom.TestEcho.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TestEcho::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Tom.TestEcho.msg)
}

// int64 time = 3;
inline void TestEcho::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestEcho::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestEcho::time() const {
  // @@protoc_insertion_point(field_get:Tom.TestEcho.time)
  return _internal_time();
}
inline void TestEcho::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void TestEcho::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Tom.TestEcho.time)
}

// -------------------------------------------------------------------

// PlayerBaseInfo

// uint32 PlayerID = 1;
inline void PlayerBaseInfo::clear_playerid() {
  playerid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerBaseInfo::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerBaseInfo::playerid() const {
  // @@protoc_insertion_point(field_get:Tom.PlayerBaseInfo.PlayerID)
  return _internal_playerid();
}
inline void PlayerBaseInfo::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  playerid_ = value;
}
inline void PlayerBaseInfo::set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Tom.PlayerBaseInfo.PlayerID)
}

// string Name = 2;
inline void PlayerBaseInfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayerBaseInfo::name() const {
  // @@protoc_insertion_point(field_get:Tom.PlayerBaseInfo.Name)
  return _internal_name();
}
inline void PlayerBaseInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Tom.PlayerBaseInfo.Name)
}
inline std::string* PlayerBaseInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Tom.PlayerBaseInfo.Name)
  return _internal_mutable_name();
}
inline const std::string& PlayerBaseInfo::_internal_name() const {
  return name_.Get();
}
inline void PlayerBaseInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerBaseInfo::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Tom.PlayerBaseInfo.Name)
}
inline void PlayerBaseInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Tom.PlayerBaseInfo.Name)
}
inline void PlayerBaseInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Tom.PlayerBaseInfo.Name)
}
inline std::string* PlayerBaseInfo::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerBaseInfo::release_name() {
  // @@protoc_insertion_point(field_release:Tom.PlayerBaseInfo.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerBaseInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Tom.PlayerBaseInfo.Name)
}
inline std::string* PlayerBaseInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Tom.PlayerBaseInfo.Name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayerBaseInfo::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Tom.PlayerBaseInfo.Name)
}

// -------------------------------------------------------------------

// LoginOk

// .Tom.PlayerBaseInfo playerBaseInfo = 1;
inline bool LoginOk::_internal_has_playerbaseinfo() const {
  return this != internal_default_instance() && playerbaseinfo_ != nullptr;
}
inline bool LoginOk::has_playerbaseinfo() const {
  return _internal_has_playerbaseinfo();
}
inline void LoginOk::clear_playerbaseinfo() {
  if (GetArena() == nullptr && playerbaseinfo_ != nullptr) {
    delete playerbaseinfo_;
  }
  playerbaseinfo_ = nullptr;
}
inline const ::Tom::PlayerBaseInfo& LoginOk::_internal_playerbaseinfo() const {
  const ::Tom::PlayerBaseInfo* p = playerbaseinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tom::PlayerBaseInfo*>(
      &::Tom::_PlayerBaseInfo_default_instance_);
}
inline const ::Tom::PlayerBaseInfo& LoginOk::playerbaseinfo() const {
  // @@protoc_insertion_point(field_get:Tom.LoginOk.playerBaseInfo)
  return _internal_playerbaseinfo();
}
inline void LoginOk::unsafe_arena_set_allocated_playerbaseinfo(
    ::Tom::PlayerBaseInfo* playerbaseinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerbaseinfo_);
  }
  playerbaseinfo_ = playerbaseinfo;
  if (playerbaseinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Tom.LoginOk.playerBaseInfo)
}
inline ::Tom::PlayerBaseInfo* LoginOk::release_playerbaseinfo() {
  auto temp = unsafe_arena_release_playerbaseinfo();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Tom::PlayerBaseInfo* LoginOk::unsafe_arena_release_playerbaseinfo() {
  // @@protoc_insertion_point(field_release:Tom.LoginOk.playerBaseInfo)
  
  ::Tom::PlayerBaseInfo* temp = playerbaseinfo_;
  playerbaseinfo_ = nullptr;
  return temp;
}
inline ::Tom::PlayerBaseInfo* LoginOk::_internal_mutable_playerbaseinfo() {
  
  if (playerbaseinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tom::PlayerBaseInfo>(GetArena());
    playerbaseinfo_ = p;
  }
  return playerbaseinfo_;
}
inline ::Tom::PlayerBaseInfo* LoginOk::mutable_playerbaseinfo() {
  // @@protoc_insertion_point(field_mutable:Tom.LoginOk.playerBaseInfo)
  return _internal_mutable_playerbaseinfo();
}
inline void LoginOk::set_allocated_playerbaseinfo(::Tom::PlayerBaseInfo* playerbaseinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete playerbaseinfo_;
  }
  if (playerbaseinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(playerbaseinfo);
    if (message_arena != submessage_arena) {
      playerbaseinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerbaseinfo, submessage_arena);
    }
    
  } else {
    
  }
  playerbaseinfo_ = playerbaseinfo;
  // @@protoc_insertion_point(field_set_allocated:Tom.LoginOk.playerBaseInfo)
}

// -------------------------------------------------------------------

// LoginFaild

// .Tom.LoginFaild.ErrorCode code = 1;
inline void LoginFaild::clear_code() {
  code_ = 0;
}
inline ::Tom::LoginFaild_ErrorCode LoginFaild::_internal_code() const {
  return static_cast< ::Tom::LoginFaild_ErrorCode >(code_);
}
inline ::Tom::LoginFaild_ErrorCode LoginFaild::code() const {
  // @@protoc_insertion_point(field_get:Tom.LoginFaild.code)
  return _internal_code();
}
inline void LoginFaild::_internal_set_code(::Tom::LoginFaild_ErrorCode value) {
  
  code_ = value;
}
inline void LoginFaild::set_code(::Tom::LoginFaild_ErrorCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:Tom.LoginFaild.code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Tom

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Tom::LoginFaild_ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Tom::LoginFaild_ErrorCode>() {
  return ::Tom::LoginFaild_ErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_login_2eproto

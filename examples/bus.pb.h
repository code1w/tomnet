// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bus.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bus_2eproto;
namespace bus {
class CommonMessage;
class CommonMessageDefaultTypeInternal;
extern CommonMessageDefaultTypeInternal _CommonMessage_default_instance_;
class DelSvrInfo;
class DelSvrInfoDefaultTypeInternal;
extern DelSvrInfoDefaultTypeInternal _DelSvrInfo_default_instance_;
class NewSvrInfo;
class NewSvrInfoDefaultTypeInternal;
extern NewSvrInfoDefaultTypeInternal _NewSvrInfo_default_instance_;
class Ping;
class PingDefaultTypeInternal;
extern PingDefaultTypeInternal _Ping_default_instance_;
class RegSvrInfo;
class RegSvrInfoDefaultTypeInternal;
extern RegSvrInfoDefaultTypeInternal _RegSvrInfo_default_instance_;
class RouteInfo;
class RouteInfoDefaultTypeInternal;
extern RouteInfoDefaultTypeInternal _RouteInfo_default_instance_;
}  // namespace bus
PROTOBUF_NAMESPACE_OPEN
template<> ::bus::CommonMessage* Arena::CreateMaybeMessage<::bus::CommonMessage>(Arena*);
template<> ::bus::DelSvrInfo* Arena::CreateMaybeMessage<::bus::DelSvrInfo>(Arena*);
template<> ::bus::NewSvrInfo* Arena::CreateMaybeMessage<::bus::NewSvrInfo>(Arena*);
template<> ::bus::Ping* Arena::CreateMaybeMessage<::bus::Ping>(Arena*);
template<> ::bus::RegSvrInfo* Arena::CreateMaybeMessage<::bus::RegSvrInfo>(Arena*);
template<> ::bus::RouteInfo* Arena::CreateMaybeMessage<::bus::RouteInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bus {

enum Cmd : int {
  NONE = 0,
  REG_SVR = 1,
  PING = 2,
  NEW_SVR = 3,
  DEL_SVR = 4,
  ROUTE_MSG = 5,
  Cmd_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Cmd_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Cmd_IsValid(int value);
constexpr Cmd Cmd_MIN = NONE;
constexpr Cmd Cmd_MAX = ROUTE_MSG;
constexpr int Cmd_ARRAYSIZE = Cmd_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cmd_descriptor();
template<typename T>
inline const std::string& Cmd_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cmd>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cmd_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cmd_descriptor(), enum_t_value);
}
inline bool Cmd_Parse(
    const std::string& name, Cmd* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cmd>(
    Cmd_descriptor(), name, value);
}
enum ErrorCode : int {
  SUCCESS = 0,
  SYSTEM_UNKNOW = 999,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ErrorCode_IsValid(int value);
constexpr ErrorCode ErrorCode_MIN = SUCCESS;
constexpr ErrorCode ErrorCode_MAX = SYSTEM_UNKNOW;
constexpr int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor();
template<typename T>
inline const std::string& ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorCode_descriptor(), enum_t_value);
}
inline bool ErrorCode_Parse(
    const std::string& name, ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class Ping PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bus.Ping) */ {
 public:
  inline Ping() : Ping(nullptr) {};
  virtual ~Ping();

  Ping(const Ping& from);
  Ping(Ping&& from) noexcept
    : Ping() {
    *this = ::std::move(from);
  }

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ping& operator=(Ping&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ping* internal_default_instance() {
    return reinterpret_cast<const Ping*>(
               &_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ping& a, Ping& b) {
    a.Swap(&b);
  }
  inline void Swap(Ping* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ping* New() const final {
    return CreateMaybeMessage<Ping>(nullptr);
  }

  Ping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ping& from);
  void MergeFrom(const Ping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bus.Ping";
  }
  protected:
  explicit Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bus_2eproto);
    return ::descriptor_table_bus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bus.Ping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bus_2eproto;
};
// -------------------------------------------------------------------

class RegSvrInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bus.RegSvrInfo) */ {
 public:
  inline RegSvrInfo() : RegSvrInfo(nullptr) {};
  virtual ~RegSvrInfo();

  RegSvrInfo(const RegSvrInfo& from);
  RegSvrInfo(RegSvrInfo&& from) noexcept
    : RegSvrInfo() {
    *this = ::std::move(from);
  }

  inline RegSvrInfo& operator=(const RegSvrInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegSvrInfo& operator=(RegSvrInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegSvrInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegSvrInfo* internal_default_instance() {
    return reinterpret_cast<const RegSvrInfo*>(
               &_RegSvrInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegSvrInfo& a, RegSvrInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RegSvrInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegSvrInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegSvrInfo* New() const final {
    return CreateMaybeMessage<RegSvrInfo>(nullptr);
  }

  RegSvrInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegSvrInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegSvrInfo& from);
  void MergeFrom(const RegSvrInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegSvrInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bus.RegSvrInfo";
  }
  protected:
  explicit RegSvrInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bus_2eproto);
    return ::descriptor_table_bus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
    kDestFieldNumber = 2,
  };
  // .bus.NewSvrInfo src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const ::bus::NewSvrInfo& src() const;
  ::bus::NewSvrInfo* release_src();
  ::bus::NewSvrInfo* mutable_src();
  void set_allocated_src(::bus::NewSvrInfo* src);
  private:
  const ::bus::NewSvrInfo& _internal_src() const;
  ::bus::NewSvrInfo* _internal_mutable_src();
  public:
  void unsafe_arena_set_allocated_src(
      ::bus::NewSvrInfo* src);
  ::bus::NewSvrInfo* unsafe_arena_release_src();

  // .bus.NewSvrInfo dest = 2;
  bool has_dest() const;
  private:
  bool _internal_has_dest() const;
  public:
  void clear_dest();
  const ::bus::NewSvrInfo& dest() const;
  ::bus::NewSvrInfo* release_dest();
  ::bus::NewSvrInfo* mutable_dest();
  void set_allocated_dest(::bus::NewSvrInfo* dest);
  private:
  const ::bus::NewSvrInfo& _internal_dest() const;
  ::bus::NewSvrInfo* _internal_mutable_dest();
  public:
  void unsafe_arena_set_allocated_dest(
      ::bus::NewSvrInfo* dest);
  ::bus::NewSvrInfo* unsafe_arena_release_dest();

  // @@protoc_insertion_point(class_scope:bus.RegSvrInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bus::NewSvrInfo* src_;
  ::bus::NewSvrInfo* dest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bus_2eproto;
};
// -------------------------------------------------------------------

class NewSvrInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bus.NewSvrInfo) */ {
 public:
  inline NewSvrInfo() : NewSvrInfo(nullptr) {};
  virtual ~NewSvrInfo();

  NewSvrInfo(const NewSvrInfo& from);
  NewSvrInfo(NewSvrInfo&& from) noexcept
    : NewSvrInfo() {
    *this = ::std::move(from);
  }

  inline NewSvrInfo& operator=(const NewSvrInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewSvrInfo& operator=(NewSvrInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewSvrInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewSvrInfo* internal_default_instance() {
    return reinterpret_cast<const NewSvrInfo*>(
               &_NewSvrInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NewSvrInfo& a, NewSvrInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NewSvrInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewSvrInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewSvrInfo* New() const final {
    return CreateMaybeMessage<NewSvrInfo>(nullptr);
  }

  NewSvrInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewSvrInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewSvrInfo& from);
  void MergeFrom(const NewSvrInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewSvrInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bus.NewSvrInfo";
  }
  protected:
  explicit NewSvrInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bus_2eproto);
    return ::descriptor_table_bus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 2,
    kPortFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string port = 3;
  void clear_port();
  const std::string& port() const;
  void set_port(const std::string& value);
  void set_port(std::string&& value);
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  std::string* mutable_port();
  std::string* release_port();
  void set_allocated_port(std::string* port);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_port();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_port(
      std::string* port);
  private:
  const std::string& _internal_port() const;
  void _internal_set_port(const std::string& value);
  std::string* _internal_mutable_port();
  public:

  // int64 Id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:bus.NewSvrInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bus_2eproto;
};
// -------------------------------------------------------------------

class DelSvrInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bus.DelSvrInfo) */ {
 public:
  inline DelSvrInfo() : DelSvrInfo(nullptr) {};
  virtual ~DelSvrInfo();

  DelSvrInfo(const DelSvrInfo& from);
  DelSvrInfo(DelSvrInfo&& from) noexcept
    : DelSvrInfo() {
    *this = ::std::move(from);
  }

  inline DelSvrInfo& operator=(const DelSvrInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelSvrInfo& operator=(DelSvrInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DelSvrInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelSvrInfo* internal_default_instance() {
    return reinterpret_cast<const DelSvrInfo*>(
               &_DelSvrInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DelSvrInfo& a, DelSvrInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DelSvrInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelSvrInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelSvrInfo* New() const final {
    return CreateMaybeMessage<DelSvrInfo>(nullptr);
  }

  DelSvrInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelSvrInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelSvrInfo& from);
  void MergeFrom(const DelSvrInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelSvrInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bus.DelSvrInfo";
  }
  protected:
  explicit DelSvrInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bus_2eproto);
    return ::descriptor_table_bus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 Id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:bus.DelSvrInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bus_2eproto;
};
// -------------------------------------------------------------------

class RouteInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bus.RouteInfo) */ {
 public:
  inline RouteInfo() : RouteInfo(nullptr) {};
  virtual ~RouteInfo();

  RouteInfo(const RouteInfo& from);
  RouteInfo(RouteInfo&& from) noexcept
    : RouteInfo() {
    *this = ::std::move(from);
  }

  inline RouteInfo& operator=(const RouteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteInfo& operator=(RouteInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteInfo* internal_default_instance() {
    return reinterpret_cast<const RouteInfo*>(
               &_RouteInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RouteInfo& a, RouteInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteInfo* New() const final {
    return CreateMaybeMessage<RouteInfo>(nullptr);
  }

  RouteInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteInfo& from);
  void MergeFrom(const RouteInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bus.RouteInfo";
  }
  protected:
  explicit RouteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bus_2eproto);
    return ::descriptor_table_bus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 4,
    kDestSvrFieldNumber = 1,
    kDestStFieldNumber = 2,
  };
  // bytes msg = 4;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int64 destSvr = 1;
  void clear_destsvr();
  ::PROTOBUF_NAMESPACE_ID::int64 destsvr() const;
  void set_destsvr(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_destsvr() const;
  void _internal_set_destsvr(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 destSt = 2;
  void clear_destst();
  ::PROTOBUF_NAMESPACE_ID::int64 destst() const;
  void set_destst(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_destst() const;
  void _internal_set_destst(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:bus.RouteInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int64 destsvr_;
  ::PROTOBUF_NAMESPACE_ID::int64 destst_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bus_2eproto;
};
// -------------------------------------------------------------------

class CommonMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bus.CommonMessage) */ {
 public:
  inline CommonMessage() : CommonMessage(nullptr) {};
  virtual ~CommonMessage();

  CommonMessage(const CommonMessage& from);
  CommonMessage(CommonMessage&& from) noexcept
    : CommonMessage() {
    *this = ::std::move(from);
  }

  inline CommonMessage& operator=(const CommonMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonMessage& operator=(CommonMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonMessage* internal_default_instance() {
    return reinterpret_cast<const CommonMessage*>(
               &_CommonMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CommonMessage& a, CommonMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonMessage* New() const final {
    return CreateMaybeMessage<CommonMessage>(nullptr);
  }

  CommonMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonMessage& from);
  void MergeFrom(const CommonMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bus.CommonMessage";
  }
  protected:
  explicit CommonMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bus_2eproto);
    return ::descriptor_table_bus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPingFieldNumber = 10,
    kSvrInfoFieldNumber = 11,
    kNewSvrInfoFieldNumber = 12,
    kRouteInfoFieldNumber = 13,
    kDelSvrInfoFieldNumber = 14,
    kCodeFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
  };
  // .bus.Ping ping = 10;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  const ::bus::Ping& ping() const;
  ::bus::Ping* release_ping();
  ::bus::Ping* mutable_ping();
  void set_allocated_ping(::bus::Ping* ping);
  private:
  const ::bus::Ping& _internal_ping() const;
  ::bus::Ping* _internal_mutable_ping();
  public:
  void unsafe_arena_set_allocated_ping(
      ::bus::Ping* ping);
  ::bus::Ping* unsafe_arena_release_ping();

  // .bus.RegSvrInfo svrInfo = 11;
  bool has_svrinfo() const;
  private:
  bool _internal_has_svrinfo() const;
  public:
  void clear_svrinfo();
  const ::bus::RegSvrInfo& svrinfo() const;
  ::bus::RegSvrInfo* release_svrinfo();
  ::bus::RegSvrInfo* mutable_svrinfo();
  void set_allocated_svrinfo(::bus::RegSvrInfo* svrinfo);
  private:
  const ::bus::RegSvrInfo& _internal_svrinfo() const;
  ::bus::RegSvrInfo* _internal_mutable_svrinfo();
  public:
  void unsafe_arena_set_allocated_svrinfo(
      ::bus::RegSvrInfo* svrinfo);
  ::bus::RegSvrInfo* unsafe_arena_release_svrinfo();

  // .bus.NewSvrInfo newSvrInfo = 12;
  bool has_newsvrinfo() const;
  private:
  bool _internal_has_newsvrinfo() const;
  public:
  void clear_newsvrinfo();
  const ::bus::NewSvrInfo& newsvrinfo() const;
  ::bus::NewSvrInfo* release_newsvrinfo();
  ::bus::NewSvrInfo* mutable_newsvrinfo();
  void set_allocated_newsvrinfo(::bus::NewSvrInfo* newsvrinfo);
  private:
  const ::bus::NewSvrInfo& _internal_newsvrinfo() const;
  ::bus::NewSvrInfo* _internal_mutable_newsvrinfo();
  public:
  void unsafe_arena_set_allocated_newsvrinfo(
      ::bus::NewSvrInfo* newsvrinfo);
  ::bus::NewSvrInfo* unsafe_arena_release_newsvrinfo();

  // .bus.RouteInfo routeInfo = 13;
  bool has_routeinfo() const;
  private:
  bool _internal_has_routeinfo() const;
  public:
  void clear_routeinfo();
  const ::bus::RouteInfo& routeinfo() const;
  ::bus::RouteInfo* release_routeinfo();
  ::bus::RouteInfo* mutable_routeinfo();
  void set_allocated_routeinfo(::bus::RouteInfo* routeinfo);
  private:
  const ::bus::RouteInfo& _internal_routeinfo() const;
  ::bus::RouteInfo* _internal_mutable_routeinfo();
  public:
  void unsafe_arena_set_allocated_routeinfo(
      ::bus::RouteInfo* routeinfo);
  ::bus::RouteInfo* unsafe_arena_release_routeinfo();

  // .bus.DelSvrInfo delSvrInfo = 14;
  bool has_delsvrinfo() const;
  private:
  bool _internal_has_delsvrinfo() const;
  public:
  void clear_delsvrinfo();
  const ::bus::DelSvrInfo& delsvrinfo() const;
  ::bus::DelSvrInfo* release_delsvrinfo();
  ::bus::DelSvrInfo* mutable_delsvrinfo();
  void set_allocated_delsvrinfo(::bus::DelSvrInfo* delsvrinfo);
  private:
  const ::bus::DelSvrInfo& _internal_delsvrinfo() const;
  ::bus::DelSvrInfo* _internal_mutable_delsvrinfo();
  public:
  void unsafe_arena_set_allocated_delsvrinfo(
      ::bus::DelSvrInfo* delsvrinfo);
  ::bus::DelSvrInfo* unsafe_arena_release_delsvrinfo();

  // .bus.Cmd code = 1;
  void clear_code();
  ::bus::Cmd code() const;
  void set_code(::bus::Cmd value);
  private:
  ::bus::Cmd _internal_code() const;
  void _internal_set_code(::bus::Cmd value);
  public:

  // .bus.ErrorCode errorCode = 2;
  void clear_errorcode();
  ::bus::ErrorCode errorcode() const;
  void set_errorcode(::bus::ErrorCode value);
  private:
  ::bus::ErrorCode _internal_errorcode() const;
  void _internal_set_errorcode(::bus::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:bus.CommonMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bus::Ping* ping_;
  ::bus::RegSvrInfo* svrinfo_;
  ::bus::NewSvrInfo* newsvrinfo_;
  ::bus::RouteInfo* routeinfo_;
  ::bus::DelSvrInfo* delsvrinfo_;
  int code_;
  int errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ping

// -------------------------------------------------------------------

// RegSvrInfo

// .bus.NewSvrInfo src = 1;
inline bool RegSvrInfo::_internal_has_src() const {
  return this != internal_default_instance() && src_ != nullptr;
}
inline bool RegSvrInfo::has_src() const {
  return _internal_has_src();
}
inline void RegSvrInfo::clear_src() {
  if (GetArena() == nullptr && src_ != nullptr) {
    delete src_;
  }
  src_ = nullptr;
}
inline const ::bus::NewSvrInfo& RegSvrInfo::_internal_src() const {
  const ::bus::NewSvrInfo* p = src_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bus::NewSvrInfo*>(
      &::bus::_NewSvrInfo_default_instance_);
}
inline const ::bus::NewSvrInfo& RegSvrInfo::src() const {
  // @@protoc_insertion_point(field_get:bus.RegSvrInfo.src)
  return _internal_src();
}
inline void RegSvrInfo::unsafe_arena_set_allocated_src(
    ::bus::NewSvrInfo* src) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_);
  }
  src_ = src;
  if (src) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bus.RegSvrInfo.src)
}
inline ::bus::NewSvrInfo* RegSvrInfo::release_src() {
  auto temp = unsafe_arena_release_src();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bus::NewSvrInfo* RegSvrInfo::unsafe_arena_release_src() {
  // @@protoc_insertion_point(field_release:bus.RegSvrInfo.src)
  
  ::bus::NewSvrInfo* temp = src_;
  src_ = nullptr;
  return temp;
}
inline ::bus::NewSvrInfo* RegSvrInfo::_internal_mutable_src() {
  
  if (src_ == nullptr) {
    auto* p = CreateMaybeMessage<::bus::NewSvrInfo>(GetArena());
    src_ = p;
  }
  return src_;
}
inline ::bus::NewSvrInfo* RegSvrInfo::mutable_src() {
  // @@protoc_insertion_point(field_mutable:bus.RegSvrInfo.src)
  return _internal_mutable_src();
}
inline void RegSvrInfo::set_allocated_src(::bus::NewSvrInfo* src) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete src_;
  }
  if (src) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(src);
    if (message_arena != submessage_arena) {
      src = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, src, submessage_arena);
    }
    
  } else {
    
  }
  src_ = src;
  // @@protoc_insertion_point(field_set_allocated:bus.RegSvrInfo.src)
}

// .bus.NewSvrInfo dest = 2;
inline bool RegSvrInfo::_internal_has_dest() const {
  return this != internal_default_instance() && dest_ != nullptr;
}
inline bool RegSvrInfo::has_dest() const {
  return _internal_has_dest();
}
inline void RegSvrInfo::clear_dest() {
  if (GetArena() == nullptr && dest_ != nullptr) {
    delete dest_;
  }
  dest_ = nullptr;
}
inline const ::bus::NewSvrInfo& RegSvrInfo::_internal_dest() const {
  const ::bus::NewSvrInfo* p = dest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bus::NewSvrInfo*>(
      &::bus::_NewSvrInfo_default_instance_);
}
inline const ::bus::NewSvrInfo& RegSvrInfo::dest() const {
  // @@protoc_insertion_point(field_get:bus.RegSvrInfo.dest)
  return _internal_dest();
}
inline void RegSvrInfo::unsafe_arena_set_allocated_dest(
    ::bus::NewSvrInfo* dest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_);
  }
  dest_ = dest;
  if (dest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bus.RegSvrInfo.dest)
}
inline ::bus::NewSvrInfo* RegSvrInfo::release_dest() {
  auto temp = unsafe_arena_release_dest();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bus::NewSvrInfo* RegSvrInfo::unsafe_arena_release_dest() {
  // @@protoc_insertion_point(field_release:bus.RegSvrInfo.dest)
  
  ::bus::NewSvrInfo* temp = dest_;
  dest_ = nullptr;
  return temp;
}
inline ::bus::NewSvrInfo* RegSvrInfo::_internal_mutable_dest() {
  
  if (dest_ == nullptr) {
    auto* p = CreateMaybeMessage<::bus::NewSvrInfo>(GetArena());
    dest_ = p;
  }
  return dest_;
}
inline ::bus::NewSvrInfo* RegSvrInfo::mutable_dest() {
  // @@protoc_insertion_point(field_mutable:bus.RegSvrInfo.dest)
  return _internal_mutable_dest();
}
inline void RegSvrInfo::set_allocated_dest(::bus::NewSvrInfo* dest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dest_;
  }
  if (dest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dest);
    if (message_arena != submessage_arena) {
      dest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dest, submessage_arena);
    }
    
  } else {
    
  }
  dest_ = dest;
  // @@protoc_insertion_point(field_set_allocated:bus.RegSvrInfo.dest)
}

// -------------------------------------------------------------------

// NewSvrInfo

// int64 Id = 1;
inline void NewSvrInfo::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NewSvrInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NewSvrInfo::id() const {
  // @@protoc_insertion_point(field_get:bus.NewSvrInfo.Id)
  return _internal_id();
}
inline void NewSvrInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void NewSvrInfo::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bus.NewSvrInfo.Id)
}

// string ip = 2;
inline void NewSvrInfo::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NewSvrInfo::ip() const {
  // @@protoc_insertion_point(field_get:bus.NewSvrInfo.ip)
  return _internal_ip();
}
inline void NewSvrInfo::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:bus.NewSvrInfo.ip)
}
inline std::string* NewSvrInfo::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:bus.NewSvrInfo.ip)
  return _internal_mutable_ip();
}
inline const std::string& NewSvrInfo::_internal_ip() const {
  return ip_.Get();
}
inline void NewSvrInfo::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NewSvrInfo::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bus.NewSvrInfo.ip)
}
inline void NewSvrInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bus.NewSvrInfo.ip)
}
inline void NewSvrInfo::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bus.NewSvrInfo.ip)
}
inline std::string* NewSvrInfo::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NewSvrInfo::release_ip() {
  // @@protoc_insertion_point(field_release:bus.NewSvrInfo.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewSvrInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bus.NewSvrInfo.ip)
}
inline std::string* NewSvrInfo::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bus.NewSvrInfo.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NewSvrInfo::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bus.NewSvrInfo.ip)
}

// string port = 3;
inline void NewSvrInfo::clear_port() {
  port_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NewSvrInfo::port() const {
  // @@protoc_insertion_point(field_get:bus.NewSvrInfo.port)
  return _internal_port();
}
inline void NewSvrInfo::set_port(const std::string& value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:bus.NewSvrInfo.port)
}
inline std::string* NewSvrInfo::mutable_port() {
  // @@protoc_insertion_point(field_mutable:bus.NewSvrInfo.port)
  return _internal_mutable_port();
}
inline const std::string& NewSvrInfo::_internal_port() const {
  return port_.Get();
}
inline void NewSvrInfo::_internal_set_port(const std::string& value) {
  
  port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NewSvrInfo::set_port(std::string&& value) {
  
  port_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bus.NewSvrInfo.port)
}
inline void NewSvrInfo::set_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bus.NewSvrInfo.port)
}
inline void NewSvrInfo::set_port(const char* value,
    size_t size) {
  
  port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bus.NewSvrInfo.port)
}
inline std::string* NewSvrInfo::_internal_mutable_port() {
  
  return port_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NewSvrInfo::release_port() {
  // @@protoc_insertion_point(field_release:bus.NewSvrInfo.port)
  return port_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewSvrInfo::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    
  } else {
    
  }
  port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bus.NewSvrInfo.port)
}
inline std::string* NewSvrInfo::unsafe_arena_release_port() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bus.NewSvrInfo.port)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return port_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NewSvrInfo::unsafe_arena_set_allocated_port(
    std::string* port) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (port != nullptr) {
    
  } else {
    
  }
  port_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      port, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bus.NewSvrInfo.port)
}

// -------------------------------------------------------------------

// DelSvrInfo

// int64 Id = 1;
inline void DelSvrInfo::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DelSvrInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DelSvrInfo::id() const {
  // @@protoc_insertion_point(field_get:bus.DelSvrInfo.Id)
  return _internal_id();
}
inline void DelSvrInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void DelSvrInfo::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bus.DelSvrInfo.Id)
}

// -------------------------------------------------------------------

// RouteInfo

// int64 destSvr = 1;
inline void RouteInfo::clear_destsvr() {
  destsvr_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RouteInfo::_internal_destsvr() const {
  return destsvr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RouteInfo::destsvr() const {
  // @@protoc_insertion_point(field_get:bus.RouteInfo.destSvr)
  return _internal_destsvr();
}
inline void RouteInfo::_internal_set_destsvr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  destsvr_ = value;
}
inline void RouteInfo::set_destsvr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_destsvr(value);
  // @@protoc_insertion_point(field_set:bus.RouteInfo.destSvr)
}

// int64 destSt = 2;
inline void RouteInfo::clear_destst() {
  destst_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RouteInfo::_internal_destst() const {
  return destst_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RouteInfo::destst() const {
  // @@protoc_insertion_point(field_get:bus.RouteInfo.destSt)
  return _internal_destst();
}
inline void RouteInfo::_internal_set_destst(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  destst_ = value;
}
inline void RouteInfo::set_destst(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_destst(value);
  // @@protoc_insertion_point(field_set:bus.RouteInfo.destSt)
}

// bytes msg = 4;
inline void RouteInfo::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RouteInfo::msg() const {
  // @@protoc_insertion_point(field_get:bus.RouteInfo.msg)
  return _internal_msg();
}
inline void RouteInfo::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:bus.RouteInfo.msg)
}
inline std::string* RouteInfo::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:bus.RouteInfo.msg)
  return _internal_mutable_msg();
}
inline const std::string& RouteInfo::_internal_msg() const {
  return msg_.Get();
}
inline void RouteInfo::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RouteInfo::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bus.RouteInfo.msg)
}
inline void RouteInfo::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bus.RouteInfo.msg)
}
inline void RouteInfo::set_msg(const void* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bus.RouteInfo.msg)
}
inline std::string* RouteInfo::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RouteInfo::release_msg() {
  // @@protoc_insertion_point(field_release:bus.RouteInfo.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RouteInfo::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bus.RouteInfo.msg)
}
inline std::string* RouteInfo::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bus.RouteInfo.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RouteInfo::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bus.RouteInfo.msg)
}

// -------------------------------------------------------------------

// CommonMessage

// .bus.Cmd code = 1;
inline void CommonMessage::clear_code() {
  code_ = 0;
}
inline ::bus::Cmd CommonMessage::_internal_code() const {
  return static_cast< ::bus::Cmd >(code_);
}
inline ::bus::Cmd CommonMessage::code() const {
  // @@protoc_insertion_point(field_get:bus.CommonMessage.code)
  return _internal_code();
}
inline void CommonMessage::_internal_set_code(::bus::Cmd value) {
  
  code_ = value;
}
inline void CommonMessage::set_code(::bus::Cmd value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:bus.CommonMessage.code)
}

// .bus.ErrorCode errorCode = 2;
inline void CommonMessage::clear_errorcode() {
  errorcode_ = 0;
}
inline ::bus::ErrorCode CommonMessage::_internal_errorcode() const {
  return static_cast< ::bus::ErrorCode >(errorcode_);
}
inline ::bus::ErrorCode CommonMessage::errorcode() const {
  // @@protoc_insertion_point(field_get:bus.CommonMessage.errorCode)
  return _internal_errorcode();
}
inline void CommonMessage::_internal_set_errorcode(::bus::ErrorCode value) {
  
  errorcode_ = value;
}
inline void CommonMessage::set_errorcode(::bus::ErrorCode value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:bus.CommonMessage.errorCode)
}

// .bus.Ping ping = 10;
inline bool CommonMessage::_internal_has_ping() const {
  return this != internal_default_instance() && ping_ != nullptr;
}
inline bool CommonMessage::has_ping() const {
  return _internal_has_ping();
}
inline void CommonMessage::clear_ping() {
  if (GetArena() == nullptr && ping_ != nullptr) {
    delete ping_;
  }
  ping_ = nullptr;
}
inline const ::bus::Ping& CommonMessage::_internal_ping() const {
  const ::bus::Ping* p = ping_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bus::Ping*>(
      &::bus::_Ping_default_instance_);
}
inline const ::bus::Ping& CommonMessage::ping() const {
  // @@protoc_insertion_point(field_get:bus.CommonMessage.ping)
  return _internal_ping();
}
inline void CommonMessage::unsafe_arena_set_allocated_ping(
    ::bus::Ping* ping) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping_);
  }
  ping_ = ping;
  if (ping) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bus.CommonMessage.ping)
}
inline ::bus::Ping* CommonMessage::release_ping() {
  auto temp = unsafe_arena_release_ping();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bus::Ping* CommonMessage::unsafe_arena_release_ping() {
  // @@protoc_insertion_point(field_release:bus.CommonMessage.ping)
  
  ::bus::Ping* temp = ping_;
  ping_ = nullptr;
  return temp;
}
inline ::bus::Ping* CommonMessage::_internal_mutable_ping() {
  
  if (ping_ == nullptr) {
    auto* p = CreateMaybeMessage<::bus::Ping>(GetArena());
    ping_ = p;
  }
  return ping_;
}
inline ::bus::Ping* CommonMessage::mutable_ping() {
  // @@protoc_insertion_point(field_mutable:bus.CommonMessage.ping)
  return _internal_mutable_ping();
}
inline void CommonMessage::set_allocated_ping(::bus::Ping* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ping_;
  }
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ping);
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    
  } else {
    
  }
  ping_ = ping;
  // @@protoc_insertion_point(field_set_allocated:bus.CommonMessage.ping)
}

// .bus.RegSvrInfo svrInfo = 11;
inline bool CommonMessage::_internal_has_svrinfo() const {
  return this != internal_default_instance() && svrinfo_ != nullptr;
}
inline bool CommonMessage::has_svrinfo() const {
  return _internal_has_svrinfo();
}
inline void CommonMessage::clear_svrinfo() {
  if (GetArena() == nullptr && svrinfo_ != nullptr) {
    delete svrinfo_;
  }
  svrinfo_ = nullptr;
}
inline const ::bus::RegSvrInfo& CommonMessage::_internal_svrinfo() const {
  const ::bus::RegSvrInfo* p = svrinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bus::RegSvrInfo*>(
      &::bus::_RegSvrInfo_default_instance_);
}
inline const ::bus::RegSvrInfo& CommonMessage::svrinfo() const {
  // @@protoc_insertion_point(field_get:bus.CommonMessage.svrInfo)
  return _internal_svrinfo();
}
inline void CommonMessage::unsafe_arena_set_allocated_svrinfo(
    ::bus::RegSvrInfo* svrinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(svrinfo_);
  }
  svrinfo_ = svrinfo;
  if (svrinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bus.CommonMessage.svrInfo)
}
inline ::bus::RegSvrInfo* CommonMessage::release_svrinfo() {
  auto temp = unsafe_arena_release_svrinfo();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bus::RegSvrInfo* CommonMessage::unsafe_arena_release_svrinfo() {
  // @@protoc_insertion_point(field_release:bus.CommonMessage.svrInfo)
  
  ::bus::RegSvrInfo* temp = svrinfo_;
  svrinfo_ = nullptr;
  return temp;
}
inline ::bus::RegSvrInfo* CommonMessage::_internal_mutable_svrinfo() {
  
  if (svrinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::bus::RegSvrInfo>(GetArena());
    svrinfo_ = p;
  }
  return svrinfo_;
}
inline ::bus::RegSvrInfo* CommonMessage::mutable_svrinfo() {
  // @@protoc_insertion_point(field_mutable:bus.CommonMessage.svrInfo)
  return _internal_mutable_svrinfo();
}
inline void CommonMessage::set_allocated_svrinfo(::bus::RegSvrInfo* svrinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete svrinfo_;
  }
  if (svrinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(svrinfo);
    if (message_arena != submessage_arena) {
      svrinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, svrinfo, submessage_arena);
    }
    
  } else {
    
  }
  svrinfo_ = svrinfo;
  // @@protoc_insertion_point(field_set_allocated:bus.CommonMessage.svrInfo)
}

// .bus.NewSvrInfo newSvrInfo = 12;
inline bool CommonMessage::_internal_has_newsvrinfo() const {
  return this != internal_default_instance() && newsvrinfo_ != nullptr;
}
inline bool CommonMessage::has_newsvrinfo() const {
  return _internal_has_newsvrinfo();
}
inline void CommonMessage::clear_newsvrinfo() {
  if (GetArena() == nullptr && newsvrinfo_ != nullptr) {
    delete newsvrinfo_;
  }
  newsvrinfo_ = nullptr;
}
inline const ::bus::NewSvrInfo& CommonMessage::_internal_newsvrinfo() const {
  const ::bus::NewSvrInfo* p = newsvrinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bus::NewSvrInfo*>(
      &::bus::_NewSvrInfo_default_instance_);
}
inline const ::bus::NewSvrInfo& CommonMessage::newsvrinfo() const {
  // @@protoc_insertion_point(field_get:bus.CommonMessage.newSvrInfo)
  return _internal_newsvrinfo();
}
inline void CommonMessage::unsafe_arena_set_allocated_newsvrinfo(
    ::bus::NewSvrInfo* newsvrinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newsvrinfo_);
  }
  newsvrinfo_ = newsvrinfo;
  if (newsvrinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bus.CommonMessage.newSvrInfo)
}
inline ::bus::NewSvrInfo* CommonMessage::release_newsvrinfo() {
  auto temp = unsafe_arena_release_newsvrinfo();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bus::NewSvrInfo* CommonMessage::unsafe_arena_release_newsvrinfo() {
  // @@protoc_insertion_point(field_release:bus.CommonMessage.newSvrInfo)
  
  ::bus::NewSvrInfo* temp = newsvrinfo_;
  newsvrinfo_ = nullptr;
  return temp;
}
inline ::bus::NewSvrInfo* CommonMessage::_internal_mutable_newsvrinfo() {
  
  if (newsvrinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::bus::NewSvrInfo>(GetArena());
    newsvrinfo_ = p;
  }
  return newsvrinfo_;
}
inline ::bus::NewSvrInfo* CommonMessage::mutable_newsvrinfo() {
  // @@protoc_insertion_point(field_mutable:bus.CommonMessage.newSvrInfo)
  return _internal_mutable_newsvrinfo();
}
inline void CommonMessage::set_allocated_newsvrinfo(::bus::NewSvrInfo* newsvrinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete newsvrinfo_;
  }
  if (newsvrinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(newsvrinfo);
    if (message_arena != submessage_arena) {
      newsvrinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newsvrinfo, submessage_arena);
    }
    
  } else {
    
  }
  newsvrinfo_ = newsvrinfo;
  // @@protoc_insertion_point(field_set_allocated:bus.CommonMessage.newSvrInfo)
}

// .bus.RouteInfo routeInfo = 13;
inline bool CommonMessage::_internal_has_routeinfo() const {
  return this != internal_default_instance() && routeinfo_ != nullptr;
}
inline bool CommonMessage::has_routeinfo() const {
  return _internal_has_routeinfo();
}
inline void CommonMessage::clear_routeinfo() {
  if (GetArena() == nullptr && routeinfo_ != nullptr) {
    delete routeinfo_;
  }
  routeinfo_ = nullptr;
}
inline const ::bus::RouteInfo& CommonMessage::_internal_routeinfo() const {
  const ::bus::RouteInfo* p = routeinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bus::RouteInfo*>(
      &::bus::_RouteInfo_default_instance_);
}
inline const ::bus::RouteInfo& CommonMessage::routeinfo() const {
  // @@protoc_insertion_point(field_get:bus.CommonMessage.routeInfo)
  return _internal_routeinfo();
}
inline void CommonMessage::unsafe_arena_set_allocated_routeinfo(
    ::bus::RouteInfo* routeinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routeinfo_);
  }
  routeinfo_ = routeinfo;
  if (routeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bus.CommonMessage.routeInfo)
}
inline ::bus::RouteInfo* CommonMessage::release_routeinfo() {
  auto temp = unsafe_arena_release_routeinfo();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bus::RouteInfo* CommonMessage::unsafe_arena_release_routeinfo() {
  // @@protoc_insertion_point(field_release:bus.CommonMessage.routeInfo)
  
  ::bus::RouteInfo* temp = routeinfo_;
  routeinfo_ = nullptr;
  return temp;
}
inline ::bus::RouteInfo* CommonMessage::_internal_mutable_routeinfo() {
  
  if (routeinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::bus::RouteInfo>(GetArena());
    routeinfo_ = p;
  }
  return routeinfo_;
}
inline ::bus::RouteInfo* CommonMessage::mutable_routeinfo() {
  // @@protoc_insertion_point(field_mutable:bus.CommonMessage.routeInfo)
  return _internal_mutable_routeinfo();
}
inline void CommonMessage::set_allocated_routeinfo(::bus::RouteInfo* routeinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete routeinfo_;
  }
  if (routeinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(routeinfo);
    if (message_arena != submessage_arena) {
      routeinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routeinfo, submessage_arena);
    }
    
  } else {
    
  }
  routeinfo_ = routeinfo;
  // @@protoc_insertion_point(field_set_allocated:bus.CommonMessage.routeInfo)
}

// .bus.DelSvrInfo delSvrInfo = 14;
inline bool CommonMessage::_internal_has_delsvrinfo() const {
  return this != internal_default_instance() && delsvrinfo_ != nullptr;
}
inline bool CommonMessage::has_delsvrinfo() const {
  return _internal_has_delsvrinfo();
}
inline void CommonMessage::clear_delsvrinfo() {
  if (GetArena() == nullptr && delsvrinfo_ != nullptr) {
    delete delsvrinfo_;
  }
  delsvrinfo_ = nullptr;
}
inline const ::bus::DelSvrInfo& CommonMessage::_internal_delsvrinfo() const {
  const ::bus::DelSvrInfo* p = delsvrinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bus::DelSvrInfo*>(
      &::bus::_DelSvrInfo_default_instance_);
}
inline const ::bus::DelSvrInfo& CommonMessage::delsvrinfo() const {
  // @@protoc_insertion_point(field_get:bus.CommonMessage.delSvrInfo)
  return _internal_delsvrinfo();
}
inline void CommonMessage::unsafe_arena_set_allocated_delsvrinfo(
    ::bus::DelSvrInfo* delsvrinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delsvrinfo_);
  }
  delsvrinfo_ = delsvrinfo;
  if (delsvrinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bus.CommonMessage.delSvrInfo)
}
inline ::bus::DelSvrInfo* CommonMessage::release_delsvrinfo() {
  auto temp = unsafe_arena_release_delsvrinfo();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bus::DelSvrInfo* CommonMessage::unsafe_arena_release_delsvrinfo() {
  // @@protoc_insertion_point(field_release:bus.CommonMessage.delSvrInfo)
  
  ::bus::DelSvrInfo* temp = delsvrinfo_;
  delsvrinfo_ = nullptr;
  return temp;
}
inline ::bus::DelSvrInfo* CommonMessage::_internal_mutable_delsvrinfo() {
  
  if (delsvrinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::bus::DelSvrInfo>(GetArena());
    delsvrinfo_ = p;
  }
  return delsvrinfo_;
}
inline ::bus::DelSvrInfo* CommonMessage::mutable_delsvrinfo() {
  // @@protoc_insertion_point(field_mutable:bus.CommonMessage.delSvrInfo)
  return _internal_mutable_delsvrinfo();
}
inline void CommonMessage::set_allocated_delsvrinfo(::bus::DelSvrInfo* delsvrinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete delsvrinfo_;
  }
  if (delsvrinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delsvrinfo);
    if (message_arena != submessage_arena) {
      delsvrinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delsvrinfo, submessage_arena);
    }
    
  } else {
    
  }
  delsvrinfo_ = delsvrinfo;
  // @@protoc_insertion_point(field_set_allocated:bus.CommonMessage.delSvrInfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bus

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bus::Cmd> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bus::Cmd>() {
  return ::bus::Cmd_descriptor();
}
template <> struct is_proto_enum< ::bus::ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bus::ErrorCode>() {
  return ::bus::ErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bus_2eproto

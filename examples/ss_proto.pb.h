// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ss_proto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ss_5fproto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ss_5fproto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ss_5fproto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ss_5fproto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[56]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ss_5fproto_2eproto;
namespace ss_proto {
class AddDBNtf;
class AddDBNtfDefaultTypeInternal;
extern AddDBNtfDefaultTypeInternal _AddDBNtf_default_instance_;
class CommonMessage;
class CommonMessageDefaultTypeInternal;
extern CommonMessageDefaultTypeInternal _CommonMessage_default_instance_;
class CreateRoleAck;
class CreateRoleAckDefaultTypeInternal;
extern CreateRoleAckDefaultTypeInternal _CreateRoleAck_default_instance_;
class CreateRoleReq;
class CreateRoleReqDefaultTypeInternal;
extern CreateRoleReqDefaultTypeInternal _CreateRoleReq_default_instance_;
class FriendAddAck;
class FriendAddAckDefaultTypeInternal;
extern FriendAddAckDefaultTypeInternal _FriendAddAck_default_instance_;
class FriendAddReq;
class FriendAddReqDefaultTypeInternal;
extern FriendAddReqDefaultTypeInternal _FriendAddReq_default_instance_;
class FriendDelAck;
class FriendDelAckDefaultTypeInternal;
extern FriendDelAckDefaultTypeInternal _FriendDelAck_default_instance_;
class FriendDelReq;
class FriendDelReqDefaultTypeInternal;
extern FriendDelReqDefaultTypeInternal _FriendDelReq_default_instance_;
class FriendInfo;
class FriendInfoDefaultTypeInternal;
extern FriendInfoDefaultTypeInternal _FriendInfo_default_instance_;
class FriendListAck;
class FriendListAckDefaultTypeInternal;
extern FriendListAckDefaultTypeInternal _FriendListAck_default_instance_;
class FriendListReq;
class FriendListReqDefaultTypeInternal;
extern FriendListReqDefaultTypeInternal _FriendListReq_default_instance_;
class KickUserNtf;
class KickUserNtfDefaultTypeInternal;
extern KickUserNtfDefaultTypeInternal _KickUserNtf_default_instance_;
class LoadInteractionAck;
class LoadInteractionAckDefaultTypeInternal;
extern LoadInteractionAckDefaultTypeInternal _LoadInteractionAck_default_instance_;
class LoadInteractionReq;
class LoadInteractionReqDefaultTypeInternal;
extern LoadInteractionReqDefaultTypeInternal _LoadInteractionReq_default_instance_;
class LoadRolePackageAck;
class LoadRolePackageAckDefaultTypeInternal;
extern LoadRolePackageAckDefaultTypeInternal _LoadRolePackageAck_default_instance_;
class LoadRolePackageReq;
class LoadRolePackageReqDefaultTypeInternal;
extern LoadRolePackageReqDefaultTypeInternal _LoadRolePackageReq_default_instance_;
class LoadRoleSkillAck;
class LoadRoleSkillAckDefaultTypeInternal;
extern LoadRoleSkillAckDefaultTypeInternal _LoadRoleSkillAck_default_instance_;
class LoadRoleSkillReq;
class LoadRoleSkillReqDefaultTypeInternal;
extern LoadRoleSkillReqDefaultTypeInternal _LoadRoleSkillReq_default_instance_;
class LogDataAck;
class LogDataAckDefaultTypeInternal;
extern LogDataAckDefaultTypeInternal _LogDataAck_default_instance_;
class LogDataReq;
class LogDataReqDefaultTypeInternal;
extern LogDataReqDefaultTypeInternal _LogDataReq_default_instance_;
class LoginGameAck;
class LoginGameAckDefaultTypeInternal;
extern LoginGameAckDefaultTypeInternal _LoginGameAck_default_instance_;
class LoginGameReq;
class LoginGameReqDefaultTypeInternal;
extern LoginGameReqDefaultTypeInternal _LoginGameReq_default_instance_;
class LoginSwtichAck;
class LoginSwtichAckDefaultTypeInternal;
extern LoginSwtichAckDefaultTypeInternal _LoginSwtichAck_default_instance_;
class LoginSwtichReq;
class LoginSwtichReqDefaultTypeInternal;
extern LoginSwtichReqDefaultTypeInternal _LoginSwtichReq_default_instance_;
class LoginWorldAck;
class LoginWorldAckDefaultTypeInternal;
extern LoginWorldAckDefaultTypeInternal _LoginWorldAck_default_instance_;
class LoginWorldReq;
class LoginWorldReqDefaultTypeInternal;
extern LoginWorldReqDefaultTypeInternal _LoginWorldReq_default_instance_;
class LogoutGameAck;
class LogoutGameAckDefaultTypeInternal;
extern LogoutGameAckDefaultTypeInternal _LogoutGameAck_default_instance_;
class LogoutGameReq;
class LogoutGameReqDefaultTypeInternal;
extern LogoutGameReqDefaultTypeInternal _LogoutGameReq_default_instance_;
class NewMailNtf;
class NewMailNtfDefaultTypeInternal;
extern NewMailNtfDefaultTypeInternal _NewMailNtf_default_instance_;
class RoleBoardAck;
class RoleBoardAckDefaultTypeInternal;
extern RoleBoardAckDefaultTypeInternal _RoleBoardAck_default_instance_;
class RoleBoardReq;
class RoleBoardReqDefaultTypeInternal;
extern RoleBoardReqDefaultTypeInternal _RoleBoardReq_default_instance_;
class RoleDatas;
class RoleDatasDefaultTypeInternal;
extern RoleDatasDefaultTypeInternal _RoleDatas_default_instance_;
class RoleMailAck;
class RoleMailAckDefaultTypeInternal;
extern RoleMailAckDefaultTypeInternal _RoleMailAck_default_instance_;
class RoleMailReq;
class RoleMailReqDefaultTypeInternal;
extern RoleMailReqDefaultTypeInternal _RoleMailReq_default_instance_;
class SaveRoleAck;
class SaveRoleAckDefaultTypeInternal;
extern SaveRoleAckDefaultTypeInternal _SaveRoleAck_default_instance_;
class SaveRolePackageAck;
class SaveRolePackageAckDefaultTypeInternal;
extern SaveRolePackageAckDefaultTypeInternal _SaveRolePackageAck_default_instance_;
class SaveRolePackageReq;
class SaveRolePackageReqDefaultTypeInternal;
extern SaveRolePackageReqDefaultTypeInternal _SaveRolePackageReq_default_instance_;
class SaveRoleReq;
class SaveRoleReqDefaultTypeInternal;
extern SaveRoleReqDefaultTypeInternal _SaveRoleReq_default_instance_;
class SceneProcAck;
class SceneProcAckDefaultTypeInternal;
extern SceneProcAckDefaultTypeInternal _SceneProcAck_default_instance_;
class SceneProcReq;
class SceneProcReqDefaultTypeInternal;
extern SceneProcReqDefaultTypeInternal _SceneProcReq_default_instance_;
class SceneUpdateAck;
class SceneUpdateAckDefaultTypeInternal;
extern SceneUpdateAckDefaultTypeInternal _SceneUpdateAck_default_instance_;
class SceneUpdateReq;
class SceneUpdateReqDefaultTypeInternal;
extern SceneUpdateReqDefaultTypeInternal _SceneUpdateReq_default_instance_;
class SearchBossAck;
class SearchBossAckDefaultTypeInternal;
extern SearchBossAckDefaultTypeInternal _SearchBossAck_default_instance_;
class SearchBossReq;
class SearchBossReqDefaultTypeInternal;
extern SearchBossReqDefaultTypeInternal _SearchBossReq_default_instance_;
class ServerCastNtf;
class ServerCastNtfDefaultTypeInternal;
extern ServerCastNtfDefaultTypeInternal _ServerCastNtf_default_instance_;
class ServerCmd;
class ServerCmdDefaultTypeInternal;
extern ServerCmdDefaultTypeInternal _ServerCmd_default_instance_;
class ServerReport;
class ServerReportDefaultTypeInternal;
extern ServerReportDefaultTypeInternal _ServerReport_default_instance_;
class SyncRole;
class SyncRoleDefaultTypeInternal;
extern SyncRoleDefaultTypeInternal _SyncRole_default_instance_;
class SyncRoleNtf;
class SyncRoleNtfDefaultTypeInternal;
extern SyncRoleNtfDefaultTypeInternal _SyncRoleNtf_default_instance_;
class TopNListAck;
class TopNListAckDefaultTypeInternal;
extern TopNListAckDefaultTypeInternal _TopNListAck_default_instance_;
class TopNListReq;
class TopNListReqDefaultTypeInternal;
extern TopNListReqDefaultTypeInternal _TopNListReq_default_instance_;
class TopNUpdateAck;
class TopNUpdateAckDefaultTypeInternal;
extern TopNUpdateAckDefaultTypeInternal _TopNUpdateAck_default_instance_;
class TopNUpdateReq;
class TopNUpdateReqDefaultTypeInternal;
extern TopNUpdateReqDefaultTypeInternal _TopNUpdateReq_default_instance_;
class UserLoginAck;
class UserLoginAckDefaultTypeInternal;
extern UserLoginAckDefaultTypeInternal _UserLoginAck_default_instance_;
class UserLoginReq;
class UserLoginReqDefaultTypeInternal;
extern UserLoginReqDefaultTypeInternal _UserLoginReq_default_instance_;
class UserRole;
class UserRoleDefaultTypeInternal;
extern UserRoleDefaultTypeInternal _UserRole_default_instance_;
}  // namespace ss_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::ss_proto::AddDBNtf* Arena::CreateMaybeMessage<::ss_proto::AddDBNtf>(Arena*);
template<> ::ss_proto::CommonMessage* Arena::CreateMaybeMessage<::ss_proto::CommonMessage>(Arena*);
template<> ::ss_proto::CreateRoleAck* Arena::CreateMaybeMessage<::ss_proto::CreateRoleAck>(Arena*);
template<> ::ss_proto::CreateRoleReq* Arena::CreateMaybeMessage<::ss_proto::CreateRoleReq>(Arena*);
template<> ::ss_proto::FriendAddAck* Arena::CreateMaybeMessage<::ss_proto::FriendAddAck>(Arena*);
template<> ::ss_proto::FriendAddReq* Arena::CreateMaybeMessage<::ss_proto::FriendAddReq>(Arena*);
template<> ::ss_proto::FriendDelAck* Arena::CreateMaybeMessage<::ss_proto::FriendDelAck>(Arena*);
template<> ::ss_proto::FriendDelReq* Arena::CreateMaybeMessage<::ss_proto::FriendDelReq>(Arena*);
template<> ::ss_proto::FriendInfo* Arena::CreateMaybeMessage<::ss_proto::FriendInfo>(Arena*);
template<> ::ss_proto::FriendListAck* Arena::CreateMaybeMessage<::ss_proto::FriendListAck>(Arena*);
template<> ::ss_proto::FriendListReq* Arena::CreateMaybeMessage<::ss_proto::FriendListReq>(Arena*);
template<> ::ss_proto::KickUserNtf* Arena::CreateMaybeMessage<::ss_proto::KickUserNtf>(Arena*);
template<> ::ss_proto::LoadInteractionAck* Arena::CreateMaybeMessage<::ss_proto::LoadInteractionAck>(Arena*);
template<> ::ss_proto::LoadInteractionReq* Arena::CreateMaybeMessage<::ss_proto::LoadInteractionReq>(Arena*);
template<> ::ss_proto::LoadRolePackageAck* Arena::CreateMaybeMessage<::ss_proto::LoadRolePackageAck>(Arena*);
template<> ::ss_proto::LoadRolePackageReq* Arena::CreateMaybeMessage<::ss_proto::LoadRolePackageReq>(Arena*);
template<> ::ss_proto::LoadRoleSkillAck* Arena::CreateMaybeMessage<::ss_proto::LoadRoleSkillAck>(Arena*);
template<> ::ss_proto::LoadRoleSkillReq* Arena::CreateMaybeMessage<::ss_proto::LoadRoleSkillReq>(Arena*);
template<> ::ss_proto::LogDataAck* Arena::CreateMaybeMessage<::ss_proto::LogDataAck>(Arena*);
template<> ::ss_proto::LogDataReq* Arena::CreateMaybeMessage<::ss_proto::LogDataReq>(Arena*);
template<> ::ss_proto::LoginGameAck* Arena::CreateMaybeMessage<::ss_proto::LoginGameAck>(Arena*);
template<> ::ss_proto::LoginGameReq* Arena::CreateMaybeMessage<::ss_proto::LoginGameReq>(Arena*);
template<> ::ss_proto::LoginSwtichAck* Arena::CreateMaybeMessage<::ss_proto::LoginSwtichAck>(Arena*);
template<> ::ss_proto::LoginSwtichReq* Arena::CreateMaybeMessage<::ss_proto::LoginSwtichReq>(Arena*);
template<> ::ss_proto::LoginWorldAck* Arena::CreateMaybeMessage<::ss_proto::LoginWorldAck>(Arena*);
template<> ::ss_proto::LoginWorldReq* Arena::CreateMaybeMessage<::ss_proto::LoginWorldReq>(Arena*);
template<> ::ss_proto::LogoutGameAck* Arena::CreateMaybeMessage<::ss_proto::LogoutGameAck>(Arena*);
template<> ::ss_proto::LogoutGameReq* Arena::CreateMaybeMessage<::ss_proto::LogoutGameReq>(Arena*);
template<> ::ss_proto::NewMailNtf* Arena::CreateMaybeMessage<::ss_proto::NewMailNtf>(Arena*);
template<> ::ss_proto::RoleBoardAck* Arena::CreateMaybeMessage<::ss_proto::RoleBoardAck>(Arena*);
template<> ::ss_proto::RoleBoardReq* Arena::CreateMaybeMessage<::ss_proto::RoleBoardReq>(Arena*);
template<> ::ss_proto::RoleDatas* Arena::CreateMaybeMessage<::ss_proto::RoleDatas>(Arena*);
template<> ::ss_proto::RoleMailAck* Arena::CreateMaybeMessage<::ss_proto::RoleMailAck>(Arena*);
template<> ::ss_proto::RoleMailReq* Arena::CreateMaybeMessage<::ss_proto::RoleMailReq>(Arena*);
template<> ::ss_proto::SaveRoleAck* Arena::CreateMaybeMessage<::ss_proto::SaveRoleAck>(Arena*);
template<> ::ss_proto::SaveRolePackageAck* Arena::CreateMaybeMessage<::ss_proto::SaveRolePackageAck>(Arena*);
template<> ::ss_proto::SaveRolePackageReq* Arena::CreateMaybeMessage<::ss_proto::SaveRolePackageReq>(Arena*);
template<> ::ss_proto::SaveRoleReq* Arena::CreateMaybeMessage<::ss_proto::SaveRoleReq>(Arena*);
template<> ::ss_proto::SceneProcAck* Arena::CreateMaybeMessage<::ss_proto::SceneProcAck>(Arena*);
template<> ::ss_proto::SceneProcReq* Arena::CreateMaybeMessage<::ss_proto::SceneProcReq>(Arena*);
template<> ::ss_proto::SceneUpdateAck* Arena::CreateMaybeMessage<::ss_proto::SceneUpdateAck>(Arena*);
template<> ::ss_proto::SceneUpdateReq* Arena::CreateMaybeMessage<::ss_proto::SceneUpdateReq>(Arena*);
template<> ::ss_proto::SearchBossAck* Arena::CreateMaybeMessage<::ss_proto::SearchBossAck>(Arena*);
template<> ::ss_proto::SearchBossReq* Arena::CreateMaybeMessage<::ss_proto::SearchBossReq>(Arena*);
template<> ::ss_proto::ServerCastNtf* Arena::CreateMaybeMessage<::ss_proto::ServerCastNtf>(Arena*);
template<> ::ss_proto::ServerCmd* Arena::CreateMaybeMessage<::ss_proto::ServerCmd>(Arena*);
template<> ::ss_proto::ServerReport* Arena::CreateMaybeMessage<::ss_proto::ServerReport>(Arena*);
template<> ::ss_proto::SyncRole* Arena::CreateMaybeMessage<::ss_proto::SyncRole>(Arena*);
template<> ::ss_proto::SyncRoleNtf* Arena::CreateMaybeMessage<::ss_proto::SyncRoleNtf>(Arena*);
template<> ::ss_proto::TopNListAck* Arena::CreateMaybeMessage<::ss_proto::TopNListAck>(Arena*);
template<> ::ss_proto::TopNListReq* Arena::CreateMaybeMessage<::ss_proto::TopNListReq>(Arena*);
template<> ::ss_proto::TopNUpdateAck* Arena::CreateMaybeMessage<::ss_proto::TopNUpdateAck>(Arena*);
template<> ::ss_proto::TopNUpdateReq* Arena::CreateMaybeMessage<::ss_proto::TopNUpdateReq>(Arena*);
template<> ::ss_proto::UserLoginAck* Arena::CreateMaybeMessage<::ss_proto::UserLoginAck>(Arena*);
template<> ::ss_proto::UserLoginReq* Arena::CreateMaybeMessage<::ss_proto::UserLoginReq>(Arena*);
template<> ::ss_proto::UserRole* Arena::CreateMaybeMessage<::ss_proto::UserRole>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ss_proto {

enum Cmd : int {
  NONE = 0,
  SS_ADD_DB = 1,
  SS_SVR_START = 2,
  SS_SVR_REPORT = 3,
  SS_SVR_CMD = 4,
  SS_LOG_DATA = 5,
  SS_SVR_CAST = 6,
  SS_NEW_MAIL = 7,
  SS_TOPN_UPDATE = 8,
  SS_TOPN_LIST = 9,
  SS_USER_LOGIN = 20,
  SS_LOGIN_WORLD = 21,
  SS_LOGIN_GAME = 22,
  SS_LOGOUT_GAME = 23,
  SS_CREATE_ROLE = 24,
  SS_SAVE_ROLE = 25,
  SS_KICK_USER = 26,
  SS_SYNC_ROLES = 27,
  SS_ROLE_BOARD = 28,
  SS_LOGIN_SWITCH = 29,
  SS_SEARCH_BOSS = 30,
  SS_FRIEND_DEL = 35,
  SS_FRIEND_ADD = 36,
  SS_FRIEND_LIST = 37,
  SS_SCENE_UPDATE = 45,
  SS_SCENE_PROC = 46,
  SS_LOAD_ROLE_SKILL = 301,
  SS_LOAD_ROLE_PACKAGE = 302,
  Cmd_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Cmd_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Cmd_IsValid(int value);
constexpr Cmd Cmd_MIN = NONE;
constexpr Cmd Cmd_MAX = SS_LOAD_ROLE_PACKAGE;
constexpr int Cmd_ARRAYSIZE = Cmd_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cmd_descriptor();
template<typename T>
inline const std::string& Cmd_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cmd>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cmd_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cmd_descriptor(), enum_t_value);
}
inline bool Cmd_Parse(
    const std::string& name, Cmd* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cmd>(
    Cmd_descriptor(), name, value);
}
enum CastCode : int {
  CC_FRIEND_ADD = 0,
  CC_FRIEND_DEL = 1,
  CC_WORLD_CHAT = 2,
  CC_SYS_NOTICE = 3,
  CastCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CastCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CastCode_IsValid(int value);
constexpr CastCode CastCode_MIN = CC_FRIEND_ADD;
constexpr CastCode CastCode_MAX = CC_SYS_NOTICE;
constexpr int CastCode_ARRAYSIZE = CastCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CastCode_descriptor();
template<typename T>
inline const std::string& CastCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CastCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CastCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CastCode_descriptor(), enum_t_value);
}
inline bool CastCode_Parse(
    const std::string& name, CastCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CastCode>(
    CastCode_descriptor(), name, value);
}
enum CastType : int {
  CT_IN = 0,
  CT_OUT = 1,
  CT_ALL = 2,
  CastType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CastType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CastType_IsValid(int value);
constexpr CastType CastType_MIN = CT_IN;
constexpr CastType CastType_MAX = CT_ALL;
constexpr int CastType_ARRAYSIZE = CastType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CastType_descriptor();
template<typename T>
inline const std::string& CastType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CastType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CastType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CastType_descriptor(), enum_t_value);
}
inline bool CastType_Parse(
    const std::string& name, CastType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CastType>(
    CastType_descriptor(), name, value);
}
enum ErrorCode : int {
  SUCCESS = 0,
  SERVICE_UNAVAILABLE = 2,
  SERVICE_DBMAX = 3,
  USER_RELOGIN = 20,
  TOKEN_INVALID = 21,
  ROLE_FOUND = 22,
  NAME_DUPLICATE = 23,
  SYSTEM_UNKNOW = 999,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ErrorCode_IsValid(int value);
constexpr ErrorCode ErrorCode_MIN = SUCCESS;
constexpr ErrorCode ErrorCode_MAX = SYSTEM_UNKNOW;
constexpr int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor();
template<typename T>
inline const std::string& ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorCode_descriptor(), enum_t_value);
}
inline bool ErrorCode_Parse(
    const std::string& name, ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
enum LogDataType : int {
  LDT_LOGIN = 0,
  LDT_RES = 1,
  LogDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LogDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LogDataType_IsValid(int value);
constexpr LogDataType LogDataType_MIN = LDT_LOGIN;
constexpr LogDataType LogDataType_MAX = LDT_RES;
constexpr int LogDataType_ARRAYSIZE = LogDataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogDataType_descriptor();
template<typename T>
inline const std::string& LogDataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogDataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogDataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogDataType_descriptor(), enum_t_value);
}
inline bool LogDataType_Parse(
    const std::string& name, LogDataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogDataType>(
    LogDataType_descriptor(), name, value);
}
// ===================================================================

class AddDBNtf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.AddDBNtf) */ {
 public:
  inline AddDBNtf() : AddDBNtf(nullptr) {};
  virtual ~AddDBNtf();

  AddDBNtf(const AddDBNtf& from);
  AddDBNtf(AddDBNtf&& from) noexcept
    : AddDBNtf() {
    *this = ::std::move(from);
  }

  inline AddDBNtf& operator=(const AddDBNtf& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddDBNtf& operator=(AddDBNtf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddDBNtf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddDBNtf* internal_default_instance() {
    return reinterpret_cast<const AddDBNtf*>(
               &_AddDBNtf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddDBNtf& a, AddDBNtf& b) {
    a.Swap(&b);
  }
  inline void Swap(AddDBNtf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddDBNtf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddDBNtf* New() const final {
    return CreateMaybeMessage<AddDBNtf>(nullptr);
  }

  AddDBNtf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddDBNtf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddDBNtf& from);
  void MergeFrom(const AddDBNtf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddDBNtf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.AddDBNtf";
  }
  protected:
  explicit AddDBNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnFieldNumber = 1,
    kNameFieldNumber = 2,
    kUserFieldNumber = 3,
    kPassFieldNumber = 4,
    kDbIdFieldNumber = 5,
  };
  // string conn = 1;
  void clear_conn();
  const std::string& conn() const;
  void set_conn(const std::string& value);
  void set_conn(std::string&& value);
  void set_conn(const char* value);
  void set_conn(const char* value, size_t size);
  std::string* mutable_conn();
  std::string* release_conn();
  void set_allocated_conn(std::string* conn);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_conn();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_conn(
      std::string* conn);
  private:
  const std::string& _internal_conn() const;
  void _internal_set_conn(const std::string& value);
  std::string* _internal_mutable_conn();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string user = 3;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user(
      std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string pass = 4;
  void clear_pass();
  const std::string& pass() const;
  void set_pass(const std::string& value);
  void set_pass(std::string&& value);
  void set_pass(const char* value);
  void set_pass(const char* value, size_t size);
  std::string* mutable_pass();
  std::string* release_pass();
  void set_allocated_pass(std::string* pass);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pass();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pass(
      std::string* pass);
  private:
  const std::string& _internal_pass() const;
  void _internal_set_pass(const std::string& value);
  std::string* _internal_mutable_pass();
  public:

  // string dbId = 5;
  void clear_dbid();
  const std::string& dbid() const;
  void set_dbid(const std::string& value);
  void set_dbid(std::string&& value);
  void set_dbid(const char* value);
  void set_dbid(const char* value, size_t size);
  std::string* mutable_dbid();
  std::string* release_dbid();
  void set_allocated_dbid(std::string* dbid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dbid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dbid(
      std::string* dbid);
  private:
  const std::string& _internal_dbid() const;
  void _internal_set_dbid(const std::string& value);
  std::string* _internal_mutable_dbid();
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.AddDBNtf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pass_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dbid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class ServerReport PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.ServerReport) */ {
 public:
  inline ServerReport() : ServerReport(nullptr) {};
  virtual ~ServerReport();

  ServerReport(const ServerReport& from);
  ServerReport(ServerReport&& from) noexcept
    : ServerReport() {
    *this = ::std::move(from);
  }

  inline ServerReport& operator=(const ServerReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerReport& operator=(ServerReport&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerReport* internal_default_instance() {
    return reinterpret_cast<const ServerReport*>(
               &_ServerReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerReport& a, ServerReport& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerReport* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerReport* New() const final {
    return CreateMaybeMessage<ServerReport>(nullptr);
  }

  ServerReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerReport& from);
  void MergeFrom(const ServerReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.ServerReport";
  }
  protected:
  explicit ServerReport(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.ServerReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class ServerCmd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.ServerCmd) */ {
 public:
  inline ServerCmd() : ServerCmd(nullptr) {};
  virtual ~ServerCmd();

  ServerCmd(const ServerCmd& from);
  ServerCmd(ServerCmd&& from) noexcept
    : ServerCmd() {
    *this = ::std::move(from);
  }

  inline ServerCmd& operator=(const ServerCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerCmd& operator=(ServerCmd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerCmd* internal_default_instance() {
    return reinterpret_cast<const ServerCmd*>(
               &_ServerCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerCmd& a, ServerCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerCmd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerCmd* New() const final {
    return CreateMaybeMessage<ServerCmd>(nullptr);
  }

  ServerCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerCmd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerCmd& from);
  void MergeFrom(const ServerCmd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerCmd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.ServerCmd";
  }
  protected:
  explicit ServerCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdFieldNumber = 1,
  };
  // string cmd = 1;
  void clear_cmd();
  const std::string& cmd() const;
  void set_cmd(const std::string& value);
  void set_cmd(std::string&& value);
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  std::string* mutable_cmd();
  std::string* release_cmd();
  void set_allocated_cmd(std::string* cmd);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cmd();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cmd(
      std::string* cmd);
  private:
  const std::string& _internal_cmd() const;
  void _internal_set_cmd(const std::string& value);
  std::string* _internal_mutable_cmd();
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.ServerCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class ServerCastNtf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.ServerCastNtf) */ {
 public:
  inline ServerCastNtf() : ServerCastNtf(nullptr) {};
  virtual ~ServerCastNtf();

  ServerCastNtf(const ServerCastNtf& from);
  ServerCastNtf(ServerCastNtf&& from) noexcept
    : ServerCastNtf() {
    *this = ::std::move(from);
  }

  inline ServerCastNtf& operator=(const ServerCastNtf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerCastNtf& operator=(ServerCastNtf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerCastNtf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerCastNtf* internal_default_instance() {
    return reinterpret_cast<const ServerCastNtf*>(
               &_ServerCastNtf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServerCastNtf& a, ServerCastNtf& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerCastNtf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerCastNtf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerCastNtf* New() const final {
    return CreateMaybeMessage<ServerCastNtf>(nullptr);
  }

  ServerCastNtf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerCastNtf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerCastNtf& from);
  void MergeFrom(const ServerCastNtf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerCastNtf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.ServerCastNtf";
  }
  protected:
  explicit ServerCastNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidsFieldNumber = 4,
    kRidsFieldNumber = 5,
    kDataFieldNumber = 6,
    kCcFieldNumber = 1,
    kCtFieldNumber = 2,
    kWorldIdFieldNumber = 3,
  };
  // repeated int64 uids = 4;
  int uids_size() const;
  private:
  int _internal_uids_size() const;
  public:
  void clear_uids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_uids() const;
  void _internal_add_uids(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_uids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 uids(int index) const;
  void set_uids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_uids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      uids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_uids();

  // repeated int64 rids = 5;
  int rids_size() const;
  private:
  int _internal_rids_size() const;
  public:
  void clear_rids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_rids() const;
  void _internal_add_rids(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_rids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 rids(int index) const;
  void set_rids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_rids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      rids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_rids();

  // bytes data = 6;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .ss_proto.CastCode cc = 1;
  void clear_cc();
  ::ss_proto::CastCode cc() const;
  void set_cc(::ss_proto::CastCode value);
  private:
  ::ss_proto::CastCode _internal_cc() const;
  void _internal_set_cc(::ss_proto::CastCode value);
  public:

  // .ss_proto.CastType ct = 2;
  void clear_ct();
  ::ss_proto::CastType ct() const;
  void set_ct(::ss_proto::CastType value);
  private:
  ::ss_proto::CastType _internal_ct() const;
  void _internal_set_ct(::ss_proto::CastType value);
  public:

  // int64 worldId = 3;
  void clear_worldid();
  ::PROTOBUF_NAMESPACE_ID::int64 worldid() const;
  void set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_worldid() const;
  void _internal_set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.ServerCastNtf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > uids_;
  mutable std::atomic<int> _uids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > rids_;
  mutable std::atomic<int> _rids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int cc_;
  int ct_;
  ::PROTOBUF_NAMESPACE_ID::int64 worldid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class NewMailNtf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.NewMailNtf) */ {
 public:
  inline NewMailNtf() : NewMailNtf(nullptr) {};
  virtual ~NewMailNtf();

  NewMailNtf(const NewMailNtf& from);
  NewMailNtf(NewMailNtf&& from) noexcept
    : NewMailNtf() {
    *this = ::std::move(from);
  }

  inline NewMailNtf& operator=(const NewMailNtf& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewMailNtf& operator=(NewMailNtf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewMailNtf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewMailNtf* internal_default_instance() {
    return reinterpret_cast<const NewMailNtf*>(
               &_NewMailNtf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NewMailNtf& a, NewMailNtf& b) {
    a.Swap(&b);
  }
  inline void Swap(NewMailNtf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewMailNtf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewMailNtf* New() const final {
    return CreateMaybeMessage<NewMailNtf>(nullptr);
  }

  NewMailNtf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewMailNtf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewMailNtf& from);
  void MergeFrom(const NewMailNtf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewMailNtf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.NewMailNtf";
  }
  protected:
  explicit NewMailNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kMailIdFieldNumber = 1,
  };
  // bytes content = 2;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 mailId = 1;
  void clear_mailid();
  ::PROTOBUF_NAMESPACE_ID::int32 mailid() const;
  void set_mailid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mailid() const;
  void _internal_set_mailid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.NewMailNtf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::int32 mailid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class UserLoginReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.UserLoginReq) */ {
 public:
  inline UserLoginReq() : UserLoginReq(nullptr) {};
  virtual ~UserLoginReq();

  UserLoginReq(const UserLoginReq& from);
  UserLoginReq(UserLoginReq&& from) noexcept
    : UserLoginReq() {
    *this = ::std::move(from);
  }

  inline UserLoginReq& operator=(const UserLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLoginReq& operator=(UserLoginReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserLoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLoginReq* internal_default_instance() {
    return reinterpret_cast<const UserLoginReq*>(
               &_UserLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserLoginReq& a, UserLoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLoginReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserLoginReq* New() const final {
    return CreateMaybeMessage<UserLoginReq>(nullptr);
  }

  UserLoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserLoginReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserLoginReq& from);
  void MergeFrom(const UserLoginReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.UserLoginReq";
  }
  protected:
  explicit UserLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtIdFieldNumber = 1,
    kPtTypeFieldNumber = 2,
  };
  // string ptId = 1;
  void clear_ptid();
  const std::string& ptid() const;
  void set_ptid(const std::string& value);
  void set_ptid(std::string&& value);
  void set_ptid(const char* value);
  void set_ptid(const char* value, size_t size);
  std::string* mutable_ptid();
  std::string* release_ptid();
  void set_allocated_ptid(std::string* ptid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ptid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ptid(
      std::string* ptid);
  private:
  const std::string& _internal_ptid() const;
  void _internal_set_ptid(const std::string& value);
  std::string* _internal_mutable_ptid();
  public:

  // int32 ptType = 2;
  void clear_pttype();
  ::PROTOBUF_NAMESPACE_ID::int32 pttype() const;
  void set_pttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pttype() const;
  void _internal_set_pttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.UserLoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ptid_;
  ::PROTOBUF_NAMESPACE_ID::int32 pttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class UserRole PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.UserRole) */ {
 public:
  inline UserRole() : UserRole(nullptr) {};
  virtual ~UserRole();

  UserRole(const UserRole& from);
  UserRole(UserRole&& from) noexcept
    : UserRole() {
    *this = ::std::move(from);
  }

  inline UserRole& operator=(const UserRole& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRole& operator=(UserRole&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserRole& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRole* internal_default_instance() {
    return reinterpret_cast<const UserRole*>(
               &_UserRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UserRole& a, UserRole& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRole* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRole* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserRole* New() const final {
    return CreateMaybeMessage<UserRole>(nullptr);
  }

  UserRole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserRole>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserRole& from);
  void MergeFrom(const UserRole& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRole* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.UserRole";
  }
  protected:
  explicit UserRole(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kFaceFieldNumber = 6,
    kRoleIdFieldNumber = 1,
    kWorldIdFieldNumber = 2,
    kDbIdFieldNumber = 3,
    kTimeFieldNumber = 5,
    kCharIdFieldNumber = 7,
  };
  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string face = 6;
  void clear_face();
  const std::string& face() const;
  void set_face(const std::string& value);
  void set_face(std::string&& value);
  void set_face(const char* value);
  void set_face(const char* value, size_t size);
  std::string* mutable_face();
  std::string* release_face();
  void set_allocated_face(std::string* face);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_face();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_face(
      std::string* face);
  private:
  const std::string& _internal_face() const;
  void _internal_set_face(const std::string& value);
  std::string* _internal_mutable_face();
  public:

  // int64 roleId = 1;
  void clear_roleid();
  ::PROTOBUF_NAMESPACE_ID::int64 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_roleid() const;
  void _internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 worldId = 2;
  void clear_worldid();
  ::PROTOBUF_NAMESPACE_ID::int64 worldid() const;
  void set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_worldid() const;
  void _internal_set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 dbId = 3;
  void clear_dbid();
  ::PROTOBUF_NAMESPACE_ID::int64 dbid() const;
  void set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dbid() const;
  void _internal_set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 time = 5;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 charId = 7;
  void clear_charid();
  ::PROTOBUF_NAMESPACE_ID::int32 charid() const;
  void set_charid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_charid() const;
  void _internal_set_charid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.UserRole)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr face_;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid_;
  ::PROTOBUF_NAMESPACE_ID::int64 worldid_;
  ::PROTOBUF_NAMESPACE_ID::int64 dbid_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 charid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class UserLoginAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.UserLoginAck) */ {
 public:
  inline UserLoginAck() : UserLoginAck(nullptr) {};
  virtual ~UserLoginAck();

  UserLoginAck(const UserLoginAck& from);
  UserLoginAck(UserLoginAck&& from) noexcept
    : UserLoginAck() {
    *this = ::std::move(from);
  }

  inline UserLoginAck& operator=(const UserLoginAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLoginAck& operator=(UserLoginAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserLoginAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLoginAck* internal_default_instance() {
    return reinterpret_cast<const UserLoginAck*>(
               &_UserLoginAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UserLoginAck& a, UserLoginAck& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLoginAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLoginAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserLoginAck* New() const final {
    return CreateMaybeMessage<UserLoginAck>(nullptr);
  }

  UserLoginAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserLoginAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserLoginAck& from);
  void MergeFrom(const UserLoginAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.UserLoginAck";
  }
  protected:
  explicit UserLoginAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 2,
    kTokenFieldNumber = 1,
  };
  // repeated .ss_proto.UserRole roles = 2;
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  ::ss_proto::UserRole* mutable_roles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ss_proto::UserRole >*
      mutable_roles();
  private:
  const ::ss_proto::UserRole& _internal_roles(int index) const;
  ::ss_proto::UserRole* _internal_add_roles();
  public:
  const ::ss_proto::UserRole& roles(int index) const;
  ::ss_proto::UserRole* add_roles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ss_proto::UserRole >&
      roles() const;

  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.UserLoginAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ss_proto::UserRole > roles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class LoginWorldReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.LoginWorldReq) */ {
 public:
  inline LoginWorldReq() : LoginWorldReq(nullptr) {};
  virtual ~LoginWorldReq();

  LoginWorldReq(const LoginWorldReq& from);
  LoginWorldReq(LoginWorldReq&& from) noexcept
    : LoginWorldReq() {
    *this = ::std::move(from);
  }

  inline LoginWorldReq& operator=(const LoginWorldReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginWorldReq& operator=(LoginWorldReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginWorldReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginWorldReq* internal_default_instance() {
    return reinterpret_cast<const LoginWorldReq*>(
               &_LoginWorldReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LoginWorldReq& a, LoginWorldReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginWorldReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginWorldReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginWorldReq* New() const final {
    return CreateMaybeMessage<LoginWorldReq>(nullptr);
  }

  LoginWorldReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginWorldReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginWorldReq& from);
  void MergeFrom(const LoginWorldReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginWorldReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.LoginWorldReq";
  }
  protected:
  explicit LoginWorldReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kWorldIdFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int64 worldId = 2;
  void clear_worldid();
  ::PROTOBUF_NAMESPACE_ID::int64 worldid() const;
  void set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_worldid() const;
  void _internal_set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.LoginWorldReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int64 worldid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class LoginWorldAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.LoginWorldAck) */ {
 public:
  inline LoginWorldAck() : LoginWorldAck(nullptr) {};
  virtual ~LoginWorldAck();

  LoginWorldAck(const LoginWorldAck& from);
  LoginWorldAck(LoginWorldAck&& from) noexcept
    : LoginWorldAck() {
    *this = ::std::move(from);
  }

  inline LoginWorldAck& operator=(const LoginWorldAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginWorldAck& operator=(LoginWorldAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginWorldAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginWorldAck* internal_default_instance() {
    return reinterpret_cast<const LoginWorldAck*>(
               &_LoginWorldAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LoginWorldAck& a, LoginWorldAck& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginWorldAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginWorldAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginWorldAck* New() const final {
    return CreateMaybeMessage<LoginWorldAck>(nullptr);
  }

  LoginWorldAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginWorldAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginWorldAck& from);
  void MergeFrom(const LoginWorldAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginWorldAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.LoginWorldAck";
  }
  protected:
  explicit LoginWorldAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kIpFieldNumber = 2,
    kPortFieldNumber = 3,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.LoginWorldAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class LoginGameReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.LoginGameReq) */ {
 public:
  inline LoginGameReq() : LoginGameReq(nullptr) {};
  virtual ~LoginGameReq();

  LoginGameReq(const LoginGameReq& from);
  LoginGameReq(LoginGameReq&& from) noexcept
    : LoginGameReq() {
    *this = ::std::move(from);
  }

  inline LoginGameReq& operator=(const LoginGameReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginGameReq& operator=(LoginGameReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginGameReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginGameReq* internal_default_instance() {
    return reinterpret_cast<const LoginGameReq*>(
               &_LoginGameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LoginGameReq& a, LoginGameReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginGameReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginGameReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginGameReq* New() const final {
    return CreateMaybeMessage<LoginGameReq>(nullptr);
  }

  LoginGameReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginGameReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginGameReq& from);
  void MergeFrom(const LoginGameReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginGameReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.LoginGameReq";
  }
  protected:
  explicit LoginGameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.LoginGameReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class RoleDatas PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.RoleDatas) */ {
 public:
  inline RoleDatas() : RoleDatas(nullptr) {};
  virtual ~RoleDatas();

  RoleDatas(const RoleDatas& from);
  RoleDatas(RoleDatas&& from) noexcept
    : RoleDatas() {
    *this = ::std::move(from);
  }

  inline RoleDatas& operator=(const RoleDatas& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleDatas& operator=(RoleDatas&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoleDatas& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleDatas* internal_default_instance() {
    return reinterpret_cast<const RoleDatas*>(
               &_RoleDatas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RoleDatas& a, RoleDatas& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleDatas* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleDatas* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleDatas* New() const final {
    return CreateMaybeMessage<RoleDatas>(nullptr);
  }

  RoleDatas* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleDatas>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoleDatas& from);
  void MergeFrom(const RoleDatas& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleDatas* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.RoleDatas";
  }
  protected:
  explicit RoleDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseDataFieldNumber = 1,
    kSceneDataFieldNumber = 2,
    kHeroDataFieldNumber = 3,
    kEquipDataFieldNumber = 4,
    kMaterialDataFieldNumber = 5,
    kCurrencyDataFieldNumber = 6,
    kSkillDataFieldNumber = 7,
    kFoodDataFieldNumber = 8,
    kMailDataFieldNumber = 9,
    kEquipForgeFieldNumber = 10,
    kCycleEventFieldNumber = 11,
    kNpcDataFieldNumber = 12,
    kInteractionDataFieldNumber = 13,
    kRollRecordFieldNumber = 14,
  };
  // bytes baseData = 1;
  void clear_basedata();
  const std::string& basedata() const;
  void set_basedata(const std::string& value);
  void set_basedata(std::string&& value);
  void set_basedata(const char* value);
  void set_basedata(const void* value, size_t size);
  std::string* mutable_basedata();
  std::string* release_basedata();
  void set_allocated_basedata(std::string* basedata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_basedata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_basedata(
      std::string* basedata);
  private:
  const std::string& _internal_basedata() const;
  void _internal_set_basedata(const std::string& value);
  std::string* _internal_mutable_basedata();
  public:

  // bytes sceneData = 2;
  void clear_scenedata();
  const std::string& scenedata() const;
  void set_scenedata(const std::string& value);
  void set_scenedata(std::string&& value);
  void set_scenedata(const char* value);
  void set_scenedata(const void* value, size_t size);
  std::string* mutable_scenedata();
  std::string* release_scenedata();
  void set_allocated_scenedata(std::string* scenedata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_scenedata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_scenedata(
      std::string* scenedata);
  private:
  const std::string& _internal_scenedata() const;
  void _internal_set_scenedata(const std::string& value);
  std::string* _internal_mutable_scenedata();
  public:

  // bytes heroData = 3;
  void clear_herodata();
  const std::string& herodata() const;
  void set_herodata(const std::string& value);
  void set_herodata(std::string&& value);
  void set_herodata(const char* value);
  void set_herodata(const void* value, size_t size);
  std::string* mutable_herodata();
  std::string* release_herodata();
  void set_allocated_herodata(std::string* herodata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_herodata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_herodata(
      std::string* herodata);
  private:
  const std::string& _internal_herodata() const;
  void _internal_set_herodata(const std::string& value);
  std::string* _internal_mutable_herodata();
  public:

  // bytes equipData = 4;
  void clear_equipdata();
  const std::string& equipdata() const;
  void set_equipdata(const std::string& value);
  void set_equipdata(std::string&& value);
  void set_equipdata(const char* value);
  void set_equipdata(const void* value, size_t size);
  std::string* mutable_equipdata();
  std::string* release_equipdata();
  void set_allocated_equipdata(std::string* equipdata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_equipdata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_equipdata(
      std::string* equipdata);
  private:
  const std::string& _internal_equipdata() const;
  void _internal_set_equipdata(const std::string& value);
  std::string* _internal_mutable_equipdata();
  public:

  // bytes materialData = 5;
  void clear_materialdata();
  const std::string& materialdata() const;
  void set_materialdata(const std::string& value);
  void set_materialdata(std::string&& value);
  void set_materialdata(const char* value);
  void set_materialdata(const void* value, size_t size);
  std::string* mutable_materialdata();
  std::string* release_materialdata();
  void set_allocated_materialdata(std::string* materialdata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_materialdata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_materialdata(
      std::string* materialdata);
  private:
  const std::string& _internal_materialdata() const;
  void _internal_set_materialdata(const std::string& value);
  std::string* _internal_mutable_materialdata();
  public:

  // bytes currencyData = 6;
  void clear_currencydata();
  const std::string& currencydata() const;
  void set_currencydata(const std::string& value);
  void set_currencydata(std::string&& value);
  void set_currencydata(const char* value);
  void set_currencydata(const void* value, size_t size);
  std::string* mutable_currencydata();
  std::string* release_currencydata();
  void set_allocated_currencydata(std::string* currencydata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_currencydata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_currencydata(
      std::string* currencydata);
  private:
  const std::string& _internal_currencydata() const;
  void _internal_set_currencydata(const std::string& value);
  std::string* _internal_mutable_currencydata();
  public:

  // bytes skillData = 7;
  void clear_skilldata();
  const std::string& skilldata() const;
  void set_skilldata(const std::string& value);
  void set_skilldata(std::string&& value);
  void set_skilldata(const char* value);
  void set_skilldata(const void* value, size_t size);
  std::string* mutable_skilldata();
  std::string* release_skilldata();
  void set_allocated_skilldata(std::string* skilldata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_skilldata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_skilldata(
      std::string* skilldata);
  private:
  const std::string& _internal_skilldata() const;
  void _internal_set_skilldata(const std::string& value);
  std::string* _internal_mutable_skilldata();
  public:

  // bytes foodData = 8;
  void clear_fooddata();
  const std::string& fooddata() const;
  void set_fooddata(const std::string& value);
  void set_fooddata(std::string&& value);
  void set_fooddata(const char* value);
  void set_fooddata(const void* value, size_t size);
  std::string* mutable_fooddata();
  std::string* release_fooddata();
  void set_allocated_fooddata(std::string* fooddata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fooddata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fooddata(
      std::string* fooddata);
  private:
  const std::string& _internal_fooddata() const;
  void _internal_set_fooddata(const std::string& value);
  std::string* _internal_mutable_fooddata();
  public:

  // bytes mailData = 9;
  void clear_maildata();
  const std::string& maildata() const;
  void set_maildata(const std::string& value);
  void set_maildata(std::string&& value);
  void set_maildata(const char* value);
  void set_maildata(const void* value, size_t size);
  std::string* mutable_maildata();
  std::string* release_maildata();
  void set_allocated_maildata(std::string* maildata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_maildata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_maildata(
      std::string* maildata);
  private:
  const std::string& _internal_maildata() const;
  void _internal_set_maildata(const std::string& value);
  std::string* _internal_mutable_maildata();
  public:

  // bytes equipForge = 10;
  void clear_equipforge();
  const std::string& equipforge() const;
  void set_equipforge(const std::string& value);
  void set_equipforge(std::string&& value);
  void set_equipforge(const char* value);
  void set_equipforge(const void* value, size_t size);
  std::string* mutable_equipforge();
  std::string* release_equipforge();
  void set_allocated_equipforge(std::string* equipforge);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_equipforge();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_equipforge(
      std::string* equipforge);
  private:
  const std::string& _internal_equipforge() const;
  void _internal_set_equipforge(const std::string& value);
  std::string* _internal_mutable_equipforge();
  public:

  // bytes cycleEvent = 11;
  void clear_cycleevent();
  const std::string& cycleevent() const;
  void set_cycleevent(const std::string& value);
  void set_cycleevent(std::string&& value);
  void set_cycleevent(const char* value);
  void set_cycleevent(const void* value, size_t size);
  std::string* mutable_cycleevent();
  std::string* release_cycleevent();
  void set_allocated_cycleevent(std::string* cycleevent);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cycleevent();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cycleevent(
      std::string* cycleevent);
  private:
  const std::string& _internal_cycleevent() const;
  void _internal_set_cycleevent(const std::string& value);
  std::string* _internal_mutable_cycleevent();
  public:

  // bytes npcData = 12;
  void clear_npcdata();
  const std::string& npcdata() const;
  void set_npcdata(const std::string& value);
  void set_npcdata(std::string&& value);
  void set_npcdata(const char* value);
  void set_npcdata(const void* value, size_t size);
  std::string* mutable_npcdata();
  std::string* release_npcdata();
  void set_allocated_npcdata(std::string* npcdata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_npcdata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_npcdata(
      std::string* npcdata);
  private:
  const std::string& _internal_npcdata() const;
  void _internal_set_npcdata(const std::string& value);
  std::string* _internal_mutable_npcdata();
  public:

  // bytes interactionData = 13;
  void clear_interactiondata();
  const std::string& interactiondata() const;
  void set_interactiondata(const std::string& value);
  void set_interactiondata(std::string&& value);
  void set_interactiondata(const char* value);
  void set_interactiondata(const void* value, size_t size);
  std::string* mutable_interactiondata();
  std::string* release_interactiondata();
  void set_allocated_interactiondata(std::string* interactiondata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_interactiondata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_interactiondata(
      std::string* interactiondata);
  private:
  const std::string& _internal_interactiondata() const;
  void _internal_set_interactiondata(const std::string& value);
  std::string* _internal_mutable_interactiondata();
  public:

  // bytes rollRecord = 14;
  void clear_rollrecord();
  const std::string& rollrecord() const;
  void set_rollrecord(const std::string& value);
  void set_rollrecord(std::string&& value);
  void set_rollrecord(const char* value);
  void set_rollrecord(const void* value, size_t size);
  std::string* mutable_rollrecord();
  std::string* release_rollrecord();
  void set_allocated_rollrecord(std::string* rollrecord);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rollrecord();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rollrecord(
      std::string* rollrecord);
  private:
  const std::string& _internal_rollrecord() const;
  void _internal_set_rollrecord(const std::string& value);
  std::string* _internal_mutable_rollrecord();
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.RoleDatas)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr basedata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scenedata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr herodata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr equipdata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr materialdata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currencydata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skilldata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fooddata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maildata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr equipforge_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cycleevent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr npcdata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interactiondata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rollrecord_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class LoginGameAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.LoginGameAck) */ {
 public:
  inline LoginGameAck() : LoginGameAck(nullptr) {};
  virtual ~LoginGameAck();

  LoginGameAck(const LoginGameAck& from);
  LoginGameAck(LoginGameAck&& from) noexcept
    : LoginGameAck() {
    *this = ::std::move(from);
  }

  inline LoginGameAck& operator=(const LoginGameAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginGameAck& operator=(LoginGameAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginGameAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginGameAck* internal_default_instance() {
    return reinterpret_cast<const LoginGameAck*>(
               &_LoginGameAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(LoginGameAck& a, LoginGameAck& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginGameAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginGameAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginGameAck* New() const final {
    return CreateMaybeMessage<LoginGameAck>(nullptr);
  }

  LoginGameAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginGameAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginGameAck& from);
  void MergeFrom(const LoginGameAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginGameAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.LoginGameAck";
  }
  protected:
  explicit LoginGameAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtIdFieldNumber = 4,
    kDatasFieldNumber = 3,
    kUserIdFieldNumber = 1,
    kRoleIdFieldNumber = 2,
    kPtTypeFieldNumber = 5,
  };
  // string ptId = 4;
  void clear_ptid();
  const std::string& ptid() const;
  void set_ptid(const std::string& value);
  void set_ptid(std::string&& value);
  void set_ptid(const char* value);
  void set_ptid(const char* value, size_t size);
  std::string* mutable_ptid();
  std::string* release_ptid();
  void set_allocated_ptid(std::string* ptid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ptid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ptid(
      std::string* ptid);
  private:
  const std::string& _internal_ptid() const;
  void _internal_set_ptid(const std::string& value);
  std::string* _internal_mutable_ptid();
  public:

  // .ss_proto.RoleDatas datas = 3;
  bool has_datas() const;
  private:
  bool _internal_has_datas() const;
  public:
  void clear_datas();
  const ::ss_proto::RoleDatas& datas() const;
  ::ss_proto::RoleDatas* release_datas();
  ::ss_proto::RoleDatas* mutable_datas();
  void set_allocated_datas(::ss_proto::RoleDatas* datas);
  private:
  const ::ss_proto::RoleDatas& _internal_datas() const;
  ::ss_proto::RoleDatas* _internal_mutable_datas();
  public:
  void unsafe_arena_set_allocated_datas(
      ::ss_proto::RoleDatas* datas);
  ::ss_proto::RoleDatas* unsafe_arena_release_datas();

  // int64 userId = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 roleId = 2;
  void clear_roleid();
  ::PROTOBUF_NAMESPACE_ID::int64 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_roleid() const;
  void _internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 ptType = 5;
  void clear_pttype();
  ::PROTOBUF_NAMESPACE_ID::int32 pttype() const;
  void set_pttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pttype() const;
  void _internal_set_pttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.LoginGameAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ptid_;
  ::ss_proto::RoleDatas* datas_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid_;
  ::PROTOBUF_NAMESPACE_ID::int32 pttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class LogoutGameReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.LogoutGameReq) */ {
 public:
  inline LogoutGameReq() : LogoutGameReq(nullptr) {};
  virtual ~LogoutGameReq();

  LogoutGameReq(const LogoutGameReq& from);
  LogoutGameReq(LogoutGameReq&& from) noexcept
    : LogoutGameReq() {
    *this = ::std::move(from);
  }

  inline LogoutGameReq& operator=(const LogoutGameReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutGameReq& operator=(LogoutGameReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogoutGameReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutGameReq* internal_default_instance() {
    return reinterpret_cast<const LogoutGameReq*>(
               &_LogoutGameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(LogoutGameReq& a, LogoutGameReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutGameReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogoutGameReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogoutGameReq* New() const final {
    return CreateMaybeMessage<LogoutGameReq>(nullptr);
  }

  LogoutGameReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogoutGameReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogoutGameReq& from);
  void MergeFrom(const LogoutGameReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutGameReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.LogoutGameReq";
  }
  protected:
  explicit LogoutGameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int64 userId = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.LogoutGameReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class LogoutGameAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.LogoutGameAck) */ {
 public:
  inline LogoutGameAck() : LogoutGameAck(nullptr) {};
  virtual ~LogoutGameAck();

  LogoutGameAck(const LogoutGameAck& from);
  LogoutGameAck(LogoutGameAck&& from) noexcept
    : LogoutGameAck() {
    *this = ::std::move(from);
  }

  inline LogoutGameAck& operator=(const LogoutGameAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutGameAck& operator=(LogoutGameAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogoutGameAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutGameAck* internal_default_instance() {
    return reinterpret_cast<const LogoutGameAck*>(
               &_LogoutGameAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(LogoutGameAck& a, LogoutGameAck& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutGameAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogoutGameAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogoutGameAck* New() const final {
    return CreateMaybeMessage<LogoutGameAck>(nullptr);
  }

  LogoutGameAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogoutGameAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogoutGameAck& from);
  void MergeFrom(const LogoutGameAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutGameAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.LogoutGameAck";
  }
  protected:
  explicit LogoutGameAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ss_proto.LogoutGameAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class CreateRoleReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.CreateRoleReq) */ {
 public:
  inline CreateRoleReq() : CreateRoleReq(nullptr) {};
  virtual ~CreateRoleReq();

  CreateRoleReq(const CreateRoleReq& from);
  CreateRoleReq(CreateRoleReq&& from) noexcept
    : CreateRoleReq() {
    *this = ::std::move(from);
  }

  inline CreateRoleReq& operator=(const CreateRoleReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoleReq& operator=(CreateRoleReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateRoleReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRoleReq* internal_default_instance() {
    return reinterpret_cast<const CreateRoleReq*>(
               &_CreateRoleReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CreateRoleReq& a, CreateRoleReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoleReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoleReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRoleReq* New() const final {
    return CreateMaybeMessage<CreateRoleReq>(nullptr);
  }

  CreateRoleReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRoleReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateRoleReq& from);
  void MergeFrom(const CreateRoleReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoleReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.CreateRoleReq";
  }
  protected:
  explicit CreateRoleReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleNameFieldNumber = 2,
    kFaceFieldNumber = 4,
    kUserIdFieldNumber = 1,
    kCharIdFieldNumber = 3,
  };
  // string roleName = 2;
  void clear_rolename();
  const std::string& rolename() const;
  void set_rolename(const std::string& value);
  void set_rolename(std::string&& value);
  void set_rolename(const char* value);
  void set_rolename(const char* value, size_t size);
  std::string* mutable_rolename();
  std::string* release_rolename();
  void set_allocated_rolename(std::string* rolename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rolename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rolename(
      std::string* rolename);
  private:
  const std::string& _internal_rolename() const;
  void _internal_set_rolename(const std::string& value);
  std::string* _internal_mutable_rolename();
  public:

  // string face = 4;
  void clear_face();
  const std::string& face() const;
  void set_face(const std::string& value);
  void set_face(std::string&& value);
  void set_face(const char* value);
  void set_face(const char* value, size_t size);
  std::string* mutable_face();
  std::string* release_face();
  void set_allocated_face(std::string* face);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_face();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_face(
      std::string* face);
  private:
  const std::string& _internal_face() const;
  void _internal_set_face(const std::string& value);
  std::string* _internal_mutable_face();
  public:

  // int64 userId = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 charId = 3;
  void clear_charid();
  ::PROTOBUF_NAMESPACE_ID::int32 charid() const;
  void set_charid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_charid() const;
  void _internal_set_charid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.CreateRoleReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rolename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr face_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  ::PROTOBUF_NAMESPACE_ID::int32 charid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class CreateRoleAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.CreateRoleAck) */ {
 public:
  inline CreateRoleAck() : CreateRoleAck(nullptr) {};
  virtual ~CreateRoleAck();

  CreateRoleAck(const CreateRoleAck& from);
  CreateRoleAck(CreateRoleAck&& from) noexcept
    : CreateRoleAck() {
    *this = ::std::move(from);
  }

  inline CreateRoleAck& operator=(const CreateRoleAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoleAck& operator=(CreateRoleAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateRoleAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRoleAck* internal_default_instance() {
    return reinterpret_cast<const CreateRoleAck*>(
               &_CreateRoleAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CreateRoleAck& a, CreateRoleAck& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoleAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoleAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRoleAck* New() const final {
    return CreateMaybeMessage<CreateRoleAck>(nullptr);
  }

  CreateRoleAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRoleAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateRoleAck& from);
  void MergeFrom(const CreateRoleAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoleAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.CreateRoleAck";
  }
  protected:
  explicit CreateRoleAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 2,
    kRoleIdFieldNumber = 1,
  };
  // .ss_proto.RoleDatas datas = 2;
  bool has_datas() const;
  private:
  bool _internal_has_datas() const;
  public:
  void clear_datas();
  const ::ss_proto::RoleDatas& datas() const;
  ::ss_proto::RoleDatas* release_datas();
  ::ss_proto::RoleDatas* mutable_datas();
  void set_allocated_datas(::ss_proto::RoleDatas* datas);
  private:
  const ::ss_proto::RoleDatas& _internal_datas() const;
  ::ss_proto::RoleDatas* _internal_mutable_datas();
  public:
  void unsafe_arena_set_allocated_datas(
      ::ss_proto::RoleDatas* datas);
  ::ss_proto::RoleDatas* unsafe_arena_release_datas();

  // int64 roleId = 1;
  void clear_roleid();
  ::PROTOBUF_NAMESPACE_ID::int64 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_roleid() const;
  void _internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.CreateRoleAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ss_proto::RoleDatas* datas_;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class SaveRoleReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.SaveRoleReq) */ {
 public:
  inline SaveRoleReq() : SaveRoleReq(nullptr) {};
  virtual ~SaveRoleReq();

  SaveRoleReq(const SaveRoleReq& from);
  SaveRoleReq(SaveRoleReq&& from) noexcept
    : SaveRoleReq() {
    *this = ::std::move(from);
  }

  inline SaveRoleReq& operator=(const SaveRoleReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveRoleReq& operator=(SaveRoleReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SaveRoleReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveRoleReq* internal_default_instance() {
    return reinterpret_cast<const SaveRoleReq*>(
               &_SaveRoleReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SaveRoleReq& a, SaveRoleReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveRoleReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveRoleReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaveRoleReq* New() const final {
    return CreateMaybeMessage<SaveRoleReq>(nullptr);
  }

  SaveRoleReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveRoleReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SaveRoleReq& from);
  void MergeFrom(const SaveRoleReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveRoleReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.SaveRoleReq";
  }
  protected:
  explicit SaveRoleReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 2,
    kRoleIdFieldNumber = 1,
    kSyncFieldNumber = 3,
  };
  // .ss_proto.RoleDatas datas = 2;
  bool has_datas() const;
  private:
  bool _internal_has_datas() const;
  public:
  void clear_datas();
  const ::ss_proto::RoleDatas& datas() const;
  ::ss_proto::RoleDatas* release_datas();
  ::ss_proto::RoleDatas* mutable_datas();
  void set_allocated_datas(::ss_proto::RoleDatas* datas);
  private:
  const ::ss_proto::RoleDatas& _internal_datas() const;
  ::ss_proto::RoleDatas* _internal_mutable_datas();
  public:
  void unsafe_arena_set_allocated_datas(
      ::ss_proto::RoleDatas* datas);
  ::ss_proto::RoleDatas* unsafe_arena_release_datas();

  // int64 roleId = 1;
  void clear_roleid();
  ::PROTOBUF_NAMESPACE_ID::int64 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_roleid() const;
  void _internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool sync = 3;
  void clear_sync();
  bool sync() const;
  void set_sync(bool value);
  private:
  bool _internal_sync() const;
  void _internal_set_sync(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.SaveRoleReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ss_proto::RoleDatas* datas_;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid_;
  bool sync_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class SaveRoleAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.SaveRoleAck) */ {
 public:
  inline SaveRoleAck() : SaveRoleAck(nullptr) {};
  virtual ~SaveRoleAck();

  SaveRoleAck(const SaveRoleAck& from);
  SaveRoleAck(SaveRoleAck&& from) noexcept
    : SaveRoleAck() {
    *this = ::std::move(from);
  }

  inline SaveRoleAck& operator=(const SaveRoleAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveRoleAck& operator=(SaveRoleAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SaveRoleAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveRoleAck* internal_default_instance() {
    return reinterpret_cast<const SaveRoleAck*>(
               &_SaveRoleAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SaveRoleAck& a, SaveRoleAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveRoleAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveRoleAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaveRoleAck* New() const final {
    return CreateMaybeMessage<SaveRoleAck>(nullptr);
  }

  SaveRoleAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveRoleAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SaveRoleAck& from);
  void MergeFrom(const SaveRoleAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveRoleAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.SaveRoleAck";
  }
  protected:
  explicit SaveRoleAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ss_proto.SaveRoleAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class KickUserNtf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.KickUserNtf) */ {
 public:
  inline KickUserNtf() : KickUserNtf(nullptr) {};
  virtual ~KickUserNtf();

  KickUserNtf(const KickUserNtf& from);
  KickUserNtf(KickUserNtf&& from) noexcept
    : KickUserNtf() {
    *this = ::std::move(from);
  }

  inline KickUserNtf& operator=(const KickUserNtf& from) {
    CopyFrom(from);
    return *this;
  }
  inline KickUserNtf& operator=(KickUserNtf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KickUserNtf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KickUserNtf* internal_default_instance() {
    return reinterpret_cast<const KickUserNtf*>(
               &_KickUserNtf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(KickUserNtf& a, KickUserNtf& b) {
    a.Swap(&b);
  }
  inline void Swap(KickUserNtf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KickUserNtf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KickUserNtf* New() const final {
    return CreateMaybeMessage<KickUserNtf>(nullptr);
  }

  KickUserNtf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KickUserNtf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KickUserNtf& from);
  void MergeFrom(const KickUserNtf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KickUserNtf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.KickUserNtf";
  }
  protected:
  explicit KickUserNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kTokenFieldNumber = 3,
    kUserIdFieldNumber = 1,
  };
  // string account = 2;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_account();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_account(
      std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string token = 3;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int64 userId = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.KickUserNtf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class SyncRole PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.SyncRole) */ {
 public:
  inline SyncRole() : SyncRole(nullptr) {};
  virtual ~SyncRole();

  SyncRole(const SyncRole& from);
  SyncRole(SyncRole&& from) noexcept
    : SyncRole() {
    *this = ::std::move(from);
  }

  inline SyncRole& operator=(const SyncRole& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncRole& operator=(SyncRole&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncRole& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncRole* internal_default_instance() {
    return reinterpret_cast<const SyncRole*>(
               &_SyncRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SyncRole& a, SyncRole& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncRole* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncRole* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncRole* New() const final {
    return CreateMaybeMessage<SyncRole>(nullptr);
  }

  SyncRole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncRole>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncRole& from);
  void MergeFrom(const SyncRole& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncRole* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.SyncRole";
  }
  protected:
  explicit SyncRole(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kRoleIdFieldNumber = 2,
    kSvrIdFieldNumber = 3,
  };
  // int64 userId = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 roleId = 2;
  void clear_roleid();
  ::PROTOBUF_NAMESPACE_ID::int64 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_roleid() const;
  void _internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 svrId = 3;
  void clear_svrid();
  ::PROTOBUF_NAMESPACE_ID::int64 svrid() const;
  void set_svrid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_svrid() const;
  void _internal_set_svrid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.SyncRole)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid_;
  ::PROTOBUF_NAMESPACE_ID::int64 svrid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class SyncRoleNtf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.SyncRoleNtf) */ {
 public:
  inline SyncRoleNtf() : SyncRoleNtf(nullptr) {};
  virtual ~SyncRoleNtf();

  SyncRoleNtf(const SyncRoleNtf& from);
  SyncRoleNtf(SyncRoleNtf&& from) noexcept
    : SyncRoleNtf() {
    *this = ::std::move(from);
  }

  inline SyncRoleNtf& operator=(const SyncRoleNtf& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncRoleNtf& operator=(SyncRoleNtf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncRoleNtf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncRoleNtf* internal_default_instance() {
    return reinterpret_cast<const SyncRoleNtf*>(
               &_SyncRoleNtf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SyncRoleNtf& a, SyncRoleNtf& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncRoleNtf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncRoleNtf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncRoleNtf* New() const final {
    return CreateMaybeMessage<SyncRoleNtf>(nullptr);
  }

  SyncRoleNtf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncRoleNtf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncRoleNtf& from);
  void MergeFrom(const SyncRoleNtf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncRoleNtf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.SyncRoleNtf";
  }
  protected:
  explicit SyncRoleNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnlineFieldNumber = 1,
    kOfflineFieldNumber = 2,
  };
  // repeated .ss_proto.SyncRole online = 1;
  int online_size() const;
  private:
  int _internal_online_size() const;
  public:
  void clear_online();
  ::ss_proto::SyncRole* mutable_online(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ss_proto::SyncRole >*
      mutable_online();
  private:
  const ::ss_proto::SyncRole& _internal_online(int index) const;
  ::ss_proto::SyncRole* _internal_add_online();
  public:
  const ::ss_proto::SyncRole& online(int index) const;
  ::ss_proto::SyncRole* add_online();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ss_proto::SyncRole >&
      online() const;

  // repeated int64 offline = 2;
  int offline_size() const;
  private:
  int _internal_offline_size() const;
  public:
  void clear_offline();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offline(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_offline() const;
  void _internal_add_offline(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_offline();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 offline(int index) const;
  void set_offline(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_offline(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      offline() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_offline();

  // @@protoc_insertion_point(class_scope:ss_proto.SyncRoleNtf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ss_proto::SyncRole > online_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > offline_;
  mutable std::atomic<int> _offline_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class SearchBossReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.SearchBossReq) */ {
 public:
  inline SearchBossReq() : SearchBossReq(nullptr) {};
  virtual ~SearchBossReq();

  SearchBossReq(const SearchBossReq& from);
  SearchBossReq(SearchBossReq&& from) noexcept
    : SearchBossReq() {
    *this = ::std::move(from);
  }

  inline SearchBossReq& operator=(const SearchBossReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchBossReq& operator=(SearchBossReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchBossReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchBossReq* internal_default_instance() {
    return reinterpret_cast<const SearchBossReq*>(
               &_SearchBossReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SearchBossReq& a, SearchBossReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchBossReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchBossReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchBossReq* New() const final {
    return CreateMaybeMessage<SearchBossReq>(nullptr);
  }

  SearchBossReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchBossReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchBossReq& from);
  void MergeFrom(const SearchBossReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchBossReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.SearchBossReq";
  }
  protected:
  explicit SearchBossReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamFieldNumber = 4,
    kUserIdFieldNumber = 1,
    kSvrIdFieldNumber = 2,
    kSnakeIdFieldNumber = 3,
    kSceneIdFieldNumber = 5,
    kCheatFieldNumber = 6,
  };
  // bytes team = 4;
  void clear_team();
  const std::string& team() const;
  void set_team(const std::string& value);
  void set_team(std::string&& value);
  void set_team(const char* value);
  void set_team(const void* value, size_t size);
  std::string* mutable_team();
  std::string* release_team();
  void set_allocated_team(std::string* team);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_team();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_team(
      std::string* team);
  private:
  const std::string& _internal_team() const;
  void _internal_set_team(const std::string& value);
  std::string* _internal_mutable_team();
  public:

  // int64 userId = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 svrId = 2;
  void clear_svrid();
  ::PROTOBUF_NAMESPACE_ID::int64 svrid() const;
  void set_svrid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_svrid() const;
  void _internal_set_svrid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 snakeId = 3;
  void clear_snakeid();
  ::PROTOBUF_NAMESPACE_ID::int32 snakeid() const;
  void set_snakeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_snakeid() const;
  void _internal_set_snakeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sceneId = 5;
  void clear_sceneid();
  ::PROTOBUF_NAMESPACE_ID::int32 sceneid() const;
  void set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sceneid() const;
  void _internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cheat = 6;
  void clear_cheat();
  ::PROTOBUF_NAMESPACE_ID::int32 cheat() const;
  void set_cheat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cheat() const;
  void _internal_set_cheat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.SearchBossReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  ::PROTOBUF_NAMESPACE_ID::int64 svrid_;
  ::PROTOBUF_NAMESPACE_ID::int32 snakeid_;
  ::PROTOBUF_NAMESPACE_ID::int32 sceneid_;
  ::PROTOBUF_NAMESPACE_ID::int32 cheat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class SearchBossAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.SearchBossAck) */ {
 public:
  inline SearchBossAck() : SearchBossAck(nullptr) {};
  virtual ~SearchBossAck();

  SearchBossAck(const SearchBossAck& from);
  SearchBossAck(SearchBossAck&& from) noexcept
    : SearchBossAck() {
    *this = ::std::move(from);
  }

  inline SearchBossAck& operator=(const SearchBossAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchBossAck& operator=(SearchBossAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchBossAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchBossAck* internal_default_instance() {
    return reinterpret_cast<const SearchBossAck*>(
               &_SearchBossAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SearchBossAck& a, SearchBossAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchBossAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchBossAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchBossAck* New() const final {
    return CreateMaybeMessage<SearchBossAck>(nullptr);
  }

  SearchBossAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchBossAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchBossAck& from);
  void MergeFrom(const SearchBossAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchBossAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.SearchBossAck";
  }
  protected:
  explicit SearchBossAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartNtfFieldNumber = 2,
    kUpdateNtfFieldNumber = 3,
    kEndNtfFieldNumber = 4,
    kUserIdFieldNumber = 1,
  };
  // bytes startNtf = 2;
  void clear_startntf();
  const std::string& startntf() const;
  void set_startntf(const std::string& value);
  void set_startntf(std::string&& value);
  void set_startntf(const char* value);
  void set_startntf(const void* value, size_t size);
  std::string* mutable_startntf();
  std::string* release_startntf();
  void set_allocated_startntf(std::string* startntf);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_startntf();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_startntf(
      std::string* startntf);
  private:
  const std::string& _internal_startntf() const;
  void _internal_set_startntf(const std::string& value);
  std::string* _internal_mutable_startntf();
  public:

  // bytes updateNtf = 3;
  void clear_updatentf();
  const std::string& updatentf() const;
  void set_updatentf(const std::string& value);
  void set_updatentf(std::string&& value);
  void set_updatentf(const char* value);
  void set_updatentf(const void* value, size_t size);
  std::string* mutable_updatentf();
  std::string* release_updatentf();
  void set_allocated_updatentf(std::string* updatentf);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_updatentf();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_updatentf(
      std::string* updatentf);
  private:
  const std::string& _internal_updatentf() const;
  void _internal_set_updatentf(const std::string& value);
  std::string* _internal_mutable_updatentf();
  public:

  // bytes endNtf = 4;
  void clear_endntf();
  const std::string& endntf() const;
  void set_endntf(const std::string& value);
  void set_endntf(std::string&& value);
  void set_endntf(const char* value);
  void set_endntf(const void* value, size_t size);
  std::string* mutable_endntf();
  std::string* release_endntf();
  void set_allocated_endntf(std::string* endntf);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_endntf();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_endntf(
      std::string* endntf);
  private:
  const std::string& _internal_endntf() const;
  void _internal_set_endntf(const std::string& value);
  std::string* _internal_mutable_endntf();
  public:

  // int64 userId = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.SearchBossAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr startntf_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updatentf_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endntf_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class LogDataReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.LogDataReq) */ {
 public:
  inline LogDataReq() : LogDataReq(nullptr) {};
  virtual ~LogDataReq();

  LogDataReq(const LogDataReq& from);
  LogDataReq(LogDataReq&& from) noexcept
    : LogDataReq() {
    *this = ::std::move(from);
  }

  inline LogDataReq& operator=(const LogDataReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogDataReq& operator=(LogDataReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogDataReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogDataReq* internal_default_instance() {
    return reinterpret_cast<const LogDataReq*>(
               &_LogDataReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(LogDataReq& a, LogDataReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LogDataReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogDataReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogDataReq* New() const final {
    return CreateMaybeMessage<LogDataReq>(nullptr);
  }

  LogDataReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogDataReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogDataReq& from);
  void MergeFrom(const LogDataReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogDataReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.LogDataReq";
  }
  protected:
  explicit LogDataReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .ss_proto.LogDataType type = 1;
  void clear_type();
  ::ss_proto::LogDataType type() const;
  void set_type(::ss_proto::LogDataType value);
  private:
  ::ss_proto::LogDataType _internal_type() const;
  void _internal_set_type(::ss_proto::LogDataType value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.LogDataReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class LogDataAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.LogDataAck) */ {
 public:
  inline LogDataAck() : LogDataAck(nullptr) {};
  virtual ~LogDataAck();

  LogDataAck(const LogDataAck& from);
  LogDataAck(LogDataAck&& from) noexcept
    : LogDataAck() {
    *this = ::std::move(from);
  }

  inline LogDataAck& operator=(const LogDataAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogDataAck& operator=(LogDataAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogDataAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogDataAck* internal_default_instance() {
    return reinterpret_cast<const LogDataAck*>(
               &_LogDataAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(LogDataAck& a, LogDataAck& b) {
    a.Swap(&b);
  }
  inline void Swap(LogDataAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogDataAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogDataAck* New() const final {
    return CreateMaybeMessage<LogDataAck>(nullptr);
  }

  LogDataAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogDataAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogDataAck& from);
  void MergeFrom(const LogDataAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogDataAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.LogDataAck";
  }
  protected:
  explicit LogDataAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ss_proto.LogDataAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class LoadRoleSkillReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.LoadRoleSkillReq) */ {
 public:
  inline LoadRoleSkillReq() : LoadRoleSkillReq(nullptr) {};
  virtual ~LoadRoleSkillReq();

  LoadRoleSkillReq(const LoadRoleSkillReq& from);
  LoadRoleSkillReq(LoadRoleSkillReq&& from) noexcept
    : LoadRoleSkillReq() {
    *this = ::std::move(from);
  }

  inline LoadRoleSkillReq& operator=(const LoadRoleSkillReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadRoleSkillReq& operator=(LoadRoleSkillReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadRoleSkillReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadRoleSkillReq* internal_default_instance() {
    return reinterpret_cast<const LoadRoleSkillReq*>(
               &_LoadRoleSkillReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(LoadRoleSkillReq& a, LoadRoleSkillReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadRoleSkillReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadRoleSkillReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadRoleSkillReq* New() const final {
    return CreateMaybeMessage<LoadRoleSkillReq>(nullptr);
  }

  LoadRoleSkillReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadRoleSkillReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadRoleSkillReq& from);
  void MergeFrom(const LoadRoleSkillReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadRoleSkillReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.LoadRoleSkillReq";
  }
  protected:
  explicit LoadRoleSkillReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
  };
  // int64 roleId = 1;
  void clear_roleid();
  ::PROTOBUF_NAMESPACE_ID::int64 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_roleid() const;
  void _internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.LoadRoleSkillReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class LoadRoleSkillAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.LoadRoleSkillAck) */ {
 public:
  inline LoadRoleSkillAck() : LoadRoleSkillAck(nullptr) {};
  virtual ~LoadRoleSkillAck();

  LoadRoleSkillAck(const LoadRoleSkillAck& from);
  LoadRoleSkillAck(LoadRoleSkillAck&& from) noexcept
    : LoadRoleSkillAck() {
    *this = ::std::move(from);
  }

  inline LoadRoleSkillAck& operator=(const LoadRoleSkillAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadRoleSkillAck& operator=(LoadRoleSkillAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadRoleSkillAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadRoleSkillAck* internal_default_instance() {
    return reinterpret_cast<const LoadRoleSkillAck*>(
               &_LoadRoleSkillAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(LoadRoleSkillAck& a, LoadRoleSkillAck& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadRoleSkillAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadRoleSkillAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadRoleSkillAck* New() const final {
    return CreateMaybeMessage<LoadRoleSkillAck>(nullptr);
  }

  LoadRoleSkillAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadRoleSkillAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadRoleSkillAck& from);
  void MergeFrom(const LoadRoleSkillAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadRoleSkillAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.LoadRoleSkillAck";
  }
  protected:
  explicit LoadRoleSkillAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillDataFieldNumber = 1,
  };
  // bytes skillData = 1;
  void clear_skilldata();
  const std::string& skilldata() const;
  void set_skilldata(const std::string& value);
  void set_skilldata(std::string&& value);
  void set_skilldata(const char* value);
  void set_skilldata(const void* value, size_t size);
  std::string* mutable_skilldata();
  std::string* release_skilldata();
  void set_allocated_skilldata(std::string* skilldata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_skilldata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_skilldata(
      std::string* skilldata);
  private:
  const std::string& _internal_skilldata() const;
  void _internal_set_skilldata(const std::string& value);
  std::string* _internal_mutable_skilldata();
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.LoadRoleSkillAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skilldata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class LoadRolePackageReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.LoadRolePackageReq) */ {
 public:
  inline LoadRolePackageReq() : LoadRolePackageReq(nullptr) {};
  virtual ~LoadRolePackageReq();

  LoadRolePackageReq(const LoadRolePackageReq& from);
  LoadRolePackageReq(LoadRolePackageReq&& from) noexcept
    : LoadRolePackageReq() {
    *this = ::std::move(from);
  }

  inline LoadRolePackageReq& operator=(const LoadRolePackageReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadRolePackageReq& operator=(LoadRolePackageReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadRolePackageReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadRolePackageReq* internal_default_instance() {
    return reinterpret_cast<const LoadRolePackageReq*>(
               &_LoadRolePackageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(LoadRolePackageReq& a, LoadRolePackageReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadRolePackageReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadRolePackageReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadRolePackageReq* New() const final {
    return CreateMaybeMessage<LoadRolePackageReq>(nullptr);
  }

  LoadRolePackageReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadRolePackageReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadRolePackageReq& from);
  void MergeFrom(const LoadRolePackageReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadRolePackageReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.LoadRolePackageReq";
  }
  protected:
  explicit LoadRolePackageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
    kLoadItemTypeFieldNumber = 2,
  };
  // int64 roleId = 1;
  void clear_roleid();
  ::PROTOBUF_NAMESPACE_ID::int64 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_roleid() const;
  void _internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 loadItemType = 2;
  void clear_loaditemtype();
  ::PROTOBUF_NAMESPACE_ID::int32 loaditemtype() const;
  void set_loaditemtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_loaditemtype() const;
  void _internal_set_loaditemtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.LoadRolePackageReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid_;
  ::PROTOBUF_NAMESPACE_ID::int32 loaditemtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class LoadRolePackageAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.LoadRolePackageAck) */ {
 public:
  inline LoadRolePackageAck() : LoadRolePackageAck(nullptr) {};
  virtual ~LoadRolePackageAck();

  LoadRolePackageAck(const LoadRolePackageAck& from);
  LoadRolePackageAck(LoadRolePackageAck&& from) noexcept
    : LoadRolePackageAck() {
    *this = ::std::move(from);
  }

  inline LoadRolePackageAck& operator=(const LoadRolePackageAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadRolePackageAck& operator=(LoadRolePackageAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadRolePackageAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadRolePackageAck* internal_default_instance() {
    return reinterpret_cast<const LoadRolePackageAck*>(
               &_LoadRolePackageAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(LoadRolePackageAck& a, LoadRolePackageAck& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadRolePackageAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadRolePackageAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadRolePackageAck* New() const final {
    return CreateMaybeMessage<LoadRolePackageAck>(nullptr);
  }

  LoadRolePackageAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadRolePackageAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadRolePackageAck& from);
  void MergeFrom(const LoadRolePackageAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadRolePackageAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.LoadRolePackageAck";
  }
  protected:
  explicit LoadRolePackageAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsDataFieldNumber = 1,
  };
  // bytes itemsData = 1;
  void clear_itemsdata();
  const std::string& itemsdata() const;
  void set_itemsdata(const std::string& value);
  void set_itemsdata(std::string&& value);
  void set_itemsdata(const char* value);
  void set_itemsdata(const void* value, size_t size);
  std::string* mutable_itemsdata();
  std::string* release_itemsdata();
  void set_allocated_itemsdata(std::string* itemsdata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_itemsdata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_itemsdata(
      std::string* itemsdata);
  private:
  const std::string& _internal_itemsdata() const;
  void _internal_set_itemsdata(const std::string& value);
  std::string* _internal_mutable_itemsdata();
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.LoadRolePackageAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr itemsdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class SaveRolePackageReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.SaveRolePackageReq) */ {
 public:
  inline SaveRolePackageReq() : SaveRolePackageReq(nullptr) {};
  virtual ~SaveRolePackageReq();

  SaveRolePackageReq(const SaveRolePackageReq& from);
  SaveRolePackageReq(SaveRolePackageReq&& from) noexcept
    : SaveRolePackageReq() {
    *this = ::std::move(from);
  }

  inline SaveRolePackageReq& operator=(const SaveRolePackageReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveRolePackageReq& operator=(SaveRolePackageReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SaveRolePackageReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveRolePackageReq* internal_default_instance() {
    return reinterpret_cast<const SaveRolePackageReq*>(
               &_SaveRolePackageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SaveRolePackageReq& a, SaveRolePackageReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveRolePackageReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveRolePackageReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaveRolePackageReq* New() const final {
    return CreateMaybeMessage<SaveRolePackageReq>(nullptr);
  }

  SaveRolePackageReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveRolePackageReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SaveRolePackageReq& from);
  void MergeFrom(const SaveRolePackageReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveRolePackageReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.SaveRolePackageReq";
  }
  protected:
  explicit SaveRolePackageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemDataFieldNumber = 3,
    kRoleIdFieldNumber = 1,
    kItemTypeFieldNumber = 2,
  };
  // bytes itemData = 3;
  void clear_itemdata();
  const std::string& itemdata() const;
  void set_itemdata(const std::string& value);
  void set_itemdata(std::string&& value);
  void set_itemdata(const char* value);
  void set_itemdata(const void* value, size_t size);
  std::string* mutable_itemdata();
  std::string* release_itemdata();
  void set_allocated_itemdata(std::string* itemdata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_itemdata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_itemdata(
      std::string* itemdata);
  private:
  const std::string& _internal_itemdata() const;
  void _internal_set_itemdata(const std::string& value);
  std::string* _internal_mutable_itemdata();
  public:

  // int64 roleId = 1;
  void clear_roleid();
  ::PROTOBUF_NAMESPACE_ID::int64 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_roleid() const;
  void _internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 ItemType = 2;
  void clear_itemtype();
  ::PROTOBUF_NAMESPACE_ID::int32 itemtype() const;
  void set_itemtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_itemtype() const;
  void _internal_set_itemtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.SaveRolePackageReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr itemdata_;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid_;
  ::PROTOBUF_NAMESPACE_ID::int32 itemtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class SaveRolePackageAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.SaveRolePackageAck) */ {
 public:
  inline SaveRolePackageAck() : SaveRolePackageAck(nullptr) {};
  virtual ~SaveRolePackageAck();

  SaveRolePackageAck(const SaveRolePackageAck& from);
  SaveRolePackageAck(SaveRolePackageAck&& from) noexcept
    : SaveRolePackageAck() {
    *this = ::std::move(from);
  }

  inline SaveRolePackageAck& operator=(const SaveRolePackageAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveRolePackageAck& operator=(SaveRolePackageAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SaveRolePackageAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveRolePackageAck* internal_default_instance() {
    return reinterpret_cast<const SaveRolePackageAck*>(
               &_SaveRolePackageAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SaveRolePackageAck& a, SaveRolePackageAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveRolePackageAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveRolePackageAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaveRolePackageAck* New() const final {
    return CreateMaybeMessage<SaveRolePackageAck>(nullptr);
  }

  SaveRolePackageAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveRolePackageAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SaveRolePackageAck& from);
  void MergeFrom(const SaveRolePackageAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveRolePackageAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.SaveRolePackageAck";
  }
  protected:
  explicit SaveRolePackageAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ss_proto.SaveRolePackageAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class FriendAddReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.FriendAddReq) */ {
 public:
  inline FriendAddReq() : FriendAddReq(nullptr) {};
  virtual ~FriendAddReq();

  FriendAddReq(const FriendAddReq& from);
  FriendAddReq(FriendAddReq&& from) noexcept
    : FriendAddReq() {
    *this = ::std::move(from);
  }

  inline FriendAddReq& operator=(const FriendAddReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendAddReq& operator=(FriendAddReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendAddReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendAddReq* internal_default_instance() {
    return reinterpret_cast<const FriendAddReq*>(
               &_FriendAddReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(FriendAddReq& a, FriendAddReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendAddReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendAddReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendAddReq* New() const final {
    return CreateMaybeMessage<FriendAddReq>(nullptr);
  }

  FriendAddReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendAddReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendAddReq& from);
  void MergeFrom(const FriendAddReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendAddReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.FriendAddReq";
  }
  protected:
  explicit FriendAddReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcIdFieldNumber = 1,
    kDestIdFieldNumber = 2,
  };
  // int64 srcId = 1;
  void clear_srcid();
  ::PROTOBUF_NAMESPACE_ID::int64 srcid() const;
  void set_srcid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_srcid() const;
  void _internal_set_srcid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 destId = 2;
  void clear_destid();
  ::PROTOBUF_NAMESPACE_ID::int64 destid() const;
  void set_destid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_destid() const;
  void _internal_set_destid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.FriendAddReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 srcid_;
  ::PROTOBUF_NAMESPACE_ID::int64 destid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class FriendAddAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.FriendAddAck) */ {
 public:
  inline FriendAddAck() : FriendAddAck(nullptr) {};
  virtual ~FriendAddAck();

  FriendAddAck(const FriendAddAck& from);
  FriendAddAck(FriendAddAck&& from) noexcept
    : FriendAddAck() {
    *this = ::std::move(from);
  }

  inline FriendAddAck& operator=(const FriendAddAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendAddAck& operator=(FriendAddAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendAddAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendAddAck* internal_default_instance() {
    return reinterpret_cast<const FriendAddAck*>(
               &_FriendAddAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(FriendAddAck& a, FriendAddAck& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendAddAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendAddAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendAddAck* New() const final {
    return CreateMaybeMessage<FriendAddAck>(nullptr);
  }

  FriendAddAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendAddAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendAddAck& from);
  void MergeFrom(const FriendAddAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendAddAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.FriendAddAck";
  }
  protected:
  explicit FriendAddAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ss_proto.FriendAddAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class FriendDelReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.FriendDelReq) */ {
 public:
  inline FriendDelReq() : FriendDelReq(nullptr) {};
  virtual ~FriendDelReq();

  FriendDelReq(const FriendDelReq& from);
  FriendDelReq(FriendDelReq&& from) noexcept
    : FriendDelReq() {
    *this = ::std::move(from);
  }

  inline FriendDelReq& operator=(const FriendDelReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendDelReq& operator=(FriendDelReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendDelReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendDelReq* internal_default_instance() {
    return reinterpret_cast<const FriendDelReq*>(
               &_FriendDelReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(FriendDelReq& a, FriendDelReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendDelReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendDelReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendDelReq* New() const final {
    return CreateMaybeMessage<FriendDelReq>(nullptr);
  }

  FriendDelReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendDelReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendDelReq& from);
  void MergeFrom(const FriendDelReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendDelReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.FriendDelReq";
  }
  protected:
  explicit FriendDelReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcIdFieldNumber = 1,
    kDestIdFieldNumber = 2,
  };
  // int64 srcId = 1;
  void clear_srcid();
  ::PROTOBUF_NAMESPACE_ID::int64 srcid() const;
  void set_srcid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_srcid() const;
  void _internal_set_srcid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 destId = 2;
  void clear_destid();
  ::PROTOBUF_NAMESPACE_ID::int64 destid() const;
  void set_destid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_destid() const;
  void _internal_set_destid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.FriendDelReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 srcid_;
  ::PROTOBUF_NAMESPACE_ID::int64 destid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class FriendDelAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.FriendDelAck) */ {
 public:
  inline FriendDelAck() : FriendDelAck(nullptr) {};
  virtual ~FriendDelAck();

  FriendDelAck(const FriendDelAck& from);
  FriendDelAck(FriendDelAck&& from) noexcept
    : FriendDelAck() {
    *this = ::std::move(from);
  }

  inline FriendDelAck& operator=(const FriendDelAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendDelAck& operator=(FriendDelAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendDelAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendDelAck* internal_default_instance() {
    return reinterpret_cast<const FriendDelAck*>(
               &_FriendDelAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(FriendDelAck& a, FriendDelAck& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendDelAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendDelAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendDelAck* New() const final {
    return CreateMaybeMessage<FriendDelAck>(nullptr);
  }

  FriendDelAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendDelAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendDelAck& from);
  void MergeFrom(const FriendDelAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendDelAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.FriendDelAck";
  }
  protected:
  explicit FriendDelAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ss_proto.FriendDelAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class FriendInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.FriendInfo) */ {
 public:
  inline FriendInfo() : FriendInfo(nullptr) {};
  virtual ~FriendInfo();

  FriendInfo(const FriendInfo& from);
  FriendInfo(FriendInfo&& from) noexcept
    : FriendInfo() {
    *this = ::std::move(from);
  }

  inline FriendInfo& operator=(const FriendInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendInfo& operator=(FriendInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendInfo* internal_default_instance() {
    return reinterpret_cast<const FriendInfo*>(
               &_FriendInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(FriendInfo& a, FriendInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendInfo* New() const final {
    return CreateMaybeMessage<FriendInfo>(nullptr);
  }

  FriendInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendInfo& from);
  void MergeFrom(const FriendInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.FriendInfo";
  }
  protected:
  explicit FriendInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // int64 roleId = 1;
  void clear_roleid();
  ::PROTOBUF_NAMESPACE_ID::int64 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_roleid() const;
  void _internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 flag = 2;
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::int64 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.FriendInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid_;
  ::PROTOBUF_NAMESPACE_ID::int64 flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class FriendListReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.FriendListReq) */ {
 public:
  inline FriendListReq() : FriendListReq(nullptr) {};
  virtual ~FriendListReq();

  FriendListReq(const FriendListReq& from);
  FriendListReq(FriendListReq&& from) noexcept
    : FriendListReq() {
    *this = ::std::move(from);
  }

  inline FriendListReq& operator=(const FriendListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendListReq& operator=(FriendListReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendListReq* internal_default_instance() {
    return reinterpret_cast<const FriendListReq*>(
               &_FriendListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(FriendListReq& a, FriendListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendListReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendListReq* New() const final {
    return CreateMaybeMessage<FriendListReq>(nullptr);
  }

  FriendListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendListReq& from);
  void MergeFrom(const FriendListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.FriendListReq";
  }
  protected:
  explicit FriendListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcIdFieldNumber = 1,
  };
  // int64 srcId = 1;
  void clear_srcid();
  ::PROTOBUF_NAMESPACE_ID::int64 srcid() const;
  void set_srcid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_srcid() const;
  void _internal_set_srcid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.FriendListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 srcid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class FriendListAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.FriendListAck) */ {
 public:
  inline FriendListAck() : FriendListAck(nullptr) {};
  virtual ~FriendListAck();

  FriendListAck(const FriendListAck& from);
  FriendListAck(FriendListAck&& from) noexcept
    : FriendListAck() {
    *this = ::std::move(from);
  }

  inline FriendListAck& operator=(const FriendListAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendListAck& operator=(FriendListAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendListAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendListAck* internal_default_instance() {
    return reinterpret_cast<const FriendListAck*>(
               &_FriendListAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(FriendListAck& a, FriendListAck& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendListAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendListAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendListAck* New() const final {
    return CreateMaybeMessage<FriendListAck>(nullptr);
  }

  FriendListAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendListAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendListAck& from);
  void MergeFrom(const FriendListAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendListAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.FriendListAck";
  }
  protected:
  explicit FriendListAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 1,
  };
  // repeated .ss_proto.FriendInfo friends = 1;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  ::ss_proto::FriendInfo* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ss_proto::FriendInfo >*
      mutable_friends();
  private:
  const ::ss_proto::FriendInfo& _internal_friends(int index) const;
  ::ss_proto::FriendInfo* _internal_add_friends();
  public:
  const ::ss_proto::FriendInfo& friends(int index) const;
  ::ss_proto::FriendInfo* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ss_proto::FriendInfo >&
      friends() const;

  // @@protoc_insertion_point(class_scope:ss_proto.FriendListAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ss_proto::FriendInfo > friends_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class RoleBoardReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.RoleBoardReq) */ {
 public:
  inline RoleBoardReq() : RoleBoardReq(nullptr) {};
  virtual ~RoleBoardReq();

  RoleBoardReq(const RoleBoardReq& from);
  RoleBoardReq(RoleBoardReq&& from) noexcept
    : RoleBoardReq() {
    *this = ::std::move(from);
  }

  inline RoleBoardReq& operator=(const RoleBoardReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleBoardReq& operator=(RoleBoardReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoleBoardReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleBoardReq* internal_default_instance() {
    return reinterpret_cast<const RoleBoardReq*>(
               &_RoleBoardReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(RoleBoardReq& a, RoleBoardReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleBoardReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleBoardReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleBoardReq* New() const final {
    return CreateMaybeMessage<RoleBoardReq>(nullptr);
  }

  RoleBoardReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleBoardReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoleBoardReq& from);
  void MergeFrom(const RoleBoardReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleBoardReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.RoleBoardReq";
  }
  protected:
  explicit RoleBoardReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdsFieldNumber = 1,
    kSmallFieldNumber = 2,
  };
  // repeated int64 roleIds = 1;
  int roleids_size() const;
  private:
  int _internal_roleids_size() const;
  public:
  void clear_roleids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_roleids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_roleids() const;
  void _internal_add_roleids(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_roleids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 roleids(int index) const;
  void set_roleids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_roleids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      roleids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_roleids();

  // bool small = 2;
  void clear_small();
  bool small() const;
  void set_small(bool value);
  private:
  bool _internal_small() const;
  void _internal_set_small(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.RoleBoardReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > roleids_;
  mutable std::atomic<int> _roleids_cached_byte_size_;
  bool small_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class RoleBoardAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.RoleBoardAck) */ {
 public:
  inline RoleBoardAck() : RoleBoardAck(nullptr) {};
  virtual ~RoleBoardAck();

  RoleBoardAck(const RoleBoardAck& from);
  RoleBoardAck(RoleBoardAck&& from) noexcept
    : RoleBoardAck() {
    *this = ::std::move(from);
  }

  inline RoleBoardAck& operator=(const RoleBoardAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleBoardAck& operator=(RoleBoardAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoleBoardAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleBoardAck* internal_default_instance() {
    return reinterpret_cast<const RoleBoardAck*>(
               &_RoleBoardAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(RoleBoardAck& a, RoleBoardAck& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleBoardAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleBoardAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleBoardAck* New() const final {
    return CreateMaybeMessage<RoleBoardAck>(nullptr);
  }

  RoleBoardAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleBoardAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoleBoardAck& from);
  void MergeFrom(const RoleBoardAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleBoardAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.RoleBoardAck";
  }
  protected:
  explicit RoleBoardAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // bytes datas = 1;
  void clear_datas();
  const std::string& datas() const;
  void set_datas(const std::string& value);
  void set_datas(std::string&& value);
  void set_datas(const char* value);
  void set_datas(const void* value, size_t size);
  std::string* mutable_datas();
  std::string* release_datas();
  void set_allocated_datas(std::string* datas);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_datas();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_datas(
      std::string* datas);
  private:
  const std::string& _internal_datas() const;
  void _internal_set_datas(const std::string& value);
  std::string* _internal_mutable_datas();
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.RoleBoardAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datas_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class RoleMailReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.RoleMailReq) */ {
 public:
  inline RoleMailReq() : RoleMailReq(nullptr) {};
  virtual ~RoleMailReq();

  RoleMailReq(const RoleMailReq& from);
  RoleMailReq(RoleMailReq&& from) noexcept
    : RoleMailReq() {
    *this = ::std::move(from);
  }

  inline RoleMailReq& operator=(const RoleMailReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleMailReq& operator=(RoleMailReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoleMailReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleMailReq* internal_default_instance() {
    return reinterpret_cast<const RoleMailReq*>(
               &_RoleMailReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(RoleMailReq& a, RoleMailReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleMailReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleMailReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleMailReq* New() const final {
    return CreateMaybeMessage<RoleMailReq>(nullptr);
  }

  RoleMailReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleMailReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoleMailReq& from);
  void MergeFrom(const RoleMailReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleMailReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.RoleMailReq";
  }
  protected:
  explicit RoleMailReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 2,
    kLastMailIdFieldNumber = 1,
    kCountFieldNumber = 4,
    kCreateTimeFieldNumber = 3,
  };
  // int64 roleId = 2;
  void clear_roleid();
  ::PROTOBUF_NAMESPACE_ID::int64 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_roleid() const;
  void _internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 lastMailId = 1;
  void clear_lastmailid();
  ::PROTOBUF_NAMESPACE_ID::int32 lastmailid() const;
  void set_lastmailid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lastmailid() const;
  void _internal_set_lastmailid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 createTime = 3;
  void clear_createtime();
  ::PROTOBUF_NAMESPACE_ID::int64 createtime() const;
  void set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_createtime() const;
  void _internal_set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.RoleMailReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid_;
  ::PROTOBUF_NAMESPACE_ID::int32 lastmailid_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int64 createtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class RoleMailAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.RoleMailAck) */ {
 public:
  inline RoleMailAck() : RoleMailAck(nullptr) {};
  virtual ~RoleMailAck();

  RoleMailAck(const RoleMailAck& from);
  RoleMailAck(RoleMailAck&& from) noexcept
    : RoleMailAck() {
    *this = ::std::move(from);
  }

  inline RoleMailAck& operator=(const RoleMailAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleMailAck& operator=(RoleMailAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoleMailAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleMailAck* internal_default_instance() {
    return reinterpret_cast<const RoleMailAck*>(
               &_RoleMailAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(RoleMailAck& a, RoleMailAck& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleMailAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleMailAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleMailAck* New() const final {
    return CreateMaybeMessage<RoleMailAck>(nullptr);
  }

  RoleMailAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleMailAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoleMailAck& from);
  void MergeFrom(const RoleMailAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleMailAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.RoleMailAck";
  }
  protected:
  explicit RoleMailAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
    kLastMailIdFieldNumber = 2,
  };
  // bytes datas = 1;
  void clear_datas();
  const std::string& datas() const;
  void set_datas(const std::string& value);
  void set_datas(std::string&& value);
  void set_datas(const char* value);
  void set_datas(const void* value, size_t size);
  std::string* mutable_datas();
  std::string* release_datas();
  void set_allocated_datas(std::string* datas);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_datas();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_datas(
      std::string* datas);
  private:
  const std::string& _internal_datas() const;
  void _internal_set_datas(const std::string& value);
  std::string* _internal_mutable_datas();
  public:

  // int32 lastMailId = 2;
  void clear_lastmailid();
  ::PROTOBUF_NAMESPACE_ID::int32 lastmailid() const;
  void set_lastmailid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lastmailid() const;
  void _internal_set_lastmailid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.RoleMailAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datas_;
  ::PROTOBUF_NAMESPACE_ID::int32 lastmailid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class TopNUpdateReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.TopNUpdateReq) */ {
 public:
  inline TopNUpdateReq() : TopNUpdateReq(nullptr) {};
  virtual ~TopNUpdateReq();

  TopNUpdateReq(const TopNUpdateReq& from);
  TopNUpdateReq(TopNUpdateReq&& from) noexcept
    : TopNUpdateReq() {
    *this = ::std::move(from);
  }

  inline TopNUpdateReq& operator=(const TopNUpdateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopNUpdateReq& operator=(TopNUpdateReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TopNUpdateReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopNUpdateReq* internal_default_instance() {
    return reinterpret_cast<const TopNUpdateReq*>(
               &_TopNUpdateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(TopNUpdateReq& a, TopNUpdateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(TopNUpdateReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopNUpdateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopNUpdateReq* New() const final {
    return CreateMaybeMessage<TopNUpdateReq>(nullptr);
  }

  TopNUpdateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopNUpdateReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopNUpdateReq& from);
  void MergeFrom(const TopNUpdateReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopNUpdateReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.TopNUpdateReq";
  }
  protected:
  explicit TopNUpdateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kWorldIdFieldNumber = 1,
    kTntFieldNumber = 2,
  };
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int64 worldId = 1;
  void clear_worldid();
  ::PROTOBUF_NAMESPACE_ID::int64 worldid() const;
  void set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_worldid() const;
  void _internal_set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 tnt = 2;
  void clear_tnt();
  ::PROTOBUF_NAMESPACE_ID::int32 tnt() const;
  void set_tnt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tnt() const;
  void _internal_set_tnt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.TopNUpdateReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int64 worldid_;
  ::PROTOBUF_NAMESPACE_ID::int32 tnt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class TopNUpdateAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.TopNUpdateAck) */ {
 public:
  inline TopNUpdateAck() : TopNUpdateAck(nullptr) {};
  virtual ~TopNUpdateAck();

  TopNUpdateAck(const TopNUpdateAck& from);
  TopNUpdateAck(TopNUpdateAck&& from) noexcept
    : TopNUpdateAck() {
    *this = ::std::move(from);
  }

  inline TopNUpdateAck& operator=(const TopNUpdateAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopNUpdateAck& operator=(TopNUpdateAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TopNUpdateAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopNUpdateAck* internal_default_instance() {
    return reinterpret_cast<const TopNUpdateAck*>(
               &_TopNUpdateAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(TopNUpdateAck& a, TopNUpdateAck& b) {
    a.Swap(&b);
  }
  inline void Swap(TopNUpdateAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopNUpdateAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopNUpdateAck* New() const final {
    return CreateMaybeMessage<TopNUpdateAck>(nullptr);
  }

  TopNUpdateAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopNUpdateAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopNUpdateAck& from);
  void MergeFrom(const TopNUpdateAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopNUpdateAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.TopNUpdateAck";
  }
  protected:
  explicit TopNUpdateAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ss_proto.TopNUpdateAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class TopNListReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.TopNListReq) */ {
 public:
  inline TopNListReq() : TopNListReq(nullptr) {};
  virtual ~TopNListReq();

  TopNListReq(const TopNListReq& from);
  TopNListReq(TopNListReq&& from) noexcept
    : TopNListReq() {
    *this = ::std::move(from);
  }

  inline TopNListReq& operator=(const TopNListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopNListReq& operator=(TopNListReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TopNListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopNListReq* internal_default_instance() {
    return reinterpret_cast<const TopNListReq*>(
               &_TopNListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(TopNListReq& a, TopNListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(TopNListReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopNListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopNListReq* New() const final {
    return CreateMaybeMessage<TopNListReq>(nullptr);
  }

  TopNListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopNListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopNListReq& from);
  void MergeFrom(const TopNListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopNListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.TopNListReq";
  }
  protected:
  explicit TopNListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kWorldIdFieldNumber = 1,
    kTntFieldNumber = 2,
  };
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int64 worldId = 1;
  void clear_worldid();
  ::PROTOBUF_NAMESPACE_ID::int64 worldid() const;
  void set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_worldid() const;
  void _internal_set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 tnt = 2;
  void clear_tnt();
  ::PROTOBUF_NAMESPACE_ID::int32 tnt() const;
  void set_tnt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tnt() const;
  void _internal_set_tnt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.TopNListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int64 worldid_;
  ::PROTOBUF_NAMESPACE_ID::int32 tnt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class TopNListAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.TopNListAck) */ {
 public:
  inline TopNListAck() : TopNListAck(nullptr) {};
  virtual ~TopNListAck();

  TopNListAck(const TopNListAck& from);
  TopNListAck(TopNListAck&& from) noexcept
    : TopNListAck() {
    *this = ::std::move(from);
  }

  inline TopNListAck& operator=(const TopNListAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopNListAck& operator=(TopNListAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TopNListAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopNListAck* internal_default_instance() {
    return reinterpret_cast<const TopNListAck*>(
               &_TopNListAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(TopNListAck& a, TopNListAck& b) {
    a.Swap(&b);
  }
  inline void Swap(TopNListAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopNListAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopNListAck* New() const final {
    return CreateMaybeMessage<TopNListAck>(nullptr);
  }

  TopNListAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopNListAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopNListAck& from);
  void MergeFrom(const TopNListAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopNListAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.TopNListAck";
  }
  protected:
  explicit TopNListAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopnFieldNumber = 1,
  };
  // bytes topn = 1;
  void clear_topn();
  const std::string& topn() const;
  void set_topn(const std::string& value);
  void set_topn(std::string&& value);
  void set_topn(const char* value);
  void set_topn(const void* value, size_t size);
  std::string* mutable_topn();
  std::string* release_topn();
  void set_allocated_topn(std::string* topn);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_topn();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_topn(
      std::string* topn);
  private:
  const std::string& _internal_topn() const;
  void _internal_set_topn(const std::string& value);
  std::string* _internal_mutable_topn();
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.TopNListAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class SceneUpdateReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.SceneUpdateReq) */ {
 public:
  inline SceneUpdateReq() : SceneUpdateReq(nullptr) {};
  virtual ~SceneUpdateReq();

  SceneUpdateReq(const SceneUpdateReq& from);
  SceneUpdateReq(SceneUpdateReq&& from) noexcept
    : SceneUpdateReq() {
    *this = ::std::move(from);
  }

  inline SceneUpdateReq& operator=(const SceneUpdateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneUpdateReq& operator=(SceneUpdateReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneUpdateReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneUpdateReq* internal_default_instance() {
    return reinterpret_cast<const SceneUpdateReq*>(
               &_SceneUpdateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(SceneUpdateReq& a, SceneUpdateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneUpdateReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneUpdateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneUpdateReq* New() const final {
    return CreateMaybeMessage<SceneUpdateReq>(nullptr);
  }

  SceneUpdateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneUpdateReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneUpdateReq& from);
  void MergeFrom(const SceneUpdateReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneUpdateReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.SceneUpdateReq";
  }
  protected:
  explicit SceneUpdateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopnFieldNumber = 4,
    kWorldIdFieldNumber = 1,
    kOlevelFieldNumber = 2,
    kNlevelFieldNumber = 3,
  };
  // bytes topn = 4;
  void clear_topn();
  const std::string& topn() const;
  void set_topn(const std::string& value);
  void set_topn(std::string&& value);
  void set_topn(const char* value);
  void set_topn(const void* value, size_t size);
  std::string* mutable_topn();
  std::string* release_topn();
  void set_allocated_topn(std::string* topn);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_topn();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_topn(
      std::string* topn);
  private:
  const std::string& _internal_topn() const;
  void _internal_set_topn(const std::string& value);
  std::string* _internal_mutable_topn();
  public:

  // int64 worldId = 1;
  void clear_worldid();
  ::PROTOBUF_NAMESPACE_ID::int64 worldid() const;
  void set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_worldid() const;
  void _internal_set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 olevel = 2;
  void clear_olevel();
  ::PROTOBUF_NAMESPACE_ID::int32 olevel() const;
  void set_olevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_olevel() const;
  void _internal_set_olevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nlevel = 3;
  void clear_nlevel();
  ::PROTOBUF_NAMESPACE_ID::int32 nlevel() const;
  void set_nlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nlevel() const;
  void _internal_set_nlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.SceneUpdateReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topn_;
  ::PROTOBUF_NAMESPACE_ID::int64 worldid_;
  ::PROTOBUF_NAMESPACE_ID::int32 olevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 nlevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class SceneUpdateAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.SceneUpdateAck) */ {
 public:
  inline SceneUpdateAck() : SceneUpdateAck(nullptr) {};
  virtual ~SceneUpdateAck();

  SceneUpdateAck(const SceneUpdateAck& from);
  SceneUpdateAck(SceneUpdateAck&& from) noexcept
    : SceneUpdateAck() {
    *this = ::std::move(from);
  }

  inline SceneUpdateAck& operator=(const SceneUpdateAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneUpdateAck& operator=(SceneUpdateAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneUpdateAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneUpdateAck* internal_default_instance() {
    return reinterpret_cast<const SceneUpdateAck*>(
               &_SceneUpdateAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(SceneUpdateAck& a, SceneUpdateAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneUpdateAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneUpdateAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneUpdateAck* New() const final {
    return CreateMaybeMessage<SceneUpdateAck>(nullptr);
  }

  SceneUpdateAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneUpdateAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneUpdateAck& from);
  void MergeFrom(const SceneUpdateAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneUpdateAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.SceneUpdateAck";
  }
  protected:
  explicit SceneUpdateAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ss_proto.SceneUpdateAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class SceneProcReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.SceneProcReq) */ {
 public:
  inline SceneProcReq() : SceneProcReq(nullptr) {};
  virtual ~SceneProcReq();

  SceneProcReq(const SceneProcReq& from);
  SceneProcReq(SceneProcReq&& from) noexcept
    : SceneProcReq() {
    *this = ::std::move(from);
  }

  inline SceneProcReq& operator=(const SceneProcReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneProcReq& operator=(SceneProcReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneProcReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneProcReq* internal_default_instance() {
    return reinterpret_cast<const SceneProcReq*>(
               &_SceneProcReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(SceneProcReq& a, SceneProcReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneProcReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneProcReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneProcReq* New() const final {
    return CreateMaybeMessage<SceneProcReq>(nullptr);
  }

  SceneProcReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneProcReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneProcReq& from);
  void MergeFrom(const SceneProcReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneProcReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.SceneProcReq";
  }
  protected:
  explicit SceneProcReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldIdFieldNumber = 1,
    kLevelFieldNumber = 2,
  };
  // int64 worldId = 1;
  void clear_worldid();
  ::PROTOBUF_NAMESPACE_ID::int64 worldid() const;
  void set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_worldid() const;
  void _internal_set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 level = 2;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.SceneProcReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 worldid_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class SceneProcAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.SceneProcAck) */ {
 public:
  inline SceneProcAck() : SceneProcAck(nullptr) {};
  virtual ~SceneProcAck();

  SceneProcAck(const SceneProcAck& from);
  SceneProcAck(SceneProcAck&& from) noexcept
    : SceneProcAck() {
    *this = ::std::move(from);
  }

  inline SceneProcAck& operator=(const SceneProcAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneProcAck& operator=(SceneProcAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneProcAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneProcAck* internal_default_instance() {
    return reinterpret_cast<const SceneProcAck*>(
               &_SceneProcAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(SceneProcAck& a, SceneProcAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneProcAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneProcAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneProcAck* New() const final {
    return CreateMaybeMessage<SceneProcAck>(nullptr);
  }

  SceneProcAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneProcAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneProcAck& from);
  void MergeFrom(const SceneProcAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneProcAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.SceneProcAck";
  }
  protected:
  explicit SceneProcAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopnFieldNumber = 2,
    kProcFieldNumber = 1,
  };
  // bytes topn = 2;
  void clear_topn();
  const std::string& topn() const;
  void set_topn(const std::string& value);
  void set_topn(std::string&& value);
  void set_topn(const char* value);
  void set_topn(const void* value, size_t size);
  std::string* mutable_topn();
  std::string* release_topn();
  void set_allocated_topn(std::string* topn);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_topn();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_topn(
      std::string* topn);
  private:
  const std::string& _internal_topn() const;
  void _internal_set_topn(const std::string& value);
  std::string* _internal_mutable_topn();
  public:

  // float proc = 1;
  void clear_proc();
  float proc() const;
  void set_proc(float value);
  private:
  float _internal_proc() const;
  void _internal_set_proc(float value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.SceneProcAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topn_;
  float proc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class LoginSwtichReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.LoginSwtichReq) */ {
 public:
  inline LoginSwtichReq() : LoginSwtichReq(nullptr) {};
  virtual ~LoginSwtichReq();

  LoginSwtichReq(const LoginSwtichReq& from);
  LoginSwtichReq(LoginSwtichReq&& from) noexcept
    : LoginSwtichReq() {
    *this = ::std::move(from);
  }

  inline LoginSwtichReq& operator=(const LoginSwtichReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginSwtichReq& operator=(LoginSwtichReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginSwtichReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginSwtichReq* internal_default_instance() {
    return reinterpret_cast<const LoginSwtichReq*>(
               &_LoginSwtichReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(LoginSwtichReq& a, LoginSwtichReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginSwtichReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginSwtichReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginSwtichReq* New() const final {
    return CreateMaybeMessage<LoginSwtichReq>(nullptr);
  }

  LoginSwtichReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginSwtichReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginSwtichReq& from);
  void MergeFrom(const LoginSwtichReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginSwtichReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.LoginSwtichReq";
  }
  protected:
  explicit LoginSwtichReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtIdFieldNumber = 1,
    kPtTypeFieldNumber = 2,
  };
  // string ptId = 1;
  void clear_ptid();
  const std::string& ptid() const;
  void set_ptid(const std::string& value);
  void set_ptid(std::string&& value);
  void set_ptid(const char* value);
  void set_ptid(const char* value, size_t size);
  std::string* mutable_ptid();
  std::string* release_ptid();
  void set_allocated_ptid(std::string* ptid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ptid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ptid(
      std::string* ptid);
  private:
  const std::string& _internal_ptid() const;
  void _internal_set_ptid(const std::string& value);
  std::string* _internal_mutable_ptid();
  public:

  // int32 ptType = 2;
  void clear_pttype();
  ::PROTOBUF_NAMESPACE_ID::int32 pttype() const;
  void set_pttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pttype() const;
  void _internal_set_pttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.LoginSwtichReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ptid_;
  ::PROTOBUF_NAMESPACE_ID::int32 pttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class LoginSwtichAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.LoginSwtichAck) */ {
 public:
  inline LoginSwtichAck() : LoginSwtichAck(nullptr) {};
  virtual ~LoginSwtichAck();

  LoginSwtichAck(const LoginSwtichAck& from);
  LoginSwtichAck(LoginSwtichAck&& from) noexcept
    : LoginSwtichAck() {
    *this = ::std::move(from);
  }

  inline LoginSwtichAck& operator=(const LoginSwtichAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginSwtichAck& operator=(LoginSwtichAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginSwtichAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginSwtichAck* internal_default_instance() {
    return reinterpret_cast<const LoginSwtichAck*>(
               &_LoginSwtichAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(LoginSwtichAck& a, LoginSwtichAck& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginSwtichAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginSwtichAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginSwtichAck* New() const final {
    return CreateMaybeMessage<LoginSwtichAck>(nullptr);
  }

  LoginSwtichAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginSwtichAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginSwtichAck& from);
  void MergeFrom(const LoginSwtichAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginSwtichAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.LoginSwtichAck";
  }
  protected:
  explicit LoginSwtichAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.LoginSwtichAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class LoadInteractionReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.LoadInteractionReq) */ {
 public:
  inline LoadInteractionReq() : LoadInteractionReq(nullptr) {};
  virtual ~LoadInteractionReq();

  LoadInteractionReq(const LoadInteractionReq& from);
  LoadInteractionReq(LoadInteractionReq&& from) noexcept
    : LoadInteractionReq() {
    *this = ::std::move(from);
  }

  inline LoadInteractionReq& operator=(const LoadInteractionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadInteractionReq& operator=(LoadInteractionReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadInteractionReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadInteractionReq* internal_default_instance() {
    return reinterpret_cast<const LoadInteractionReq*>(
               &_LoadInteractionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(LoadInteractionReq& a, LoadInteractionReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadInteractionReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadInteractionReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadInteractionReq* New() const final {
    return CreateMaybeMessage<LoadInteractionReq>(nullptr);
  }

  LoadInteractionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadInteractionReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadInteractionReq& from);
  void MergeFrom(const LoadInteractionReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadInteractionReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.LoadInteractionReq";
  }
  protected:
  explicit LoadInteractionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
  };
  // int64 roleId = 1;
  void clear_roleid();
  ::PROTOBUF_NAMESPACE_ID::int64 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_roleid() const;
  void _internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.LoadInteractionReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class LoadInteractionAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.LoadInteractionAck) */ {
 public:
  inline LoadInteractionAck() : LoadInteractionAck(nullptr) {};
  virtual ~LoadInteractionAck();

  LoadInteractionAck(const LoadInteractionAck& from);
  LoadInteractionAck(LoadInteractionAck&& from) noexcept
    : LoadInteractionAck() {
    *this = ::std::move(from);
  }

  inline LoadInteractionAck& operator=(const LoadInteractionAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadInteractionAck& operator=(LoadInteractionAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadInteractionAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadInteractionAck* internal_default_instance() {
    return reinterpret_cast<const LoadInteractionAck*>(
               &_LoadInteractionAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(LoadInteractionAck& a, LoadInteractionAck& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadInteractionAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadInteractionAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadInteractionAck* New() const final {
    return CreateMaybeMessage<LoadInteractionAck>(nullptr);
  }

  LoadInteractionAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadInteractionAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadInteractionAck& from);
  void MergeFrom(const LoadInteractionAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadInteractionAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.LoadInteractionAck";
  }
  protected:
  explicit LoadInteractionAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInteractionDataFieldNumber = 1,
  };
  // bytes interactionData = 1;
  void clear_interactiondata();
  const std::string& interactiondata() const;
  void set_interactiondata(const std::string& value);
  void set_interactiondata(std::string&& value);
  void set_interactiondata(const char* value);
  void set_interactiondata(const void* value, size_t size);
  std::string* mutable_interactiondata();
  std::string* release_interactiondata();
  void set_allocated_interactiondata(std::string* interactiondata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_interactiondata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_interactiondata(
      std::string* interactiondata);
  private:
  const std::string& _internal_interactiondata() const;
  void _internal_set_interactiondata(const std::string& value);
  std::string* _internal_mutable_interactiondata();
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.LoadInteractionAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interactiondata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// -------------------------------------------------------------------

class CommonMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ss_proto.CommonMessage) */ {
 public:
  inline CommonMessage() : CommonMessage(nullptr) {};
  virtual ~CommonMessage();

  CommonMessage(const CommonMessage& from);
  CommonMessage(CommonMessage&& from) noexcept
    : CommonMessage() {
    *this = ::std::move(from);
  }

  inline CommonMessage& operator=(const CommonMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonMessage& operator=(CommonMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonMessage* internal_default_instance() {
    return reinterpret_cast<const CommonMessage*>(
               &_CommonMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CommonMessage& a, CommonMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonMessage* New() const final {
    return CreateMaybeMessage<CommonMessage>(nullptr);
  }

  CommonMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonMessage& from);
  void MergeFrom(const CommonMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ss_proto.CommonMessage";
  }
  protected:
  explicit CommonMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ss_5fproto_2eproto);
    return ::descriptor_table_ss_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddDBNtfFieldNumber = 5,
    kServerCmdFieldNumber = 6,
    kNewMailNtfFieldNumber = 7,
    kServerReportFieldNumber = 8,
    kServerCastNtfFieldNumber = 9,
    kTopNUpdateReqFieldNumber = 10,
    kTopNUpdateAckFieldNumber = 11,
    kTopNListReqFieldNumber = 12,
    kTopNListAckFieldNumber = 13,
    kUserLoginReqFieldNumber = 20,
    kUserLoginAckFieldNumber = 21,
    kLoginWorldReqFieldNumber = 22,
    kLoginWorldAckFieldNumber = 23,
    kLoginGameReqFieldNumber = 24,
    kLoginGameAckFieldNumber = 25,
    kLogoutGameReqFieldNumber = 26,
    kLogoutGameAckFieldNumber = 27,
    kCreateRoleReqFieldNumber = 28,
    kCreateRoleAckFieldNumber = 29,
    kSaveRoleReqFieldNumber = 30,
    kSaveRoleAckFieldNumber = 31,
    kKickUserNtfFieldNumber = 32,
    kSyncRoleNtfFieldNumber = 33,
    kSearchBossReqFieldNumber = 34,
    kSearchBossAckFieldNumber = 35,
    kLogDataReqFieldNumber = 36,
    kLogDataAckFieldNumber = 37,
    kLoadRoleSkillReqFieldNumber = 38,
    kLoadRoleSkillAckFieldNumber = 39,
    kLoadRolePackageReqFieldNumber = 40,
    kLoadRolePackageAckFieldNumber = 41,
    kFriendAddReqFieldNumber = 44,
    kFriendAddAckFieldNumber = 45,
    kFriendDelReqFieldNumber = 46,
    kFriendDelAckFieldNumber = 47,
    kFriendListReqFieldNumber = 48,
    kFriendListAckFieldNumber = 49,
    kRoleBoardReqFieldNumber = 50,
    kRoleBoardAckFieldNumber = 51,
    kSceneUpdateReqFieldNumber = 54,
    kSceneUpdateAckFieldNumber = 55,
    kSceneProcReqFieldNumber = 56,
    kSceneProcAckFieldNumber = 57,
    kLoginSwtichReqFieldNumber = 58,
    kLoginSwtichAckFieldNumber = 59,
    kCodeFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
    kTaskIdFieldNumber = 3,
  };
  // .ss_proto.AddDBNtf addDBNtf = 5;
  bool has_adddbntf() const;
  private:
  bool _internal_has_adddbntf() const;
  public:
  void clear_adddbntf();
  const ::ss_proto::AddDBNtf& adddbntf() const;
  ::ss_proto::AddDBNtf* release_adddbntf();
  ::ss_proto::AddDBNtf* mutable_adddbntf();
  void set_allocated_adddbntf(::ss_proto::AddDBNtf* adddbntf);
  private:
  const ::ss_proto::AddDBNtf& _internal_adddbntf() const;
  ::ss_proto::AddDBNtf* _internal_mutable_adddbntf();
  public:
  void unsafe_arena_set_allocated_adddbntf(
      ::ss_proto::AddDBNtf* adddbntf);
  ::ss_proto::AddDBNtf* unsafe_arena_release_adddbntf();

  // .ss_proto.ServerCmd serverCmd = 6;
  bool has_servercmd() const;
  private:
  bool _internal_has_servercmd() const;
  public:
  void clear_servercmd();
  const ::ss_proto::ServerCmd& servercmd() const;
  ::ss_proto::ServerCmd* release_servercmd();
  ::ss_proto::ServerCmd* mutable_servercmd();
  void set_allocated_servercmd(::ss_proto::ServerCmd* servercmd);
  private:
  const ::ss_proto::ServerCmd& _internal_servercmd() const;
  ::ss_proto::ServerCmd* _internal_mutable_servercmd();
  public:
  void unsafe_arena_set_allocated_servercmd(
      ::ss_proto::ServerCmd* servercmd);
  ::ss_proto::ServerCmd* unsafe_arena_release_servercmd();

  // .ss_proto.NewMailNtf newMailNtf = 7;
  bool has_newmailntf() const;
  private:
  bool _internal_has_newmailntf() const;
  public:
  void clear_newmailntf();
  const ::ss_proto::NewMailNtf& newmailntf() const;
  ::ss_proto::NewMailNtf* release_newmailntf();
  ::ss_proto::NewMailNtf* mutable_newmailntf();
  void set_allocated_newmailntf(::ss_proto::NewMailNtf* newmailntf);
  private:
  const ::ss_proto::NewMailNtf& _internal_newmailntf() const;
  ::ss_proto::NewMailNtf* _internal_mutable_newmailntf();
  public:
  void unsafe_arena_set_allocated_newmailntf(
      ::ss_proto::NewMailNtf* newmailntf);
  ::ss_proto::NewMailNtf* unsafe_arena_release_newmailntf();

  // .ss_proto.ServerReport serverReport = 8;
  bool has_serverreport() const;
  private:
  bool _internal_has_serverreport() const;
  public:
  void clear_serverreport();
  const ::ss_proto::ServerReport& serverreport() const;
  ::ss_proto::ServerReport* release_serverreport();
  ::ss_proto::ServerReport* mutable_serverreport();
  void set_allocated_serverreport(::ss_proto::ServerReport* serverreport);
  private:
  const ::ss_proto::ServerReport& _internal_serverreport() const;
  ::ss_proto::ServerReport* _internal_mutable_serverreport();
  public:
  void unsafe_arena_set_allocated_serverreport(
      ::ss_proto::ServerReport* serverreport);
  ::ss_proto::ServerReport* unsafe_arena_release_serverreport();

  // .ss_proto.ServerCastNtf serverCastNtf = 9;
  bool has_servercastntf() const;
  private:
  bool _internal_has_servercastntf() const;
  public:
  void clear_servercastntf();
  const ::ss_proto::ServerCastNtf& servercastntf() const;
  ::ss_proto::ServerCastNtf* release_servercastntf();
  ::ss_proto::ServerCastNtf* mutable_servercastntf();
  void set_allocated_servercastntf(::ss_proto::ServerCastNtf* servercastntf);
  private:
  const ::ss_proto::ServerCastNtf& _internal_servercastntf() const;
  ::ss_proto::ServerCastNtf* _internal_mutable_servercastntf();
  public:
  void unsafe_arena_set_allocated_servercastntf(
      ::ss_proto::ServerCastNtf* servercastntf);
  ::ss_proto::ServerCastNtf* unsafe_arena_release_servercastntf();

  // .ss_proto.TopNUpdateReq topNUpdateReq = 10;
  bool has_topnupdatereq() const;
  private:
  bool _internal_has_topnupdatereq() const;
  public:
  void clear_topnupdatereq();
  const ::ss_proto::TopNUpdateReq& topnupdatereq() const;
  ::ss_proto::TopNUpdateReq* release_topnupdatereq();
  ::ss_proto::TopNUpdateReq* mutable_topnupdatereq();
  void set_allocated_topnupdatereq(::ss_proto::TopNUpdateReq* topnupdatereq);
  private:
  const ::ss_proto::TopNUpdateReq& _internal_topnupdatereq() const;
  ::ss_proto::TopNUpdateReq* _internal_mutable_topnupdatereq();
  public:
  void unsafe_arena_set_allocated_topnupdatereq(
      ::ss_proto::TopNUpdateReq* topnupdatereq);
  ::ss_proto::TopNUpdateReq* unsafe_arena_release_topnupdatereq();

  // .ss_proto.TopNUpdateAck topNUpdateAck = 11;
  bool has_topnupdateack() const;
  private:
  bool _internal_has_topnupdateack() const;
  public:
  void clear_topnupdateack();
  const ::ss_proto::TopNUpdateAck& topnupdateack() const;
  ::ss_proto::TopNUpdateAck* release_topnupdateack();
  ::ss_proto::TopNUpdateAck* mutable_topnupdateack();
  void set_allocated_topnupdateack(::ss_proto::TopNUpdateAck* topnupdateack);
  private:
  const ::ss_proto::TopNUpdateAck& _internal_topnupdateack() const;
  ::ss_proto::TopNUpdateAck* _internal_mutable_topnupdateack();
  public:
  void unsafe_arena_set_allocated_topnupdateack(
      ::ss_proto::TopNUpdateAck* topnupdateack);
  ::ss_proto::TopNUpdateAck* unsafe_arena_release_topnupdateack();

  // .ss_proto.TopNListReq topNListReq = 12;
  bool has_topnlistreq() const;
  private:
  bool _internal_has_topnlistreq() const;
  public:
  void clear_topnlistreq();
  const ::ss_proto::TopNListReq& topnlistreq() const;
  ::ss_proto::TopNListReq* release_topnlistreq();
  ::ss_proto::TopNListReq* mutable_topnlistreq();
  void set_allocated_topnlistreq(::ss_proto::TopNListReq* topnlistreq);
  private:
  const ::ss_proto::TopNListReq& _internal_topnlistreq() const;
  ::ss_proto::TopNListReq* _internal_mutable_topnlistreq();
  public:
  void unsafe_arena_set_allocated_topnlistreq(
      ::ss_proto::TopNListReq* topnlistreq);
  ::ss_proto::TopNListReq* unsafe_arena_release_topnlistreq();

  // .ss_proto.TopNListAck topNListAck = 13;
  bool has_topnlistack() const;
  private:
  bool _internal_has_topnlistack() const;
  public:
  void clear_topnlistack();
  const ::ss_proto::TopNListAck& topnlistack() const;
  ::ss_proto::TopNListAck* release_topnlistack();
  ::ss_proto::TopNListAck* mutable_topnlistack();
  void set_allocated_topnlistack(::ss_proto::TopNListAck* topnlistack);
  private:
  const ::ss_proto::TopNListAck& _internal_topnlistack() const;
  ::ss_proto::TopNListAck* _internal_mutable_topnlistack();
  public:
  void unsafe_arena_set_allocated_topnlistack(
      ::ss_proto::TopNListAck* topnlistack);
  ::ss_proto::TopNListAck* unsafe_arena_release_topnlistack();

  // .ss_proto.UserLoginReq userLoginReq = 20;
  bool has_userloginreq() const;
  private:
  bool _internal_has_userloginreq() const;
  public:
  void clear_userloginreq();
  const ::ss_proto::UserLoginReq& userloginreq() const;
  ::ss_proto::UserLoginReq* release_userloginreq();
  ::ss_proto::UserLoginReq* mutable_userloginreq();
  void set_allocated_userloginreq(::ss_proto::UserLoginReq* userloginreq);
  private:
  const ::ss_proto::UserLoginReq& _internal_userloginreq() const;
  ::ss_proto::UserLoginReq* _internal_mutable_userloginreq();
  public:
  void unsafe_arena_set_allocated_userloginreq(
      ::ss_proto::UserLoginReq* userloginreq);
  ::ss_proto::UserLoginReq* unsafe_arena_release_userloginreq();

  // .ss_proto.UserLoginAck userLoginAck = 21;
  bool has_userloginack() const;
  private:
  bool _internal_has_userloginack() const;
  public:
  void clear_userloginack();
  const ::ss_proto::UserLoginAck& userloginack() const;
  ::ss_proto::UserLoginAck* release_userloginack();
  ::ss_proto::UserLoginAck* mutable_userloginack();
  void set_allocated_userloginack(::ss_proto::UserLoginAck* userloginack);
  private:
  const ::ss_proto::UserLoginAck& _internal_userloginack() const;
  ::ss_proto::UserLoginAck* _internal_mutable_userloginack();
  public:
  void unsafe_arena_set_allocated_userloginack(
      ::ss_proto::UserLoginAck* userloginack);
  ::ss_proto::UserLoginAck* unsafe_arena_release_userloginack();

  // .ss_proto.LoginWorldReq loginWorldReq = 22;
  bool has_loginworldreq() const;
  private:
  bool _internal_has_loginworldreq() const;
  public:
  void clear_loginworldreq();
  const ::ss_proto::LoginWorldReq& loginworldreq() const;
  ::ss_proto::LoginWorldReq* release_loginworldreq();
  ::ss_proto::LoginWorldReq* mutable_loginworldreq();
  void set_allocated_loginworldreq(::ss_proto::LoginWorldReq* loginworldreq);
  private:
  const ::ss_proto::LoginWorldReq& _internal_loginworldreq() const;
  ::ss_proto::LoginWorldReq* _internal_mutable_loginworldreq();
  public:
  void unsafe_arena_set_allocated_loginworldreq(
      ::ss_proto::LoginWorldReq* loginworldreq);
  ::ss_proto::LoginWorldReq* unsafe_arena_release_loginworldreq();

  // .ss_proto.LoginWorldAck loginWorldAck = 23;
  bool has_loginworldack() const;
  private:
  bool _internal_has_loginworldack() const;
  public:
  void clear_loginworldack();
  const ::ss_proto::LoginWorldAck& loginworldack() const;
  ::ss_proto::LoginWorldAck* release_loginworldack();
  ::ss_proto::LoginWorldAck* mutable_loginworldack();
  void set_allocated_loginworldack(::ss_proto::LoginWorldAck* loginworldack);
  private:
  const ::ss_proto::LoginWorldAck& _internal_loginworldack() const;
  ::ss_proto::LoginWorldAck* _internal_mutable_loginworldack();
  public:
  void unsafe_arena_set_allocated_loginworldack(
      ::ss_proto::LoginWorldAck* loginworldack);
  ::ss_proto::LoginWorldAck* unsafe_arena_release_loginworldack();

  // .ss_proto.LoginGameReq loginGameReq = 24;
  bool has_logingamereq() const;
  private:
  bool _internal_has_logingamereq() const;
  public:
  void clear_logingamereq();
  const ::ss_proto::LoginGameReq& logingamereq() const;
  ::ss_proto::LoginGameReq* release_logingamereq();
  ::ss_proto::LoginGameReq* mutable_logingamereq();
  void set_allocated_logingamereq(::ss_proto::LoginGameReq* logingamereq);
  private:
  const ::ss_proto::LoginGameReq& _internal_logingamereq() const;
  ::ss_proto::LoginGameReq* _internal_mutable_logingamereq();
  public:
  void unsafe_arena_set_allocated_logingamereq(
      ::ss_proto::LoginGameReq* logingamereq);
  ::ss_proto::LoginGameReq* unsafe_arena_release_logingamereq();

  // .ss_proto.LoginGameAck loginGameAck = 25;
  bool has_logingameack() const;
  private:
  bool _internal_has_logingameack() const;
  public:
  void clear_logingameack();
  const ::ss_proto::LoginGameAck& logingameack() const;
  ::ss_proto::LoginGameAck* release_logingameack();
  ::ss_proto::LoginGameAck* mutable_logingameack();
  void set_allocated_logingameack(::ss_proto::LoginGameAck* logingameack);
  private:
  const ::ss_proto::LoginGameAck& _internal_logingameack() const;
  ::ss_proto::LoginGameAck* _internal_mutable_logingameack();
  public:
  void unsafe_arena_set_allocated_logingameack(
      ::ss_proto::LoginGameAck* logingameack);
  ::ss_proto::LoginGameAck* unsafe_arena_release_logingameack();

  // .ss_proto.LogoutGameReq logoutGameReq = 26;
  bool has_logoutgamereq() const;
  private:
  bool _internal_has_logoutgamereq() const;
  public:
  void clear_logoutgamereq();
  const ::ss_proto::LogoutGameReq& logoutgamereq() const;
  ::ss_proto::LogoutGameReq* release_logoutgamereq();
  ::ss_proto::LogoutGameReq* mutable_logoutgamereq();
  void set_allocated_logoutgamereq(::ss_proto::LogoutGameReq* logoutgamereq);
  private:
  const ::ss_proto::LogoutGameReq& _internal_logoutgamereq() const;
  ::ss_proto::LogoutGameReq* _internal_mutable_logoutgamereq();
  public:
  void unsafe_arena_set_allocated_logoutgamereq(
      ::ss_proto::LogoutGameReq* logoutgamereq);
  ::ss_proto::LogoutGameReq* unsafe_arena_release_logoutgamereq();

  // .ss_proto.LogoutGameAck logoutGameAck = 27;
  bool has_logoutgameack() const;
  private:
  bool _internal_has_logoutgameack() const;
  public:
  void clear_logoutgameack();
  const ::ss_proto::LogoutGameAck& logoutgameack() const;
  ::ss_proto::LogoutGameAck* release_logoutgameack();
  ::ss_proto::LogoutGameAck* mutable_logoutgameack();
  void set_allocated_logoutgameack(::ss_proto::LogoutGameAck* logoutgameack);
  private:
  const ::ss_proto::LogoutGameAck& _internal_logoutgameack() const;
  ::ss_proto::LogoutGameAck* _internal_mutable_logoutgameack();
  public:
  void unsafe_arena_set_allocated_logoutgameack(
      ::ss_proto::LogoutGameAck* logoutgameack);
  ::ss_proto::LogoutGameAck* unsafe_arena_release_logoutgameack();

  // .ss_proto.CreateRoleReq createRoleReq = 28;
  bool has_createrolereq() const;
  private:
  bool _internal_has_createrolereq() const;
  public:
  void clear_createrolereq();
  const ::ss_proto::CreateRoleReq& createrolereq() const;
  ::ss_proto::CreateRoleReq* release_createrolereq();
  ::ss_proto::CreateRoleReq* mutable_createrolereq();
  void set_allocated_createrolereq(::ss_proto::CreateRoleReq* createrolereq);
  private:
  const ::ss_proto::CreateRoleReq& _internal_createrolereq() const;
  ::ss_proto::CreateRoleReq* _internal_mutable_createrolereq();
  public:
  void unsafe_arena_set_allocated_createrolereq(
      ::ss_proto::CreateRoleReq* createrolereq);
  ::ss_proto::CreateRoleReq* unsafe_arena_release_createrolereq();

  // .ss_proto.CreateRoleAck createRoleAck = 29;
  bool has_createroleack() const;
  private:
  bool _internal_has_createroleack() const;
  public:
  void clear_createroleack();
  const ::ss_proto::CreateRoleAck& createroleack() const;
  ::ss_proto::CreateRoleAck* release_createroleack();
  ::ss_proto::CreateRoleAck* mutable_createroleack();
  void set_allocated_createroleack(::ss_proto::CreateRoleAck* createroleack);
  private:
  const ::ss_proto::CreateRoleAck& _internal_createroleack() const;
  ::ss_proto::CreateRoleAck* _internal_mutable_createroleack();
  public:
  void unsafe_arena_set_allocated_createroleack(
      ::ss_proto::CreateRoleAck* createroleack);
  ::ss_proto::CreateRoleAck* unsafe_arena_release_createroleack();

  // .ss_proto.SaveRoleReq saveRoleReq = 30;
  bool has_saverolereq() const;
  private:
  bool _internal_has_saverolereq() const;
  public:
  void clear_saverolereq();
  const ::ss_proto::SaveRoleReq& saverolereq() const;
  ::ss_proto::SaveRoleReq* release_saverolereq();
  ::ss_proto::SaveRoleReq* mutable_saverolereq();
  void set_allocated_saverolereq(::ss_proto::SaveRoleReq* saverolereq);
  private:
  const ::ss_proto::SaveRoleReq& _internal_saverolereq() const;
  ::ss_proto::SaveRoleReq* _internal_mutable_saverolereq();
  public:
  void unsafe_arena_set_allocated_saverolereq(
      ::ss_proto::SaveRoleReq* saverolereq);
  ::ss_proto::SaveRoleReq* unsafe_arena_release_saverolereq();

  // .ss_proto.SaveRoleAck saveRoleAck = 31;
  bool has_saveroleack() const;
  private:
  bool _internal_has_saveroleack() const;
  public:
  void clear_saveroleack();
  const ::ss_proto::SaveRoleAck& saveroleack() const;
  ::ss_proto::SaveRoleAck* release_saveroleack();
  ::ss_proto::SaveRoleAck* mutable_saveroleack();
  void set_allocated_saveroleack(::ss_proto::SaveRoleAck* saveroleack);
  private:
  const ::ss_proto::SaveRoleAck& _internal_saveroleack() const;
  ::ss_proto::SaveRoleAck* _internal_mutable_saveroleack();
  public:
  void unsafe_arena_set_allocated_saveroleack(
      ::ss_proto::SaveRoleAck* saveroleack);
  ::ss_proto::SaveRoleAck* unsafe_arena_release_saveroleack();

  // .ss_proto.KickUserNtf kickUserNtf = 32;
  bool has_kickuserntf() const;
  private:
  bool _internal_has_kickuserntf() const;
  public:
  void clear_kickuserntf();
  const ::ss_proto::KickUserNtf& kickuserntf() const;
  ::ss_proto::KickUserNtf* release_kickuserntf();
  ::ss_proto::KickUserNtf* mutable_kickuserntf();
  void set_allocated_kickuserntf(::ss_proto::KickUserNtf* kickuserntf);
  private:
  const ::ss_proto::KickUserNtf& _internal_kickuserntf() const;
  ::ss_proto::KickUserNtf* _internal_mutable_kickuserntf();
  public:
  void unsafe_arena_set_allocated_kickuserntf(
      ::ss_proto::KickUserNtf* kickuserntf);
  ::ss_proto::KickUserNtf* unsafe_arena_release_kickuserntf();

  // .ss_proto.SyncRoleNtf syncRoleNtf = 33;
  bool has_syncrolentf() const;
  private:
  bool _internal_has_syncrolentf() const;
  public:
  void clear_syncrolentf();
  const ::ss_proto::SyncRoleNtf& syncrolentf() const;
  ::ss_proto::SyncRoleNtf* release_syncrolentf();
  ::ss_proto::SyncRoleNtf* mutable_syncrolentf();
  void set_allocated_syncrolentf(::ss_proto::SyncRoleNtf* syncrolentf);
  private:
  const ::ss_proto::SyncRoleNtf& _internal_syncrolentf() const;
  ::ss_proto::SyncRoleNtf* _internal_mutable_syncrolentf();
  public:
  void unsafe_arena_set_allocated_syncrolentf(
      ::ss_proto::SyncRoleNtf* syncrolentf);
  ::ss_proto::SyncRoleNtf* unsafe_arena_release_syncrolentf();

  // .ss_proto.SearchBossReq searchBossReq = 34;
  bool has_searchbossreq() const;
  private:
  bool _internal_has_searchbossreq() const;
  public:
  void clear_searchbossreq();
  const ::ss_proto::SearchBossReq& searchbossreq() const;
  ::ss_proto::SearchBossReq* release_searchbossreq();
  ::ss_proto::SearchBossReq* mutable_searchbossreq();
  void set_allocated_searchbossreq(::ss_proto::SearchBossReq* searchbossreq);
  private:
  const ::ss_proto::SearchBossReq& _internal_searchbossreq() const;
  ::ss_proto::SearchBossReq* _internal_mutable_searchbossreq();
  public:
  void unsafe_arena_set_allocated_searchbossreq(
      ::ss_proto::SearchBossReq* searchbossreq);
  ::ss_proto::SearchBossReq* unsafe_arena_release_searchbossreq();

  // .ss_proto.SearchBossAck searchBossAck = 35;
  bool has_searchbossack() const;
  private:
  bool _internal_has_searchbossack() const;
  public:
  void clear_searchbossack();
  const ::ss_proto::SearchBossAck& searchbossack() const;
  ::ss_proto::SearchBossAck* release_searchbossack();
  ::ss_proto::SearchBossAck* mutable_searchbossack();
  void set_allocated_searchbossack(::ss_proto::SearchBossAck* searchbossack);
  private:
  const ::ss_proto::SearchBossAck& _internal_searchbossack() const;
  ::ss_proto::SearchBossAck* _internal_mutable_searchbossack();
  public:
  void unsafe_arena_set_allocated_searchbossack(
      ::ss_proto::SearchBossAck* searchbossack);
  ::ss_proto::SearchBossAck* unsafe_arena_release_searchbossack();

  // .ss_proto.LogDataReq logDataReq = 36;
  bool has_logdatareq() const;
  private:
  bool _internal_has_logdatareq() const;
  public:
  void clear_logdatareq();
  const ::ss_proto::LogDataReq& logdatareq() const;
  ::ss_proto::LogDataReq* release_logdatareq();
  ::ss_proto::LogDataReq* mutable_logdatareq();
  void set_allocated_logdatareq(::ss_proto::LogDataReq* logdatareq);
  private:
  const ::ss_proto::LogDataReq& _internal_logdatareq() const;
  ::ss_proto::LogDataReq* _internal_mutable_logdatareq();
  public:
  void unsafe_arena_set_allocated_logdatareq(
      ::ss_proto::LogDataReq* logdatareq);
  ::ss_proto::LogDataReq* unsafe_arena_release_logdatareq();

  // .ss_proto.LogDataAck logDataAck = 37;
  bool has_logdataack() const;
  private:
  bool _internal_has_logdataack() const;
  public:
  void clear_logdataack();
  const ::ss_proto::LogDataAck& logdataack() const;
  ::ss_proto::LogDataAck* release_logdataack();
  ::ss_proto::LogDataAck* mutable_logdataack();
  void set_allocated_logdataack(::ss_proto::LogDataAck* logdataack);
  private:
  const ::ss_proto::LogDataAck& _internal_logdataack() const;
  ::ss_proto::LogDataAck* _internal_mutable_logdataack();
  public:
  void unsafe_arena_set_allocated_logdataack(
      ::ss_proto::LogDataAck* logdataack);
  ::ss_proto::LogDataAck* unsafe_arena_release_logdataack();

  // .ss_proto.LoadRoleSkillReq loadRoleSkillReq = 38;
  bool has_loadroleskillreq() const;
  private:
  bool _internal_has_loadroleskillreq() const;
  public:
  void clear_loadroleskillreq();
  const ::ss_proto::LoadRoleSkillReq& loadroleskillreq() const;
  ::ss_proto::LoadRoleSkillReq* release_loadroleskillreq();
  ::ss_proto::LoadRoleSkillReq* mutable_loadroleskillreq();
  void set_allocated_loadroleskillreq(::ss_proto::LoadRoleSkillReq* loadroleskillreq);
  private:
  const ::ss_proto::LoadRoleSkillReq& _internal_loadroleskillreq() const;
  ::ss_proto::LoadRoleSkillReq* _internal_mutable_loadroleskillreq();
  public:
  void unsafe_arena_set_allocated_loadroleskillreq(
      ::ss_proto::LoadRoleSkillReq* loadroleskillreq);
  ::ss_proto::LoadRoleSkillReq* unsafe_arena_release_loadroleskillreq();

  // .ss_proto.LoadRoleSkillAck loadRoleSkillAck = 39;
  bool has_loadroleskillack() const;
  private:
  bool _internal_has_loadroleskillack() const;
  public:
  void clear_loadroleskillack();
  const ::ss_proto::LoadRoleSkillAck& loadroleskillack() const;
  ::ss_proto::LoadRoleSkillAck* release_loadroleskillack();
  ::ss_proto::LoadRoleSkillAck* mutable_loadroleskillack();
  void set_allocated_loadroleskillack(::ss_proto::LoadRoleSkillAck* loadroleskillack);
  private:
  const ::ss_proto::LoadRoleSkillAck& _internal_loadroleskillack() const;
  ::ss_proto::LoadRoleSkillAck* _internal_mutable_loadroleskillack();
  public:
  void unsafe_arena_set_allocated_loadroleskillack(
      ::ss_proto::LoadRoleSkillAck* loadroleskillack);
  ::ss_proto::LoadRoleSkillAck* unsafe_arena_release_loadroleskillack();

  // .ss_proto.LoadRolePackageReq loadRolePackageReq = 40;
  bool has_loadrolepackagereq() const;
  private:
  bool _internal_has_loadrolepackagereq() const;
  public:
  void clear_loadrolepackagereq();
  const ::ss_proto::LoadRolePackageReq& loadrolepackagereq() const;
  ::ss_proto::LoadRolePackageReq* release_loadrolepackagereq();
  ::ss_proto::LoadRolePackageReq* mutable_loadrolepackagereq();
  void set_allocated_loadrolepackagereq(::ss_proto::LoadRolePackageReq* loadrolepackagereq);
  private:
  const ::ss_proto::LoadRolePackageReq& _internal_loadrolepackagereq() const;
  ::ss_proto::LoadRolePackageReq* _internal_mutable_loadrolepackagereq();
  public:
  void unsafe_arena_set_allocated_loadrolepackagereq(
      ::ss_proto::LoadRolePackageReq* loadrolepackagereq);
  ::ss_proto::LoadRolePackageReq* unsafe_arena_release_loadrolepackagereq();

  // .ss_proto.LoadRolePackageAck loadRolePackageAck = 41;
  bool has_loadrolepackageack() const;
  private:
  bool _internal_has_loadrolepackageack() const;
  public:
  void clear_loadrolepackageack();
  const ::ss_proto::LoadRolePackageAck& loadrolepackageack() const;
  ::ss_proto::LoadRolePackageAck* release_loadrolepackageack();
  ::ss_proto::LoadRolePackageAck* mutable_loadrolepackageack();
  void set_allocated_loadrolepackageack(::ss_proto::LoadRolePackageAck* loadrolepackageack);
  private:
  const ::ss_proto::LoadRolePackageAck& _internal_loadrolepackageack() const;
  ::ss_proto::LoadRolePackageAck* _internal_mutable_loadrolepackageack();
  public:
  void unsafe_arena_set_allocated_loadrolepackageack(
      ::ss_proto::LoadRolePackageAck* loadrolepackageack);
  ::ss_proto::LoadRolePackageAck* unsafe_arena_release_loadrolepackageack();

  // .ss_proto.FriendAddReq friendAddReq = 44;
  bool has_friendaddreq() const;
  private:
  bool _internal_has_friendaddreq() const;
  public:
  void clear_friendaddreq();
  const ::ss_proto::FriendAddReq& friendaddreq() const;
  ::ss_proto::FriendAddReq* release_friendaddreq();
  ::ss_proto::FriendAddReq* mutable_friendaddreq();
  void set_allocated_friendaddreq(::ss_proto::FriendAddReq* friendaddreq);
  private:
  const ::ss_proto::FriendAddReq& _internal_friendaddreq() const;
  ::ss_proto::FriendAddReq* _internal_mutable_friendaddreq();
  public:
  void unsafe_arena_set_allocated_friendaddreq(
      ::ss_proto::FriendAddReq* friendaddreq);
  ::ss_proto::FriendAddReq* unsafe_arena_release_friendaddreq();

  // .ss_proto.FriendAddAck friendAddAck = 45;
  bool has_friendaddack() const;
  private:
  bool _internal_has_friendaddack() const;
  public:
  void clear_friendaddack();
  const ::ss_proto::FriendAddAck& friendaddack() const;
  ::ss_proto::FriendAddAck* release_friendaddack();
  ::ss_proto::FriendAddAck* mutable_friendaddack();
  void set_allocated_friendaddack(::ss_proto::FriendAddAck* friendaddack);
  private:
  const ::ss_proto::FriendAddAck& _internal_friendaddack() const;
  ::ss_proto::FriendAddAck* _internal_mutable_friendaddack();
  public:
  void unsafe_arena_set_allocated_friendaddack(
      ::ss_proto::FriendAddAck* friendaddack);
  ::ss_proto::FriendAddAck* unsafe_arena_release_friendaddack();

  // .ss_proto.FriendDelReq friendDelReq = 46;
  bool has_frienddelreq() const;
  private:
  bool _internal_has_frienddelreq() const;
  public:
  void clear_frienddelreq();
  const ::ss_proto::FriendDelReq& frienddelreq() const;
  ::ss_proto::FriendDelReq* release_frienddelreq();
  ::ss_proto::FriendDelReq* mutable_frienddelreq();
  void set_allocated_frienddelreq(::ss_proto::FriendDelReq* frienddelreq);
  private:
  const ::ss_proto::FriendDelReq& _internal_frienddelreq() const;
  ::ss_proto::FriendDelReq* _internal_mutable_frienddelreq();
  public:
  void unsafe_arena_set_allocated_frienddelreq(
      ::ss_proto::FriendDelReq* frienddelreq);
  ::ss_proto::FriendDelReq* unsafe_arena_release_frienddelreq();

  // .ss_proto.FriendDelAck friendDelAck = 47;
  bool has_frienddelack() const;
  private:
  bool _internal_has_frienddelack() const;
  public:
  void clear_frienddelack();
  const ::ss_proto::FriendDelAck& frienddelack() const;
  ::ss_proto::FriendDelAck* release_frienddelack();
  ::ss_proto::FriendDelAck* mutable_frienddelack();
  void set_allocated_frienddelack(::ss_proto::FriendDelAck* frienddelack);
  private:
  const ::ss_proto::FriendDelAck& _internal_frienddelack() const;
  ::ss_proto::FriendDelAck* _internal_mutable_frienddelack();
  public:
  void unsafe_arena_set_allocated_frienddelack(
      ::ss_proto::FriendDelAck* frienddelack);
  ::ss_proto::FriendDelAck* unsafe_arena_release_frienddelack();

  // .ss_proto.FriendListReq friendListReq = 48;
  bool has_friendlistreq() const;
  private:
  bool _internal_has_friendlistreq() const;
  public:
  void clear_friendlistreq();
  const ::ss_proto::FriendListReq& friendlistreq() const;
  ::ss_proto::FriendListReq* release_friendlistreq();
  ::ss_proto::FriendListReq* mutable_friendlistreq();
  void set_allocated_friendlistreq(::ss_proto::FriendListReq* friendlistreq);
  private:
  const ::ss_proto::FriendListReq& _internal_friendlistreq() const;
  ::ss_proto::FriendListReq* _internal_mutable_friendlistreq();
  public:
  void unsafe_arena_set_allocated_friendlistreq(
      ::ss_proto::FriendListReq* friendlistreq);
  ::ss_proto::FriendListReq* unsafe_arena_release_friendlistreq();

  // .ss_proto.FriendListAck friendListAck = 49;
  bool has_friendlistack() const;
  private:
  bool _internal_has_friendlistack() const;
  public:
  void clear_friendlistack();
  const ::ss_proto::FriendListAck& friendlistack() const;
  ::ss_proto::FriendListAck* release_friendlistack();
  ::ss_proto::FriendListAck* mutable_friendlistack();
  void set_allocated_friendlistack(::ss_proto::FriendListAck* friendlistack);
  private:
  const ::ss_proto::FriendListAck& _internal_friendlistack() const;
  ::ss_proto::FriendListAck* _internal_mutable_friendlistack();
  public:
  void unsafe_arena_set_allocated_friendlistack(
      ::ss_proto::FriendListAck* friendlistack);
  ::ss_proto::FriendListAck* unsafe_arena_release_friendlistack();

  // .ss_proto.RoleBoardReq roleBoardReq = 50;
  bool has_roleboardreq() const;
  private:
  bool _internal_has_roleboardreq() const;
  public:
  void clear_roleboardreq();
  const ::ss_proto::RoleBoardReq& roleboardreq() const;
  ::ss_proto::RoleBoardReq* release_roleboardreq();
  ::ss_proto::RoleBoardReq* mutable_roleboardreq();
  void set_allocated_roleboardreq(::ss_proto::RoleBoardReq* roleboardreq);
  private:
  const ::ss_proto::RoleBoardReq& _internal_roleboardreq() const;
  ::ss_proto::RoleBoardReq* _internal_mutable_roleboardreq();
  public:
  void unsafe_arena_set_allocated_roleboardreq(
      ::ss_proto::RoleBoardReq* roleboardreq);
  ::ss_proto::RoleBoardReq* unsafe_arena_release_roleboardreq();

  // .ss_proto.RoleBoardAck roleBoardAck = 51;
  bool has_roleboardack() const;
  private:
  bool _internal_has_roleboardack() const;
  public:
  void clear_roleboardack();
  const ::ss_proto::RoleBoardAck& roleboardack() const;
  ::ss_proto::RoleBoardAck* release_roleboardack();
  ::ss_proto::RoleBoardAck* mutable_roleboardack();
  void set_allocated_roleboardack(::ss_proto::RoleBoardAck* roleboardack);
  private:
  const ::ss_proto::RoleBoardAck& _internal_roleboardack() const;
  ::ss_proto::RoleBoardAck* _internal_mutable_roleboardack();
  public:
  void unsafe_arena_set_allocated_roleboardack(
      ::ss_proto::RoleBoardAck* roleboardack);
  ::ss_proto::RoleBoardAck* unsafe_arena_release_roleboardack();

  // .ss_proto.SceneUpdateReq sceneUpdateReq = 54;
  bool has_sceneupdatereq() const;
  private:
  bool _internal_has_sceneupdatereq() const;
  public:
  void clear_sceneupdatereq();
  const ::ss_proto::SceneUpdateReq& sceneupdatereq() const;
  ::ss_proto::SceneUpdateReq* release_sceneupdatereq();
  ::ss_proto::SceneUpdateReq* mutable_sceneupdatereq();
  void set_allocated_sceneupdatereq(::ss_proto::SceneUpdateReq* sceneupdatereq);
  private:
  const ::ss_proto::SceneUpdateReq& _internal_sceneupdatereq() const;
  ::ss_proto::SceneUpdateReq* _internal_mutable_sceneupdatereq();
  public:
  void unsafe_arena_set_allocated_sceneupdatereq(
      ::ss_proto::SceneUpdateReq* sceneupdatereq);
  ::ss_proto::SceneUpdateReq* unsafe_arena_release_sceneupdatereq();

  // .ss_proto.SceneUpdateAck sceneUpdateAck = 55;
  bool has_sceneupdateack() const;
  private:
  bool _internal_has_sceneupdateack() const;
  public:
  void clear_sceneupdateack();
  const ::ss_proto::SceneUpdateAck& sceneupdateack() const;
  ::ss_proto::SceneUpdateAck* release_sceneupdateack();
  ::ss_proto::SceneUpdateAck* mutable_sceneupdateack();
  void set_allocated_sceneupdateack(::ss_proto::SceneUpdateAck* sceneupdateack);
  private:
  const ::ss_proto::SceneUpdateAck& _internal_sceneupdateack() const;
  ::ss_proto::SceneUpdateAck* _internal_mutable_sceneupdateack();
  public:
  void unsafe_arena_set_allocated_sceneupdateack(
      ::ss_proto::SceneUpdateAck* sceneupdateack);
  ::ss_proto::SceneUpdateAck* unsafe_arena_release_sceneupdateack();

  // .ss_proto.SceneProcReq sceneProcReq = 56;
  bool has_sceneprocreq() const;
  private:
  bool _internal_has_sceneprocreq() const;
  public:
  void clear_sceneprocreq();
  const ::ss_proto::SceneProcReq& sceneprocreq() const;
  ::ss_proto::SceneProcReq* release_sceneprocreq();
  ::ss_proto::SceneProcReq* mutable_sceneprocreq();
  void set_allocated_sceneprocreq(::ss_proto::SceneProcReq* sceneprocreq);
  private:
  const ::ss_proto::SceneProcReq& _internal_sceneprocreq() const;
  ::ss_proto::SceneProcReq* _internal_mutable_sceneprocreq();
  public:
  void unsafe_arena_set_allocated_sceneprocreq(
      ::ss_proto::SceneProcReq* sceneprocreq);
  ::ss_proto::SceneProcReq* unsafe_arena_release_sceneprocreq();

  // .ss_proto.SceneProcAck sceneProcAck = 57;
  bool has_sceneprocack() const;
  private:
  bool _internal_has_sceneprocack() const;
  public:
  void clear_sceneprocack();
  const ::ss_proto::SceneProcAck& sceneprocack() const;
  ::ss_proto::SceneProcAck* release_sceneprocack();
  ::ss_proto::SceneProcAck* mutable_sceneprocack();
  void set_allocated_sceneprocack(::ss_proto::SceneProcAck* sceneprocack);
  private:
  const ::ss_proto::SceneProcAck& _internal_sceneprocack() const;
  ::ss_proto::SceneProcAck* _internal_mutable_sceneprocack();
  public:
  void unsafe_arena_set_allocated_sceneprocack(
      ::ss_proto::SceneProcAck* sceneprocack);
  ::ss_proto::SceneProcAck* unsafe_arena_release_sceneprocack();

  // .ss_proto.LoginSwtichReq loginSwtichReq = 58;
  bool has_loginswtichreq() const;
  private:
  bool _internal_has_loginswtichreq() const;
  public:
  void clear_loginswtichreq();
  const ::ss_proto::LoginSwtichReq& loginswtichreq() const;
  ::ss_proto::LoginSwtichReq* release_loginswtichreq();
  ::ss_proto::LoginSwtichReq* mutable_loginswtichreq();
  void set_allocated_loginswtichreq(::ss_proto::LoginSwtichReq* loginswtichreq);
  private:
  const ::ss_proto::LoginSwtichReq& _internal_loginswtichreq() const;
  ::ss_proto::LoginSwtichReq* _internal_mutable_loginswtichreq();
  public:
  void unsafe_arena_set_allocated_loginswtichreq(
      ::ss_proto::LoginSwtichReq* loginswtichreq);
  ::ss_proto::LoginSwtichReq* unsafe_arena_release_loginswtichreq();

  // .ss_proto.LoginSwtichAck loginSwtichAck = 59;
  bool has_loginswtichack() const;
  private:
  bool _internal_has_loginswtichack() const;
  public:
  void clear_loginswtichack();
  const ::ss_proto::LoginSwtichAck& loginswtichack() const;
  ::ss_proto::LoginSwtichAck* release_loginswtichack();
  ::ss_proto::LoginSwtichAck* mutable_loginswtichack();
  void set_allocated_loginswtichack(::ss_proto::LoginSwtichAck* loginswtichack);
  private:
  const ::ss_proto::LoginSwtichAck& _internal_loginswtichack() const;
  ::ss_proto::LoginSwtichAck* _internal_mutable_loginswtichack();
  public:
  void unsafe_arena_set_allocated_loginswtichack(
      ::ss_proto::LoginSwtichAck* loginswtichack);
  ::ss_proto::LoginSwtichAck* unsafe_arena_release_loginswtichack();

  // .ss_proto.Cmd code = 1;
  void clear_code();
  ::ss_proto::Cmd code() const;
  void set_code(::ss_proto::Cmd value);
  private:
  ::ss_proto::Cmd _internal_code() const;
  void _internal_set_code(::ss_proto::Cmd value);
  public:

  // .ss_proto.ErrorCode errorCode = 2;
  void clear_errorcode();
  ::ss_proto::ErrorCode errorcode() const;
  void set_errorcode(::ss_proto::ErrorCode value);
  private:
  ::ss_proto::ErrorCode _internal_errorcode() const;
  void _internal_set_errorcode(::ss_proto::ErrorCode value);
  public:

  // int64 taskId = 3;
  void clear_taskid();
  ::PROTOBUF_NAMESPACE_ID::int64 taskid() const;
  void set_taskid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_taskid() const;
  void _internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ss_proto.CommonMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ss_proto::AddDBNtf* adddbntf_;
  ::ss_proto::ServerCmd* servercmd_;
  ::ss_proto::NewMailNtf* newmailntf_;
  ::ss_proto::ServerReport* serverreport_;
  ::ss_proto::ServerCastNtf* servercastntf_;
  ::ss_proto::TopNUpdateReq* topnupdatereq_;
  ::ss_proto::TopNUpdateAck* topnupdateack_;
  ::ss_proto::TopNListReq* topnlistreq_;
  ::ss_proto::TopNListAck* topnlistack_;
  ::ss_proto::UserLoginReq* userloginreq_;
  ::ss_proto::UserLoginAck* userloginack_;
  ::ss_proto::LoginWorldReq* loginworldreq_;
  ::ss_proto::LoginWorldAck* loginworldack_;
  ::ss_proto::LoginGameReq* logingamereq_;
  ::ss_proto::LoginGameAck* logingameack_;
  ::ss_proto::LogoutGameReq* logoutgamereq_;
  ::ss_proto::LogoutGameAck* logoutgameack_;
  ::ss_proto::CreateRoleReq* createrolereq_;
  ::ss_proto::CreateRoleAck* createroleack_;
  ::ss_proto::SaveRoleReq* saverolereq_;
  ::ss_proto::SaveRoleAck* saveroleack_;
  ::ss_proto::KickUserNtf* kickuserntf_;
  ::ss_proto::SyncRoleNtf* syncrolentf_;
  ::ss_proto::SearchBossReq* searchbossreq_;
  ::ss_proto::SearchBossAck* searchbossack_;
  ::ss_proto::LogDataReq* logdatareq_;
  ::ss_proto::LogDataAck* logdataack_;
  ::ss_proto::LoadRoleSkillReq* loadroleskillreq_;
  ::ss_proto::LoadRoleSkillAck* loadroleskillack_;
  ::ss_proto::LoadRolePackageReq* loadrolepackagereq_;
  ::ss_proto::LoadRolePackageAck* loadrolepackageack_;
  ::ss_proto::FriendAddReq* friendaddreq_;
  ::ss_proto::FriendAddAck* friendaddack_;
  ::ss_proto::FriendDelReq* frienddelreq_;
  ::ss_proto::FriendDelAck* frienddelack_;
  ::ss_proto::FriendListReq* friendlistreq_;
  ::ss_proto::FriendListAck* friendlistack_;
  ::ss_proto::RoleBoardReq* roleboardreq_;
  ::ss_proto::RoleBoardAck* roleboardack_;
  ::ss_proto::SceneUpdateReq* sceneupdatereq_;
  ::ss_proto::SceneUpdateAck* sceneupdateack_;
  ::ss_proto::SceneProcReq* sceneprocreq_;
  ::ss_proto::SceneProcAck* sceneprocack_;
  ::ss_proto::LoginSwtichReq* loginswtichreq_;
  ::ss_proto::LoginSwtichAck* loginswtichack_;
  int code_;
  int errorcode_;
  ::PROTOBUF_NAMESPACE_ID::int64 taskid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fproto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddDBNtf

// string conn = 1;
inline void AddDBNtf::clear_conn() {
  conn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddDBNtf::conn() const {
  // @@protoc_insertion_point(field_get:ss_proto.AddDBNtf.conn)
  return _internal_conn();
}
inline void AddDBNtf::set_conn(const std::string& value) {
  _internal_set_conn(value);
  // @@protoc_insertion_point(field_set:ss_proto.AddDBNtf.conn)
}
inline std::string* AddDBNtf::mutable_conn() {
  // @@protoc_insertion_point(field_mutable:ss_proto.AddDBNtf.conn)
  return _internal_mutable_conn();
}
inline const std::string& AddDBNtf::_internal_conn() const {
  return conn_.Get();
}
inline void AddDBNtf::_internal_set_conn(const std::string& value) {
  
  conn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddDBNtf::set_conn(std::string&& value) {
  
  conn_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.AddDBNtf.conn)
}
inline void AddDBNtf::set_conn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  conn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.AddDBNtf.conn)
}
inline void AddDBNtf::set_conn(const char* value,
    size_t size) {
  
  conn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.AddDBNtf.conn)
}
inline std::string* AddDBNtf::_internal_mutable_conn() {
  
  return conn_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddDBNtf::release_conn() {
  // @@protoc_insertion_point(field_release:ss_proto.AddDBNtf.conn)
  return conn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddDBNtf::set_allocated_conn(std::string* conn) {
  if (conn != nullptr) {
    
  } else {
    
  }
  conn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), conn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.AddDBNtf.conn)
}
inline std::string* AddDBNtf::unsafe_arena_release_conn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.AddDBNtf.conn)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return conn_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddDBNtf::unsafe_arena_set_allocated_conn(
    std::string* conn) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (conn != nullptr) {
    
  } else {
    
  }
  conn_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      conn, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.AddDBNtf.conn)
}

// string name = 2;
inline void AddDBNtf::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddDBNtf::name() const {
  // @@protoc_insertion_point(field_get:ss_proto.AddDBNtf.name)
  return _internal_name();
}
inline void AddDBNtf::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ss_proto.AddDBNtf.name)
}
inline std::string* AddDBNtf::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ss_proto.AddDBNtf.name)
  return _internal_mutable_name();
}
inline const std::string& AddDBNtf::_internal_name() const {
  return name_.Get();
}
inline void AddDBNtf::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddDBNtf::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.AddDBNtf.name)
}
inline void AddDBNtf::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.AddDBNtf.name)
}
inline void AddDBNtf::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.AddDBNtf.name)
}
inline std::string* AddDBNtf::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddDBNtf::release_name() {
  // @@protoc_insertion_point(field_release:ss_proto.AddDBNtf.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddDBNtf::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.AddDBNtf.name)
}
inline std::string* AddDBNtf::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.AddDBNtf.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddDBNtf::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.AddDBNtf.name)
}

// string user = 3;
inline void AddDBNtf::clear_user() {
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddDBNtf::user() const {
  // @@protoc_insertion_point(field_get:ss_proto.AddDBNtf.user)
  return _internal_user();
}
inline void AddDBNtf::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:ss_proto.AddDBNtf.user)
}
inline std::string* AddDBNtf::mutable_user() {
  // @@protoc_insertion_point(field_mutable:ss_proto.AddDBNtf.user)
  return _internal_mutable_user();
}
inline const std::string& AddDBNtf::_internal_user() const {
  return user_.Get();
}
inline void AddDBNtf::_internal_set_user(const std::string& value) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddDBNtf::set_user(std::string&& value) {
  
  user_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.AddDBNtf.user)
}
inline void AddDBNtf::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.AddDBNtf.user)
}
inline void AddDBNtf::set_user(const char* value,
    size_t size) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.AddDBNtf.user)
}
inline std::string* AddDBNtf::_internal_mutable_user() {
  
  return user_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddDBNtf::release_user() {
  // @@protoc_insertion_point(field_release:ss_proto.AddDBNtf.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddDBNtf::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.AddDBNtf.user)
}
inline std::string* AddDBNtf::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.AddDBNtf.user)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddDBNtf::unsafe_arena_set_allocated_user(
    std::string* user) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user != nullptr) {
    
  } else {
    
  }
  user_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.AddDBNtf.user)
}

// string pass = 4;
inline void AddDBNtf::clear_pass() {
  pass_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddDBNtf::pass() const {
  // @@protoc_insertion_point(field_get:ss_proto.AddDBNtf.pass)
  return _internal_pass();
}
inline void AddDBNtf::set_pass(const std::string& value) {
  _internal_set_pass(value);
  // @@protoc_insertion_point(field_set:ss_proto.AddDBNtf.pass)
}
inline std::string* AddDBNtf::mutable_pass() {
  // @@protoc_insertion_point(field_mutable:ss_proto.AddDBNtf.pass)
  return _internal_mutable_pass();
}
inline const std::string& AddDBNtf::_internal_pass() const {
  return pass_.Get();
}
inline void AddDBNtf::_internal_set_pass(const std::string& value) {
  
  pass_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddDBNtf::set_pass(std::string&& value) {
  
  pass_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.AddDBNtf.pass)
}
inline void AddDBNtf::set_pass(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pass_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.AddDBNtf.pass)
}
inline void AddDBNtf::set_pass(const char* value,
    size_t size) {
  
  pass_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.AddDBNtf.pass)
}
inline std::string* AddDBNtf::_internal_mutable_pass() {
  
  return pass_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddDBNtf::release_pass() {
  // @@protoc_insertion_point(field_release:ss_proto.AddDBNtf.pass)
  return pass_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddDBNtf::set_allocated_pass(std::string* pass) {
  if (pass != nullptr) {
    
  } else {
    
  }
  pass_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pass,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.AddDBNtf.pass)
}
inline std::string* AddDBNtf::unsafe_arena_release_pass() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.AddDBNtf.pass)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pass_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddDBNtf::unsafe_arena_set_allocated_pass(
    std::string* pass) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pass != nullptr) {
    
  } else {
    
  }
  pass_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pass, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.AddDBNtf.pass)
}

// string dbId = 5;
inline void AddDBNtf::clear_dbid() {
  dbid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddDBNtf::dbid() const {
  // @@protoc_insertion_point(field_get:ss_proto.AddDBNtf.dbId)
  return _internal_dbid();
}
inline void AddDBNtf::set_dbid(const std::string& value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:ss_proto.AddDBNtf.dbId)
}
inline std::string* AddDBNtf::mutable_dbid() {
  // @@protoc_insertion_point(field_mutable:ss_proto.AddDBNtf.dbId)
  return _internal_mutable_dbid();
}
inline const std::string& AddDBNtf::_internal_dbid() const {
  return dbid_.Get();
}
inline void AddDBNtf::_internal_set_dbid(const std::string& value) {
  
  dbid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddDBNtf::set_dbid(std::string&& value) {
  
  dbid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.AddDBNtf.dbId)
}
inline void AddDBNtf::set_dbid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dbid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.AddDBNtf.dbId)
}
inline void AddDBNtf::set_dbid(const char* value,
    size_t size) {
  
  dbid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.AddDBNtf.dbId)
}
inline std::string* AddDBNtf::_internal_mutable_dbid() {
  
  return dbid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddDBNtf::release_dbid() {
  // @@protoc_insertion_point(field_release:ss_proto.AddDBNtf.dbId)
  return dbid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddDBNtf::set_allocated_dbid(std::string* dbid) {
  if (dbid != nullptr) {
    
  } else {
    
  }
  dbid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dbid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.AddDBNtf.dbId)
}
inline std::string* AddDBNtf::unsafe_arena_release_dbid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.AddDBNtf.dbId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dbid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddDBNtf::unsafe_arena_set_allocated_dbid(
    std::string* dbid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dbid != nullptr) {
    
  } else {
    
  }
  dbid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dbid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.AddDBNtf.dbId)
}

// -------------------------------------------------------------------

// ServerReport

// string ip = 1;
inline void ServerReport::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerReport::ip() const {
  // @@protoc_insertion_point(field_get:ss_proto.ServerReport.ip)
  return _internal_ip();
}
inline void ServerReport::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:ss_proto.ServerReport.ip)
}
inline std::string* ServerReport::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:ss_proto.ServerReport.ip)
  return _internal_mutable_ip();
}
inline const std::string& ServerReport::_internal_ip() const {
  return ip_.Get();
}
inline void ServerReport::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerReport::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.ServerReport.ip)
}
inline void ServerReport::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.ServerReport.ip)
}
inline void ServerReport::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.ServerReport.ip)
}
inline std::string* ServerReport::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerReport::release_ip() {
  // @@protoc_insertion_point(field_release:ss_proto.ServerReport.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerReport::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.ServerReport.ip)
}
inline std::string* ServerReport::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.ServerReport.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServerReport::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.ServerReport.ip)
}

// int32 port = 2;
inline void ServerReport::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerReport::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerReport::port() const {
  // @@protoc_insertion_point(field_get:ss_proto.ServerReport.port)
  return _internal_port();
}
inline void ServerReport::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void ServerReport::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:ss_proto.ServerReport.port)
}

// int32 count = 3;
inline void ServerReport::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerReport::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerReport::count() const {
  // @@protoc_insertion_point(field_get:ss_proto.ServerReport.count)
  return _internal_count();
}
inline void ServerReport::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void ServerReport::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:ss_proto.ServerReport.count)
}

// -------------------------------------------------------------------

// ServerCmd

// string cmd = 1;
inline void ServerCmd::clear_cmd() {
  cmd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerCmd::cmd() const {
  // @@protoc_insertion_point(field_get:ss_proto.ServerCmd.cmd)
  return _internal_cmd();
}
inline void ServerCmd::set_cmd(const std::string& value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:ss_proto.ServerCmd.cmd)
}
inline std::string* ServerCmd::mutable_cmd() {
  // @@protoc_insertion_point(field_mutable:ss_proto.ServerCmd.cmd)
  return _internal_mutable_cmd();
}
inline const std::string& ServerCmd::_internal_cmd() const {
  return cmd_.Get();
}
inline void ServerCmd::_internal_set_cmd(const std::string& value) {
  
  cmd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerCmd::set_cmd(std::string&& value) {
  
  cmd_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.ServerCmd.cmd)
}
inline void ServerCmd::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cmd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.ServerCmd.cmd)
}
inline void ServerCmd::set_cmd(const char* value,
    size_t size) {
  
  cmd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.ServerCmd.cmd)
}
inline std::string* ServerCmd::_internal_mutable_cmd() {
  
  return cmd_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerCmd::release_cmd() {
  // @@protoc_insertion_point(field_release:ss_proto.ServerCmd.cmd)
  return cmd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerCmd::set_allocated_cmd(std::string* cmd) {
  if (cmd != nullptr) {
    
  } else {
    
  }
  cmd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.ServerCmd.cmd)
}
inline std::string* ServerCmd::unsafe_arena_release_cmd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.ServerCmd.cmd)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cmd_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServerCmd::unsafe_arena_set_allocated_cmd(
    std::string* cmd) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cmd != nullptr) {
    
  } else {
    
  }
  cmd_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cmd, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.ServerCmd.cmd)
}

// -------------------------------------------------------------------

// ServerCastNtf

// .ss_proto.CastCode cc = 1;
inline void ServerCastNtf::clear_cc() {
  cc_ = 0;
}
inline ::ss_proto::CastCode ServerCastNtf::_internal_cc() const {
  return static_cast< ::ss_proto::CastCode >(cc_);
}
inline ::ss_proto::CastCode ServerCastNtf::cc() const {
  // @@protoc_insertion_point(field_get:ss_proto.ServerCastNtf.cc)
  return _internal_cc();
}
inline void ServerCastNtf::_internal_set_cc(::ss_proto::CastCode value) {
  
  cc_ = value;
}
inline void ServerCastNtf::set_cc(::ss_proto::CastCode value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:ss_proto.ServerCastNtf.cc)
}

// .ss_proto.CastType ct = 2;
inline void ServerCastNtf::clear_ct() {
  ct_ = 0;
}
inline ::ss_proto::CastType ServerCastNtf::_internal_ct() const {
  return static_cast< ::ss_proto::CastType >(ct_);
}
inline ::ss_proto::CastType ServerCastNtf::ct() const {
  // @@protoc_insertion_point(field_get:ss_proto.ServerCastNtf.ct)
  return _internal_ct();
}
inline void ServerCastNtf::_internal_set_ct(::ss_proto::CastType value) {
  
  ct_ = value;
}
inline void ServerCastNtf::set_ct(::ss_proto::CastType value) {
  _internal_set_ct(value);
  // @@protoc_insertion_point(field_set:ss_proto.ServerCastNtf.ct)
}

// int64 worldId = 3;
inline void ServerCastNtf::clear_worldid() {
  worldid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerCastNtf::_internal_worldid() const {
  return worldid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerCastNtf::worldid() const {
  // @@protoc_insertion_point(field_get:ss_proto.ServerCastNtf.worldId)
  return _internal_worldid();
}
inline void ServerCastNtf::_internal_set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  worldid_ = value;
}
inline void ServerCastNtf::set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_worldid(value);
  // @@protoc_insertion_point(field_set:ss_proto.ServerCastNtf.worldId)
}

// repeated int64 uids = 4;
inline int ServerCastNtf::_internal_uids_size() const {
  return uids_.size();
}
inline int ServerCastNtf::uids_size() const {
  return _internal_uids_size();
}
inline void ServerCastNtf::clear_uids() {
  uids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerCastNtf::_internal_uids(int index) const {
  return uids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerCastNtf::uids(int index) const {
  // @@protoc_insertion_point(field_get:ss_proto.ServerCastNtf.uids)
  return _internal_uids(index);
}
inline void ServerCastNtf::set_uids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ss_proto.ServerCastNtf.uids)
}
inline void ServerCastNtf::_internal_add_uids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  uids_.Add(value);
}
inline void ServerCastNtf::add_uids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_uids(value);
  // @@protoc_insertion_point(field_add:ss_proto.ServerCastNtf.uids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ServerCastNtf::_internal_uids() const {
  return uids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ServerCastNtf::uids() const {
  // @@protoc_insertion_point(field_list:ss_proto.ServerCastNtf.uids)
  return _internal_uids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ServerCastNtf::_internal_mutable_uids() {
  return &uids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ServerCastNtf::mutable_uids() {
  // @@protoc_insertion_point(field_mutable_list:ss_proto.ServerCastNtf.uids)
  return _internal_mutable_uids();
}

// repeated int64 rids = 5;
inline int ServerCastNtf::_internal_rids_size() const {
  return rids_.size();
}
inline int ServerCastNtf::rids_size() const {
  return _internal_rids_size();
}
inline void ServerCastNtf::clear_rids() {
  rids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerCastNtf::_internal_rids(int index) const {
  return rids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerCastNtf::rids(int index) const {
  // @@protoc_insertion_point(field_get:ss_proto.ServerCastNtf.rids)
  return _internal_rids(index);
}
inline void ServerCastNtf::set_rids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  rids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ss_proto.ServerCastNtf.rids)
}
inline void ServerCastNtf::_internal_add_rids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  rids_.Add(value);
}
inline void ServerCastNtf::add_rids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_rids(value);
  // @@protoc_insertion_point(field_add:ss_proto.ServerCastNtf.rids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ServerCastNtf::_internal_rids() const {
  return rids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ServerCastNtf::rids() const {
  // @@protoc_insertion_point(field_list:ss_proto.ServerCastNtf.rids)
  return _internal_rids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ServerCastNtf::_internal_mutable_rids() {
  return &rids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ServerCastNtf::mutable_rids() {
  // @@protoc_insertion_point(field_mutable_list:ss_proto.ServerCastNtf.rids)
  return _internal_mutable_rids();
}

// bytes data = 6;
inline void ServerCastNtf::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerCastNtf::data() const {
  // @@protoc_insertion_point(field_get:ss_proto.ServerCastNtf.data)
  return _internal_data();
}
inline void ServerCastNtf::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ss_proto.ServerCastNtf.data)
}
inline std::string* ServerCastNtf::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ss_proto.ServerCastNtf.data)
  return _internal_mutable_data();
}
inline const std::string& ServerCastNtf::_internal_data() const {
  return data_.Get();
}
inline void ServerCastNtf::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerCastNtf::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.ServerCastNtf.data)
}
inline void ServerCastNtf::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.ServerCastNtf.data)
}
inline void ServerCastNtf::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.ServerCastNtf.data)
}
inline std::string* ServerCastNtf::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerCastNtf::release_data() {
  // @@protoc_insertion_point(field_release:ss_proto.ServerCastNtf.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerCastNtf::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.ServerCastNtf.data)
}
inline std::string* ServerCastNtf::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.ServerCastNtf.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServerCastNtf::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.ServerCastNtf.data)
}

// -------------------------------------------------------------------

// NewMailNtf

// int32 mailId = 1;
inline void NewMailNtf::clear_mailid() {
  mailid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewMailNtf::_internal_mailid() const {
  return mailid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewMailNtf::mailid() const {
  // @@protoc_insertion_point(field_get:ss_proto.NewMailNtf.mailId)
  return _internal_mailid();
}
inline void NewMailNtf::_internal_set_mailid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mailid_ = value;
}
inline void NewMailNtf::set_mailid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mailid(value);
  // @@protoc_insertion_point(field_set:ss_proto.NewMailNtf.mailId)
}

// bytes content = 2;
inline void NewMailNtf::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NewMailNtf::content() const {
  // @@protoc_insertion_point(field_get:ss_proto.NewMailNtf.content)
  return _internal_content();
}
inline void NewMailNtf::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:ss_proto.NewMailNtf.content)
}
inline std::string* NewMailNtf::mutable_content() {
  // @@protoc_insertion_point(field_mutable:ss_proto.NewMailNtf.content)
  return _internal_mutable_content();
}
inline const std::string& NewMailNtf::_internal_content() const {
  return content_.Get();
}
inline void NewMailNtf::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NewMailNtf::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.NewMailNtf.content)
}
inline void NewMailNtf::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.NewMailNtf.content)
}
inline void NewMailNtf::set_content(const void* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.NewMailNtf.content)
}
inline std::string* NewMailNtf::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NewMailNtf::release_content() {
  // @@protoc_insertion_point(field_release:ss_proto.NewMailNtf.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewMailNtf::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.NewMailNtf.content)
}
inline std::string* NewMailNtf::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.NewMailNtf.content)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NewMailNtf::unsafe_arena_set_allocated_content(
    std::string* content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (content != nullptr) {
    
  } else {
    
  }
  content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      content, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.NewMailNtf.content)
}

// -------------------------------------------------------------------

// UserLoginReq

// string ptId = 1;
inline void UserLoginReq::clear_ptid() {
  ptid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserLoginReq::ptid() const {
  // @@protoc_insertion_point(field_get:ss_proto.UserLoginReq.ptId)
  return _internal_ptid();
}
inline void UserLoginReq::set_ptid(const std::string& value) {
  _internal_set_ptid(value);
  // @@protoc_insertion_point(field_set:ss_proto.UserLoginReq.ptId)
}
inline std::string* UserLoginReq::mutable_ptid() {
  // @@protoc_insertion_point(field_mutable:ss_proto.UserLoginReq.ptId)
  return _internal_mutable_ptid();
}
inline const std::string& UserLoginReq::_internal_ptid() const {
  return ptid_.Get();
}
inline void UserLoginReq::_internal_set_ptid(const std::string& value) {
  
  ptid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserLoginReq::set_ptid(std::string&& value) {
  
  ptid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.UserLoginReq.ptId)
}
inline void UserLoginReq::set_ptid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ptid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.UserLoginReq.ptId)
}
inline void UserLoginReq::set_ptid(const char* value,
    size_t size) {
  
  ptid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.UserLoginReq.ptId)
}
inline std::string* UserLoginReq::_internal_mutable_ptid() {
  
  return ptid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserLoginReq::release_ptid() {
  // @@protoc_insertion_point(field_release:ss_proto.UserLoginReq.ptId)
  return ptid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserLoginReq::set_allocated_ptid(std::string* ptid) {
  if (ptid != nullptr) {
    
  } else {
    
  }
  ptid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ptid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.UserLoginReq.ptId)
}
inline std::string* UserLoginReq::unsafe_arena_release_ptid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.UserLoginReq.ptId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ptid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserLoginReq::unsafe_arena_set_allocated_ptid(
    std::string* ptid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ptid != nullptr) {
    
  } else {
    
  }
  ptid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ptid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.UserLoginReq.ptId)
}

// int32 ptType = 2;
inline void UserLoginReq::clear_pttype() {
  pttype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserLoginReq::_internal_pttype() const {
  return pttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserLoginReq::pttype() const {
  // @@protoc_insertion_point(field_get:ss_proto.UserLoginReq.ptType)
  return _internal_pttype();
}
inline void UserLoginReq::_internal_set_pttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pttype_ = value;
}
inline void UserLoginReq::set_pttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pttype(value);
  // @@protoc_insertion_point(field_set:ss_proto.UserLoginReq.ptType)
}

// -------------------------------------------------------------------

// UserRole

// int64 roleId = 1;
inline void UserRole::clear_roleid() {
  roleid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserRole::_internal_roleid() const {
  return roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserRole::roleid() const {
  // @@protoc_insertion_point(field_get:ss_proto.UserRole.roleId)
  return _internal_roleid();
}
inline void UserRole::_internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  roleid_ = value;
}
inline void UserRole::set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:ss_proto.UserRole.roleId)
}

// int64 worldId = 2;
inline void UserRole::clear_worldid() {
  worldid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserRole::_internal_worldid() const {
  return worldid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserRole::worldid() const {
  // @@protoc_insertion_point(field_get:ss_proto.UserRole.worldId)
  return _internal_worldid();
}
inline void UserRole::_internal_set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  worldid_ = value;
}
inline void UserRole::set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_worldid(value);
  // @@protoc_insertion_point(field_set:ss_proto.UserRole.worldId)
}

// int64 dbId = 3;
inline void UserRole::clear_dbid() {
  dbid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserRole::_internal_dbid() const {
  return dbid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserRole::dbid() const {
  // @@protoc_insertion_point(field_get:ss_proto.UserRole.dbId)
  return _internal_dbid();
}
inline void UserRole::_internal_set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  dbid_ = value;
}
inline void UserRole::set_dbid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:ss_proto.UserRole.dbId)
}

// string name = 4;
inline void UserRole::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserRole::name() const {
  // @@protoc_insertion_point(field_get:ss_proto.UserRole.name)
  return _internal_name();
}
inline void UserRole::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ss_proto.UserRole.name)
}
inline std::string* UserRole::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ss_proto.UserRole.name)
  return _internal_mutable_name();
}
inline const std::string& UserRole::_internal_name() const {
  return name_.Get();
}
inline void UserRole::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserRole::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.UserRole.name)
}
inline void UserRole::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.UserRole.name)
}
inline void UserRole::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.UserRole.name)
}
inline std::string* UserRole::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserRole::release_name() {
  // @@protoc_insertion_point(field_release:ss_proto.UserRole.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserRole::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.UserRole.name)
}
inline std::string* UserRole::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.UserRole.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserRole::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.UserRole.name)
}

// int64 time = 5;
inline void UserRole::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserRole::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserRole::time() const {
  // @@protoc_insertion_point(field_get:ss_proto.UserRole.time)
  return _internal_time();
}
inline void UserRole::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void UserRole::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:ss_proto.UserRole.time)
}

// string face = 6;
inline void UserRole::clear_face() {
  face_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserRole::face() const {
  // @@protoc_insertion_point(field_get:ss_proto.UserRole.face)
  return _internal_face();
}
inline void UserRole::set_face(const std::string& value) {
  _internal_set_face(value);
  // @@protoc_insertion_point(field_set:ss_proto.UserRole.face)
}
inline std::string* UserRole::mutable_face() {
  // @@protoc_insertion_point(field_mutable:ss_proto.UserRole.face)
  return _internal_mutable_face();
}
inline const std::string& UserRole::_internal_face() const {
  return face_.Get();
}
inline void UserRole::_internal_set_face(const std::string& value) {
  
  face_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserRole::set_face(std::string&& value) {
  
  face_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.UserRole.face)
}
inline void UserRole::set_face(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  face_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.UserRole.face)
}
inline void UserRole::set_face(const char* value,
    size_t size) {
  
  face_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.UserRole.face)
}
inline std::string* UserRole::_internal_mutable_face() {
  
  return face_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserRole::release_face() {
  // @@protoc_insertion_point(field_release:ss_proto.UserRole.face)
  return face_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserRole::set_allocated_face(std::string* face) {
  if (face != nullptr) {
    
  } else {
    
  }
  face_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), face,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.UserRole.face)
}
inline std::string* UserRole::unsafe_arena_release_face() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.UserRole.face)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return face_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserRole::unsafe_arena_set_allocated_face(
    std::string* face) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (face != nullptr) {
    
  } else {
    
  }
  face_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      face, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.UserRole.face)
}

// int32 charId = 7;
inline void UserRole::clear_charid() {
  charid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserRole::_internal_charid() const {
  return charid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserRole::charid() const {
  // @@protoc_insertion_point(field_get:ss_proto.UserRole.charId)
  return _internal_charid();
}
inline void UserRole::_internal_set_charid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  charid_ = value;
}
inline void UserRole::set_charid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_charid(value);
  // @@protoc_insertion_point(field_set:ss_proto.UserRole.charId)
}

// -------------------------------------------------------------------

// UserLoginAck

// string token = 1;
inline void UserLoginAck::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserLoginAck::token() const {
  // @@protoc_insertion_point(field_get:ss_proto.UserLoginAck.token)
  return _internal_token();
}
inline void UserLoginAck::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ss_proto.UserLoginAck.token)
}
inline std::string* UserLoginAck::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ss_proto.UserLoginAck.token)
  return _internal_mutable_token();
}
inline const std::string& UserLoginAck::_internal_token() const {
  return token_.Get();
}
inline void UserLoginAck::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserLoginAck::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.UserLoginAck.token)
}
inline void UserLoginAck::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.UserLoginAck.token)
}
inline void UserLoginAck::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.UserLoginAck.token)
}
inline std::string* UserLoginAck::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserLoginAck::release_token() {
  // @@protoc_insertion_point(field_release:ss_proto.UserLoginAck.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserLoginAck::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.UserLoginAck.token)
}
inline std::string* UserLoginAck::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.UserLoginAck.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserLoginAck::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.UserLoginAck.token)
}

// repeated .ss_proto.UserRole roles = 2;
inline int UserLoginAck::_internal_roles_size() const {
  return roles_.size();
}
inline int UserLoginAck::roles_size() const {
  return _internal_roles_size();
}
inline void UserLoginAck::clear_roles() {
  roles_.Clear();
}
inline ::ss_proto::UserRole* UserLoginAck::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:ss_proto.UserLoginAck.roles)
  return roles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ss_proto::UserRole >*
UserLoginAck::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:ss_proto.UserLoginAck.roles)
  return &roles_;
}
inline const ::ss_proto::UserRole& UserLoginAck::_internal_roles(int index) const {
  return roles_.Get(index);
}
inline const ::ss_proto::UserRole& UserLoginAck::roles(int index) const {
  // @@protoc_insertion_point(field_get:ss_proto.UserLoginAck.roles)
  return _internal_roles(index);
}
inline ::ss_proto::UserRole* UserLoginAck::_internal_add_roles() {
  return roles_.Add();
}
inline ::ss_proto::UserRole* UserLoginAck::add_roles() {
  // @@protoc_insertion_point(field_add:ss_proto.UserLoginAck.roles)
  return _internal_add_roles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ss_proto::UserRole >&
UserLoginAck::roles() const {
  // @@protoc_insertion_point(field_list:ss_proto.UserLoginAck.roles)
  return roles_;
}

// -------------------------------------------------------------------

// LoginWorldReq

// string token = 1;
inline void LoginWorldReq::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginWorldReq::token() const {
  // @@protoc_insertion_point(field_get:ss_proto.LoginWorldReq.token)
  return _internal_token();
}
inline void LoginWorldReq::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ss_proto.LoginWorldReq.token)
}
inline std::string* LoginWorldReq::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ss_proto.LoginWorldReq.token)
  return _internal_mutable_token();
}
inline const std::string& LoginWorldReq::_internal_token() const {
  return token_.Get();
}
inline void LoginWorldReq::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginWorldReq::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.LoginWorldReq.token)
}
inline void LoginWorldReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.LoginWorldReq.token)
}
inline void LoginWorldReq::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.LoginWorldReq.token)
}
inline std::string* LoginWorldReq::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginWorldReq::release_token() {
  // @@protoc_insertion_point(field_release:ss_proto.LoginWorldReq.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginWorldReq::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.LoginWorldReq.token)
}
inline std::string* LoginWorldReq::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.LoginWorldReq.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginWorldReq::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.LoginWorldReq.token)
}

// int64 worldId = 2;
inline void LoginWorldReq::clear_worldid() {
  worldid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoginWorldReq::_internal_worldid() const {
  return worldid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoginWorldReq::worldid() const {
  // @@protoc_insertion_point(field_get:ss_proto.LoginWorldReq.worldId)
  return _internal_worldid();
}
inline void LoginWorldReq::_internal_set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  worldid_ = value;
}
inline void LoginWorldReq::set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_worldid(value);
  // @@protoc_insertion_point(field_set:ss_proto.LoginWorldReq.worldId)
}

// -------------------------------------------------------------------

// LoginWorldAck

// string token = 1;
inline void LoginWorldAck::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginWorldAck::token() const {
  // @@protoc_insertion_point(field_get:ss_proto.LoginWorldAck.token)
  return _internal_token();
}
inline void LoginWorldAck::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ss_proto.LoginWorldAck.token)
}
inline std::string* LoginWorldAck::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ss_proto.LoginWorldAck.token)
  return _internal_mutable_token();
}
inline const std::string& LoginWorldAck::_internal_token() const {
  return token_.Get();
}
inline void LoginWorldAck::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginWorldAck::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.LoginWorldAck.token)
}
inline void LoginWorldAck::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.LoginWorldAck.token)
}
inline void LoginWorldAck::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.LoginWorldAck.token)
}
inline std::string* LoginWorldAck::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginWorldAck::release_token() {
  // @@protoc_insertion_point(field_release:ss_proto.LoginWorldAck.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginWorldAck::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.LoginWorldAck.token)
}
inline std::string* LoginWorldAck::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.LoginWorldAck.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginWorldAck::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.LoginWorldAck.token)
}

// string ip = 2;
inline void LoginWorldAck::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginWorldAck::ip() const {
  // @@protoc_insertion_point(field_get:ss_proto.LoginWorldAck.ip)
  return _internal_ip();
}
inline void LoginWorldAck::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:ss_proto.LoginWorldAck.ip)
}
inline std::string* LoginWorldAck::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:ss_proto.LoginWorldAck.ip)
  return _internal_mutable_ip();
}
inline const std::string& LoginWorldAck::_internal_ip() const {
  return ip_.Get();
}
inline void LoginWorldAck::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginWorldAck::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.LoginWorldAck.ip)
}
inline void LoginWorldAck::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.LoginWorldAck.ip)
}
inline void LoginWorldAck::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.LoginWorldAck.ip)
}
inline std::string* LoginWorldAck::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginWorldAck::release_ip() {
  // @@protoc_insertion_point(field_release:ss_proto.LoginWorldAck.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginWorldAck::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.LoginWorldAck.ip)
}
inline std::string* LoginWorldAck::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.LoginWorldAck.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginWorldAck::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.LoginWorldAck.ip)
}

// int32 port = 3;
inline void LoginWorldAck::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginWorldAck::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginWorldAck::port() const {
  // @@protoc_insertion_point(field_get:ss_proto.LoginWorldAck.port)
  return _internal_port();
}
inline void LoginWorldAck::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void LoginWorldAck::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:ss_proto.LoginWorldAck.port)
}

// -------------------------------------------------------------------

// LoginGameReq

// string token = 1;
inline void LoginGameReq::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginGameReq::token() const {
  // @@protoc_insertion_point(field_get:ss_proto.LoginGameReq.token)
  return _internal_token();
}
inline void LoginGameReq::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ss_proto.LoginGameReq.token)
}
inline std::string* LoginGameReq::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ss_proto.LoginGameReq.token)
  return _internal_mutable_token();
}
inline const std::string& LoginGameReq::_internal_token() const {
  return token_.Get();
}
inline void LoginGameReq::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginGameReq::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.LoginGameReq.token)
}
inline void LoginGameReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.LoginGameReq.token)
}
inline void LoginGameReq::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.LoginGameReq.token)
}
inline std::string* LoginGameReq::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginGameReq::release_token() {
  // @@protoc_insertion_point(field_release:ss_proto.LoginGameReq.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginGameReq::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.LoginGameReq.token)
}
inline std::string* LoginGameReq::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.LoginGameReq.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginGameReq::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.LoginGameReq.token)
}

// -------------------------------------------------------------------

// RoleDatas

// bytes baseData = 1;
inline void RoleDatas::clear_basedata() {
  basedata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoleDatas::basedata() const {
  // @@protoc_insertion_point(field_get:ss_proto.RoleDatas.baseData)
  return _internal_basedata();
}
inline void RoleDatas::set_basedata(const std::string& value) {
  _internal_set_basedata(value);
  // @@protoc_insertion_point(field_set:ss_proto.RoleDatas.baseData)
}
inline std::string* RoleDatas::mutable_basedata() {
  // @@protoc_insertion_point(field_mutable:ss_proto.RoleDatas.baseData)
  return _internal_mutable_basedata();
}
inline const std::string& RoleDatas::_internal_basedata() const {
  return basedata_.Get();
}
inline void RoleDatas::_internal_set_basedata(const std::string& value) {
  
  basedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoleDatas::set_basedata(std::string&& value) {
  
  basedata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.RoleDatas.baseData)
}
inline void RoleDatas::set_basedata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  basedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.RoleDatas.baseData)
}
inline void RoleDatas::set_basedata(const void* value,
    size_t size) {
  
  basedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.RoleDatas.baseData)
}
inline std::string* RoleDatas::_internal_mutable_basedata() {
  
  return basedata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoleDatas::release_basedata() {
  // @@protoc_insertion_point(field_release:ss_proto.RoleDatas.baseData)
  return basedata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoleDatas::set_allocated_basedata(std::string* basedata) {
  if (basedata != nullptr) {
    
  } else {
    
  }
  basedata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), basedata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.RoleDatas.baseData)
}
inline std::string* RoleDatas::unsafe_arena_release_basedata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.RoleDatas.baseData)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return basedata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoleDatas::unsafe_arena_set_allocated_basedata(
    std::string* basedata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (basedata != nullptr) {
    
  } else {
    
  }
  basedata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      basedata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.RoleDatas.baseData)
}

// bytes sceneData = 2;
inline void RoleDatas::clear_scenedata() {
  scenedata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoleDatas::scenedata() const {
  // @@protoc_insertion_point(field_get:ss_proto.RoleDatas.sceneData)
  return _internal_scenedata();
}
inline void RoleDatas::set_scenedata(const std::string& value) {
  _internal_set_scenedata(value);
  // @@protoc_insertion_point(field_set:ss_proto.RoleDatas.sceneData)
}
inline std::string* RoleDatas::mutable_scenedata() {
  // @@protoc_insertion_point(field_mutable:ss_proto.RoleDatas.sceneData)
  return _internal_mutable_scenedata();
}
inline const std::string& RoleDatas::_internal_scenedata() const {
  return scenedata_.Get();
}
inline void RoleDatas::_internal_set_scenedata(const std::string& value) {
  
  scenedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoleDatas::set_scenedata(std::string&& value) {
  
  scenedata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.RoleDatas.sceneData)
}
inline void RoleDatas::set_scenedata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scenedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.RoleDatas.sceneData)
}
inline void RoleDatas::set_scenedata(const void* value,
    size_t size) {
  
  scenedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.RoleDatas.sceneData)
}
inline std::string* RoleDatas::_internal_mutable_scenedata() {
  
  return scenedata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoleDatas::release_scenedata() {
  // @@protoc_insertion_point(field_release:ss_proto.RoleDatas.sceneData)
  return scenedata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoleDatas::set_allocated_scenedata(std::string* scenedata) {
  if (scenedata != nullptr) {
    
  } else {
    
  }
  scenedata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scenedata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.RoleDatas.sceneData)
}
inline std::string* RoleDatas::unsafe_arena_release_scenedata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.RoleDatas.sceneData)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return scenedata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoleDatas::unsafe_arena_set_allocated_scenedata(
    std::string* scenedata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (scenedata != nullptr) {
    
  } else {
    
  }
  scenedata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      scenedata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.RoleDatas.sceneData)
}

// bytes heroData = 3;
inline void RoleDatas::clear_herodata() {
  herodata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoleDatas::herodata() const {
  // @@protoc_insertion_point(field_get:ss_proto.RoleDatas.heroData)
  return _internal_herodata();
}
inline void RoleDatas::set_herodata(const std::string& value) {
  _internal_set_herodata(value);
  // @@protoc_insertion_point(field_set:ss_proto.RoleDatas.heroData)
}
inline std::string* RoleDatas::mutable_herodata() {
  // @@protoc_insertion_point(field_mutable:ss_proto.RoleDatas.heroData)
  return _internal_mutable_herodata();
}
inline const std::string& RoleDatas::_internal_herodata() const {
  return herodata_.Get();
}
inline void RoleDatas::_internal_set_herodata(const std::string& value) {
  
  herodata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoleDatas::set_herodata(std::string&& value) {
  
  herodata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.RoleDatas.heroData)
}
inline void RoleDatas::set_herodata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  herodata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.RoleDatas.heroData)
}
inline void RoleDatas::set_herodata(const void* value,
    size_t size) {
  
  herodata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.RoleDatas.heroData)
}
inline std::string* RoleDatas::_internal_mutable_herodata() {
  
  return herodata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoleDatas::release_herodata() {
  // @@protoc_insertion_point(field_release:ss_proto.RoleDatas.heroData)
  return herodata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoleDatas::set_allocated_herodata(std::string* herodata) {
  if (herodata != nullptr) {
    
  } else {
    
  }
  herodata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), herodata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.RoleDatas.heroData)
}
inline std::string* RoleDatas::unsafe_arena_release_herodata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.RoleDatas.heroData)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return herodata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoleDatas::unsafe_arena_set_allocated_herodata(
    std::string* herodata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (herodata != nullptr) {
    
  } else {
    
  }
  herodata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      herodata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.RoleDatas.heroData)
}

// bytes equipData = 4;
inline void RoleDatas::clear_equipdata() {
  equipdata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoleDatas::equipdata() const {
  // @@protoc_insertion_point(field_get:ss_proto.RoleDatas.equipData)
  return _internal_equipdata();
}
inline void RoleDatas::set_equipdata(const std::string& value) {
  _internal_set_equipdata(value);
  // @@protoc_insertion_point(field_set:ss_proto.RoleDatas.equipData)
}
inline std::string* RoleDatas::mutable_equipdata() {
  // @@protoc_insertion_point(field_mutable:ss_proto.RoleDatas.equipData)
  return _internal_mutable_equipdata();
}
inline const std::string& RoleDatas::_internal_equipdata() const {
  return equipdata_.Get();
}
inline void RoleDatas::_internal_set_equipdata(const std::string& value) {
  
  equipdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoleDatas::set_equipdata(std::string&& value) {
  
  equipdata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.RoleDatas.equipData)
}
inline void RoleDatas::set_equipdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  equipdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.RoleDatas.equipData)
}
inline void RoleDatas::set_equipdata(const void* value,
    size_t size) {
  
  equipdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.RoleDatas.equipData)
}
inline std::string* RoleDatas::_internal_mutable_equipdata() {
  
  return equipdata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoleDatas::release_equipdata() {
  // @@protoc_insertion_point(field_release:ss_proto.RoleDatas.equipData)
  return equipdata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoleDatas::set_allocated_equipdata(std::string* equipdata) {
  if (equipdata != nullptr) {
    
  } else {
    
  }
  equipdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), equipdata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.RoleDatas.equipData)
}
inline std::string* RoleDatas::unsafe_arena_release_equipdata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.RoleDatas.equipData)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return equipdata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoleDatas::unsafe_arena_set_allocated_equipdata(
    std::string* equipdata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (equipdata != nullptr) {
    
  } else {
    
  }
  equipdata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      equipdata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.RoleDatas.equipData)
}

// bytes materialData = 5;
inline void RoleDatas::clear_materialdata() {
  materialdata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoleDatas::materialdata() const {
  // @@protoc_insertion_point(field_get:ss_proto.RoleDatas.materialData)
  return _internal_materialdata();
}
inline void RoleDatas::set_materialdata(const std::string& value) {
  _internal_set_materialdata(value);
  // @@protoc_insertion_point(field_set:ss_proto.RoleDatas.materialData)
}
inline std::string* RoleDatas::mutable_materialdata() {
  // @@protoc_insertion_point(field_mutable:ss_proto.RoleDatas.materialData)
  return _internal_mutable_materialdata();
}
inline const std::string& RoleDatas::_internal_materialdata() const {
  return materialdata_.Get();
}
inline void RoleDatas::_internal_set_materialdata(const std::string& value) {
  
  materialdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoleDatas::set_materialdata(std::string&& value) {
  
  materialdata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.RoleDatas.materialData)
}
inline void RoleDatas::set_materialdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  materialdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.RoleDatas.materialData)
}
inline void RoleDatas::set_materialdata(const void* value,
    size_t size) {
  
  materialdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.RoleDatas.materialData)
}
inline std::string* RoleDatas::_internal_mutable_materialdata() {
  
  return materialdata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoleDatas::release_materialdata() {
  // @@protoc_insertion_point(field_release:ss_proto.RoleDatas.materialData)
  return materialdata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoleDatas::set_allocated_materialdata(std::string* materialdata) {
  if (materialdata != nullptr) {
    
  } else {
    
  }
  materialdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), materialdata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.RoleDatas.materialData)
}
inline std::string* RoleDatas::unsafe_arena_release_materialdata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.RoleDatas.materialData)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return materialdata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoleDatas::unsafe_arena_set_allocated_materialdata(
    std::string* materialdata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (materialdata != nullptr) {
    
  } else {
    
  }
  materialdata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      materialdata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.RoleDatas.materialData)
}

// bytes currencyData = 6;
inline void RoleDatas::clear_currencydata() {
  currencydata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoleDatas::currencydata() const {
  // @@protoc_insertion_point(field_get:ss_proto.RoleDatas.currencyData)
  return _internal_currencydata();
}
inline void RoleDatas::set_currencydata(const std::string& value) {
  _internal_set_currencydata(value);
  // @@protoc_insertion_point(field_set:ss_proto.RoleDatas.currencyData)
}
inline std::string* RoleDatas::mutable_currencydata() {
  // @@protoc_insertion_point(field_mutable:ss_proto.RoleDatas.currencyData)
  return _internal_mutable_currencydata();
}
inline const std::string& RoleDatas::_internal_currencydata() const {
  return currencydata_.Get();
}
inline void RoleDatas::_internal_set_currencydata(const std::string& value) {
  
  currencydata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoleDatas::set_currencydata(std::string&& value) {
  
  currencydata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.RoleDatas.currencyData)
}
inline void RoleDatas::set_currencydata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currencydata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.RoleDatas.currencyData)
}
inline void RoleDatas::set_currencydata(const void* value,
    size_t size) {
  
  currencydata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.RoleDatas.currencyData)
}
inline std::string* RoleDatas::_internal_mutable_currencydata() {
  
  return currencydata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoleDatas::release_currencydata() {
  // @@protoc_insertion_point(field_release:ss_proto.RoleDatas.currencyData)
  return currencydata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoleDatas::set_allocated_currencydata(std::string* currencydata) {
  if (currencydata != nullptr) {
    
  } else {
    
  }
  currencydata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currencydata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.RoleDatas.currencyData)
}
inline std::string* RoleDatas::unsafe_arena_release_currencydata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.RoleDatas.currencyData)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return currencydata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoleDatas::unsafe_arena_set_allocated_currencydata(
    std::string* currencydata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (currencydata != nullptr) {
    
  } else {
    
  }
  currencydata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      currencydata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.RoleDatas.currencyData)
}

// bytes skillData = 7;
inline void RoleDatas::clear_skilldata() {
  skilldata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoleDatas::skilldata() const {
  // @@protoc_insertion_point(field_get:ss_proto.RoleDatas.skillData)
  return _internal_skilldata();
}
inline void RoleDatas::set_skilldata(const std::string& value) {
  _internal_set_skilldata(value);
  // @@protoc_insertion_point(field_set:ss_proto.RoleDatas.skillData)
}
inline std::string* RoleDatas::mutable_skilldata() {
  // @@protoc_insertion_point(field_mutable:ss_proto.RoleDatas.skillData)
  return _internal_mutable_skilldata();
}
inline const std::string& RoleDatas::_internal_skilldata() const {
  return skilldata_.Get();
}
inline void RoleDatas::_internal_set_skilldata(const std::string& value) {
  
  skilldata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoleDatas::set_skilldata(std::string&& value) {
  
  skilldata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.RoleDatas.skillData)
}
inline void RoleDatas::set_skilldata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  skilldata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.RoleDatas.skillData)
}
inline void RoleDatas::set_skilldata(const void* value,
    size_t size) {
  
  skilldata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.RoleDatas.skillData)
}
inline std::string* RoleDatas::_internal_mutable_skilldata() {
  
  return skilldata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoleDatas::release_skilldata() {
  // @@protoc_insertion_point(field_release:ss_proto.RoleDatas.skillData)
  return skilldata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoleDatas::set_allocated_skilldata(std::string* skilldata) {
  if (skilldata != nullptr) {
    
  } else {
    
  }
  skilldata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skilldata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.RoleDatas.skillData)
}
inline std::string* RoleDatas::unsafe_arena_release_skilldata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.RoleDatas.skillData)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return skilldata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoleDatas::unsafe_arena_set_allocated_skilldata(
    std::string* skilldata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (skilldata != nullptr) {
    
  } else {
    
  }
  skilldata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      skilldata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.RoleDatas.skillData)
}

// bytes foodData = 8;
inline void RoleDatas::clear_fooddata() {
  fooddata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoleDatas::fooddata() const {
  // @@protoc_insertion_point(field_get:ss_proto.RoleDatas.foodData)
  return _internal_fooddata();
}
inline void RoleDatas::set_fooddata(const std::string& value) {
  _internal_set_fooddata(value);
  // @@protoc_insertion_point(field_set:ss_proto.RoleDatas.foodData)
}
inline std::string* RoleDatas::mutable_fooddata() {
  // @@protoc_insertion_point(field_mutable:ss_proto.RoleDatas.foodData)
  return _internal_mutable_fooddata();
}
inline const std::string& RoleDatas::_internal_fooddata() const {
  return fooddata_.Get();
}
inline void RoleDatas::_internal_set_fooddata(const std::string& value) {
  
  fooddata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoleDatas::set_fooddata(std::string&& value) {
  
  fooddata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.RoleDatas.foodData)
}
inline void RoleDatas::set_fooddata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fooddata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.RoleDatas.foodData)
}
inline void RoleDatas::set_fooddata(const void* value,
    size_t size) {
  
  fooddata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.RoleDatas.foodData)
}
inline std::string* RoleDatas::_internal_mutable_fooddata() {
  
  return fooddata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoleDatas::release_fooddata() {
  // @@protoc_insertion_point(field_release:ss_proto.RoleDatas.foodData)
  return fooddata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoleDatas::set_allocated_fooddata(std::string* fooddata) {
  if (fooddata != nullptr) {
    
  } else {
    
  }
  fooddata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fooddata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.RoleDatas.foodData)
}
inline std::string* RoleDatas::unsafe_arena_release_fooddata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.RoleDatas.foodData)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return fooddata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoleDatas::unsafe_arena_set_allocated_fooddata(
    std::string* fooddata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fooddata != nullptr) {
    
  } else {
    
  }
  fooddata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fooddata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.RoleDatas.foodData)
}

// bytes mailData = 9;
inline void RoleDatas::clear_maildata() {
  maildata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoleDatas::maildata() const {
  // @@protoc_insertion_point(field_get:ss_proto.RoleDatas.mailData)
  return _internal_maildata();
}
inline void RoleDatas::set_maildata(const std::string& value) {
  _internal_set_maildata(value);
  // @@protoc_insertion_point(field_set:ss_proto.RoleDatas.mailData)
}
inline std::string* RoleDatas::mutable_maildata() {
  // @@protoc_insertion_point(field_mutable:ss_proto.RoleDatas.mailData)
  return _internal_mutable_maildata();
}
inline const std::string& RoleDatas::_internal_maildata() const {
  return maildata_.Get();
}
inline void RoleDatas::_internal_set_maildata(const std::string& value) {
  
  maildata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoleDatas::set_maildata(std::string&& value) {
  
  maildata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.RoleDatas.mailData)
}
inline void RoleDatas::set_maildata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  maildata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.RoleDatas.mailData)
}
inline void RoleDatas::set_maildata(const void* value,
    size_t size) {
  
  maildata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.RoleDatas.mailData)
}
inline std::string* RoleDatas::_internal_mutable_maildata() {
  
  return maildata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoleDatas::release_maildata() {
  // @@protoc_insertion_point(field_release:ss_proto.RoleDatas.mailData)
  return maildata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoleDatas::set_allocated_maildata(std::string* maildata) {
  if (maildata != nullptr) {
    
  } else {
    
  }
  maildata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maildata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.RoleDatas.mailData)
}
inline std::string* RoleDatas::unsafe_arena_release_maildata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.RoleDatas.mailData)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return maildata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoleDatas::unsafe_arena_set_allocated_maildata(
    std::string* maildata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (maildata != nullptr) {
    
  } else {
    
  }
  maildata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      maildata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.RoleDatas.mailData)
}

// bytes equipForge = 10;
inline void RoleDatas::clear_equipforge() {
  equipforge_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoleDatas::equipforge() const {
  // @@protoc_insertion_point(field_get:ss_proto.RoleDatas.equipForge)
  return _internal_equipforge();
}
inline void RoleDatas::set_equipforge(const std::string& value) {
  _internal_set_equipforge(value);
  // @@protoc_insertion_point(field_set:ss_proto.RoleDatas.equipForge)
}
inline std::string* RoleDatas::mutable_equipforge() {
  // @@protoc_insertion_point(field_mutable:ss_proto.RoleDatas.equipForge)
  return _internal_mutable_equipforge();
}
inline const std::string& RoleDatas::_internal_equipforge() const {
  return equipforge_.Get();
}
inline void RoleDatas::_internal_set_equipforge(const std::string& value) {
  
  equipforge_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoleDatas::set_equipforge(std::string&& value) {
  
  equipforge_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.RoleDatas.equipForge)
}
inline void RoleDatas::set_equipforge(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  equipforge_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.RoleDatas.equipForge)
}
inline void RoleDatas::set_equipforge(const void* value,
    size_t size) {
  
  equipforge_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.RoleDatas.equipForge)
}
inline std::string* RoleDatas::_internal_mutable_equipforge() {
  
  return equipforge_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoleDatas::release_equipforge() {
  // @@protoc_insertion_point(field_release:ss_proto.RoleDatas.equipForge)
  return equipforge_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoleDatas::set_allocated_equipforge(std::string* equipforge) {
  if (equipforge != nullptr) {
    
  } else {
    
  }
  equipforge_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), equipforge,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.RoleDatas.equipForge)
}
inline std::string* RoleDatas::unsafe_arena_release_equipforge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.RoleDatas.equipForge)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return equipforge_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoleDatas::unsafe_arena_set_allocated_equipforge(
    std::string* equipforge) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (equipforge != nullptr) {
    
  } else {
    
  }
  equipforge_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      equipforge, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.RoleDatas.equipForge)
}

// bytes cycleEvent = 11;
inline void RoleDatas::clear_cycleevent() {
  cycleevent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoleDatas::cycleevent() const {
  // @@protoc_insertion_point(field_get:ss_proto.RoleDatas.cycleEvent)
  return _internal_cycleevent();
}
inline void RoleDatas::set_cycleevent(const std::string& value) {
  _internal_set_cycleevent(value);
  // @@protoc_insertion_point(field_set:ss_proto.RoleDatas.cycleEvent)
}
inline std::string* RoleDatas::mutable_cycleevent() {
  // @@protoc_insertion_point(field_mutable:ss_proto.RoleDatas.cycleEvent)
  return _internal_mutable_cycleevent();
}
inline const std::string& RoleDatas::_internal_cycleevent() const {
  return cycleevent_.Get();
}
inline void RoleDatas::_internal_set_cycleevent(const std::string& value) {
  
  cycleevent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoleDatas::set_cycleevent(std::string&& value) {
  
  cycleevent_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.RoleDatas.cycleEvent)
}
inline void RoleDatas::set_cycleevent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cycleevent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.RoleDatas.cycleEvent)
}
inline void RoleDatas::set_cycleevent(const void* value,
    size_t size) {
  
  cycleevent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.RoleDatas.cycleEvent)
}
inline std::string* RoleDatas::_internal_mutable_cycleevent() {
  
  return cycleevent_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoleDatas::release_cycleevent() {
  // @@protoc_insertion_point(field_release:ss_proto.RoleDatas.cycleEvent)
  return cycleevent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoleDatas::set_allocated_cycleevent(std::string* cycleevent) {
  if (cycleevent != nullptr) {
    
  } else {
    
  }
  cycleevent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cycleevent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.RoleDatas.cycleEvent)
}
inline std::string* RoleDatas::unsafe_arena_release_cycleevent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.RoleDatas.cycleEvent)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cycleevent_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoleDatas::unsafe_arena_set_allocated_cycleevent(
    std::string* cycleevent) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cycleevent != nullptr) {
    
  } else {
    
  }
  cycleevent_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cycleevent, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.RoleDatas.cycleEvent)
}

// bytes npcData = 12;
inline void RoleDatas::clear_npcdata() {
  npcdata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoleDatas::npcdata() const {
  // @@protoc_insertion_point(field_get:ss_proto.RoleDatas.npcData)
  return _internal_npcdata();
}
inline void RoleDatas::set_npcdata(const std::string& value) {
  _internal_set_npcdata(value);
  // @@protoc_insertion_point(field_set:ss_proto.RoleDatas.npcData)
}
inline std::string* RoleDatas::mutable_npcdata() {
  // @@protoc_insertion_point(field_mutable:ss_proto.RoleDatas.npcData)
  return _internal_mutable_npcdata();
}
inline const std::string& RoleDatas::_internal_npcdata() const {
  return npcdata_.Get();
}
inline void RoleDatas::_internal_set_npcdata(const std::string& value) {
  
  npcdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoleDatas::set_npcdata(std::string&& value) {
  
  npcdata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.RoleDatas.npcData)
}
inline void RoleDatas::set_npcdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  npcdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.RoleDatas.npcData)
}
inline void RoleDatas::set_npcdata(const void* value,
    size_t size) {
  
  npcdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.RoleDatas.npcData)
}
inline std::string* RoleDatas::_internal_mutable_npcdata() {
  
  return npcdata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoleDatas::release_npcdata() {
  // @@protoc_insertion_point(field_release:ss_proto.RoleDatas.npcData)
  return npcdata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoleDatas::set_allocated_npcdata(std::string* npcdata) {
  if (npcdata != nullptr) {
    
  } else {
    
  }
  npcdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), npcdata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.RoleDatas.npcData)
}
inline std::string* RoleDatas::unsafe_arena_release_npcdata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.RoleDatas.npcData)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return npcdata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoleDatas::unsafe_arena_set_allocated_npcdata(
    std::string* npcdata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (npcdata != nullptr) {
    
  } else {
    
  }
  npcdata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      npcdata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.RoleDatas.npcData)
}

// bytes interactionData = 13;
inline void RoleDatas::clear_interactiondata() {
  interactiondata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoleDatas::interactiondata() const {
  // @@protoc_insertion_point(field_get:ss_proto.RoleDatas.interactionData)
  return _internal_interactiondata();
}
inline void RoleDatas::set_interactiondata(const std::string& value) {
  _internal_set_interactiondata(value);
  // @@protoc_insertion_point(field_set:ss_proto.RoleDatas.interactionData)
}
inline std::string* RoleDatas::mutable_interactiondata() {
  // @@protoc_insertion_point(field_mutable:ss_proto.RoleDatas.interactionData)
  return _internal_mutable_interactiondata();
}
inline const std::string& RoleDatas::_internal_interactiondata() const {
  return interactiondata_.Get();
}
inline void RoleDatas::_internal_set_interactiondata(const std::string& value) {
  
  interactiondata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoleDatas::set_interactiondata(std::string&& value) {
  
  interactiondata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.RoleDatas.interactionData)
}
inline void RoleDatas::set_interactiondata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  interactiondata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.RoleDatas.interactionData)
}
inline void RoleDatas::set_interactiondata(const void* value,
    size_t size) {
  
  interactiondata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.RoleDatas.interactionData)
}
inline std::string* RoleDatas::_internal_mutable_interactiondata() {
  
  return interactiondata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoleDatas::release_interactiondata() {
  // @@protoc_insertion_point(field_release:ss_proto.RoleDatas.interactionData)
  return interactiondata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoleDatas::set_allocated_interactiondata(std::string* interactiondata) {
  if (interactiondata != nullptr) {
    
  } else {
    
  }
  interactiondata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), interactiondata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.RoleDatas.interactionData)
}
inline std::string* RoleDatas::unsafe_arena_release_interactiondata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.RoleDatas.interactionData)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return interactiondata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoleDatas::unsafe_arena_set_allocated_interactiondata(
    std::string* interactiondata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (interactiondata != nullptr) {
    
  } else {
    
  }
  interactiondata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      interactiondata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.RoleDatas.interactionData)
}

// bytes rollRecord = 14;
inline void RoleDatas::clear_rollrecord() {
  rollrecord_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoleDatas::rollrecord() const {
  // @@protoc_insertion_point(field_get:ss_proto.RoleDatas.rollRecord)
  return _internal_rollrecord();
}
inline void RoleDatas::set_rollrecord(const std::string& value) {
  _internal_set_rollrecord(value);
  // @@protoc_insertion_point(field_set:ss_proto.RoleDatas.rollRecord)
}
inline std::string* RoleDatas::mutable_rollrecord() {
  // @@protoc_insertion_point(field_mutable:ss_proto.RoleDatas.rollRecord)
  return _internal_mutable_rollrecord();
}
inline const std::string& RoleDatas::_internal_rollrecord() const {
  return rollrecord_.Get();
}
inline void RoleDatas::_internal_set_rollrecord(const std::string& value) {
  
  rollrecord_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoleDatas::set_rollrecord(std::string&& value) {
  
  rollrecord_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.RoleDatas.rollRecord)
}
inline void RoleDatas::set_rollrecord(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rollrecord_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.RoleDatas.rollRecord)
}
inline void RoleDatas::set_rollrecord(const void* value,
    size_t size) {
  
  rollrecord_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.RoleDatas.rollRecord)
}
inline std::string* RoleDatas::_internal_mutable_rollrecord() {
  
  return rollrecord_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoleDatas::release_rollrecord() {
  // @@protoc_insertion_point(field_release:ss_proto.RoleDatas.rollRecord)
  return rollrecord_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoleDatas::set_allocated_rollrecord(std::string* rollrecord) {
  if (rollrecord != nullptr) {
    
  } else {
    
  }
  rollrecord_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rollrecord,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.RoleDatas.rollRecord)
}
inline std::string* RoleDatas::unsafe_arena_release_rollrecord() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.RoleDatas.rollRecord)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rollrecord_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoleDatas::unsafe_arena_set_allocated_rollrecord(
    std::string* rollrecord) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rollrecord != nullptr) {
    
  } else {
    
  }
  rollrecord_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rollrecord, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.RoleDatas.rollRecord)
}

// -------------------------------------------------------------------

// LoginGameAck

// int64 userId = 1;
inline void LoginGameAck::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoginGameAck::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoginGameAck::userid() const {
  // @@protoc_insertion_point(field_get:ss_proto.LoginGameAck.userId)
  return _internal_userid();
}
inline void LoginGameAck::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userid_ = value;
}
inline void LoginGameAck::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:ss_proto.LoginGameAck.userId)
}

// int64 roleId = 2;
inline void LoginGameAck::clear_roleid() {
  roleid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoginGameAck::_internal_roleid() const {
  return roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoginGameAck::roleid() const {
  // @@protoc_insertion_point(field_get:ss_proto.LoginGameAck.roleId)
  return _internal_roleid();
}
inline void LoginGameAck::_internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  roleid_ = value;
}
inline void LoginGameAck::set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:ss_proto.LoginGameAck.roleId)
}

// .ss_proto.RoleDatas datas = 3;
inline bool LoginGameAck::_internal_has_datas() const {
  return this != internal_default_instance() && datas_ != nullptr;
}
inline bool LoginGameAck::has_datas() const {
  return _internal_has_datas();
}
inline void LoginGameAck::clear_datas() {
  if (GetArena() == nullptr && datas_ != nullptr) {
    delete datas_;
  }
  datas_ = nullptr;
}
inline const ::ss_proto::RoleDatas& LoginGameAck::_internal_datas() const {
  const ::ss_proto::RoleDatas* p = datas_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::RoleDatas*>(
      &::ss_proto::_RoleDatas_default_instance_);
}
inline const ::ss_proto::RoleDatas& LoginGameAck::datas() const {
  // @@protoc_insertion_point(field_get:ss_proto.LoginGameAck.datas)
  return _internal_datas();
}
inline void LoginGameAck::unsafe_arena_set_allocated_datas(
    ::ss_proto::RoleDatas* datas) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(datas_);
  }
  datas_ = datas;
  if (datas) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.LoginGameAck.datas)
}
inline ::ss_proto::RoleDatas* LoginGameAck::release_datas() {
  auto temp = unsafe_arena_release_datas();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::RoleDatas* LoginGameAck::unsafe_arena_release_datas() {
  // @@protoc_insertion_point(field_release:ss_proto.LoginGameAck.datas)
  
  ::ss_proto::RoleDatas* temp = datas_;
  datas_ = nullptr;
  return temp;
}
inline ::ss_proto::RoleDatas* LoginGameAck::_internal_mutable_datas() {
  
  if (datas_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::RoleDatas>(GetArena());
    datas_ = p;
  }
  return datas_;
}
inline ::ss_proto::RoleDatas* LoginGameAck::mutable_datas() {
  // @@protoc_insertion_point(field_mutable:ss_proto.LoginGameAck.datas)
  return _internal_mutable_datas();
}
inline void LoginGameAck::set_allocated_datas(::ss_proto::RoleDatas* datas) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete datas_;
  }
  if (datas) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(datas);
    if (message_arena != submessage_arena) {
      datas = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datas, submessage_arena);
    }
    
  } else {
    
  }
  datas_ = datas;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.LoginGameAck.datas)
}

// string ptId = 4;
inline void LoginGameAck::clear_ptid() {
  ptid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginGameAck::ptid() const {
  // @@protoc_insertion_point(field_get:ss_proto.LoginGameAck.ptId)
  return _internal_ptid();
}
inline void LoginGameAck::set_ptid(const std::string& value) {
  _internal_set_ptid(value);
  // @@protoc_insertion_point(field_set:ss_proto.LoginGameAck.ptId)
}
inline std::string* LoginGameAck::mutable_ptid() {
  // @@protoc_insertion_point(field_mutable:ss_proto.LoginGameAck.ptId)
  return _internal_mutable_ptid();
}
inline const std::string& LoginGameAck::_internal_ptid() const {
  return ptid_.Get();
}
inline void LoginGameAck::_internal_set_ptid(const std::string& value) {
  
  ptid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginGameAck::set_ptid(std::string&& value) {
  
  ptid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.LoginGameAck.ptId)
}
inline void LoginGameAck::set_ptid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ptid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.LoginGameAck.ptId)
}
inline void LoginGameAck::set_ptid(const char* value,
    size_t size) {
  
  ptid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.LoginGameAck.ptId)
}
inline std::string* LoginGameAck::_internal_mutable_ptid() {
  
  return ptid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginGameAck::release_ptid() {
  // @@protoc_insertion_point(field_release:ss_proto.LoginGameAck.ptId)
  return ptid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginGameAck::set_allocated_ptid(std::string* ptid) {
  if (ptid != nullptr) {
    
  } else {
    
  }
  ptid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ptid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.LoginGameAck.ptId)
}
inline std::string* LoginGameAck::unsafe_arena_release_ptid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.LoginGameAck.ptId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ptid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginGameAck::unsafe_arena_set_allocated_ptid(
    std::string* ptid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ptid != nullptr) {
    
  } else {
    
  }
  ptid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ptid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.LoginGameAck.ptId)
}

// int32 ptType = 5;
inline void LoginGameAck::clear_pttype() {
  pttype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginGameAck::_internal_pttype() const {
  return pttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginGameAck::pttype() const {
  // @@protoc_insertion_point(field_get:ss_proto.LoginGameAck.ptType)
  return _internal_pttype();
}
inline void LoginGameAck::_internal_set_pttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pttype_ = value;
}
inline void LoginGameAck::set_pttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pttype(value);
  // @@protoc_insertion_point(field_set:ss_proto.LoginGameAck.ptType)
}

// -------------------------------------------------------------------

// LogoutGameReq

// int64 userId = 1;
inline void LogoutGameReq::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogoutGameReq::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogoutGameReq::userid() const {
  // @@protoc_insertion_point(field_get:ss_proto.LogoutGameReq.userId)
  return _internal_userid();
}
inline void LogoutGameReq::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userid_ = value;
}
inline void LogoutGameReq::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:ss_proto.LogoutGameReq.userId)
}

// -------------------------------------------------------------------

// LogoutGameAck

// -------------------------------------------------------------------

// CreateRoleReq

// int64 userId = 1;
inline void CreateRoleReq::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateRoleReq::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateRoleReq::userid() const {
  // @@protoc_insertion_point(field_get:ss_proto.CreateRoleReq.userId)
  return _internal_userid();
}
inline void CreateRoleReq::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userid_ = value;
}
inline void CreateRoleReq::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:ss_proto.CreateRoleReq.userId)
}

// string roleName = 2;
inline void CreateRoleReq::clear_rolename() {
  rolename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateRoleReq::rolename() const {
  // @@protoc_insertion_point(field_get:ss_proto.CreateRoleReq.roleName)
  return _internal_rolename();
}
inline void CreateRoleReq::set_rolename(const std::string& value) {
  _internal_set_rolename(value);
  // @@protoc_insertion_point(field_set:ss_proto.CreateRoleReq.roleName)
}
inline std::string* CreateRoleReq::mutable_rolename() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CreateRoleReq.roleName)
  return _internal_mutable_rolename();
}
inline const std::string& CreateRoleReq::_internal_rolename() const {
  return rolename_.Get();
}
inline void CreateRoleReq::_internal_set_rolename(const std::string& value) {
  
  rolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateRoleReq::set_rolename(std::string&& value) {
  
  rolename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.CreateRoleReq.roleName)
}
inline void CreateRoleReq::set_rolename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.CreateRoleReq.roleName)
}
inline void CreateRoleReq::set_rolename(const char* value,
    size_t size) {
  
  rolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.CreateRoleReq.roleName)
}
inline std::string* CreateRoleReq::_internal_mutable_rolename() {
  
  return rolename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateRoleReq::release_rolename() {
  // @@protoc_insertion_point(field_release:ss_proto.CreateRoleReq.roleName)
  return rolename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateRoleReq::set_allocated_rolename(std::string* rolename) {
  if (rolename != nullptr) {
    
  } else {
    
  }
  rolename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rolename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CreateRoleReq.roleName)
}
inline std::string* CreateRoleReq::unsafe_arena_release_rolename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.CreateRoleReq.roleName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rolename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateRoleReq::unsafe_arena_set_allocated_rolename(
    std::string* rolename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rolename != nullptr) {
    
  } else {
    
  }
  rolename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rolename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CreateRoleReq.roleName)
}

// int32 charId = 3;
inline void CreateRoleReq::clear_charid() {
  charid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateRoleReq::_internal_charid() const {
  return charid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateRoleReq::charid() const {
  // @@protoc_insertion_point(field_get:ss_proto.CreateRoleReq.charId)
  return _internal_charid();
}
inline void CreateRoleReq::_internal_set_charid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  charid_ = value;
}
inline void CreateRoleReq::set_charid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_charid(value);
  // @@protoc_insertion_point(field_set:ss_proto.CreateRoleReq.charId)
}

// string face = 4;
inline void CreateRoleReq::clear_face() {
  face_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateRoleReq::face() const {
  // @@protoc_insertion_point(field_get:ss_proto.CreateRoleReq.face)
  return _internal_face();
}
inline void CreateRoleReq::set_face(const std::string& value) {
  _internal_set_face(value);
  // @@protoc_insertion_point(field_set:ss_proto.CreateRoleReq.face)
}
inline std::string* CreateRoleReq::mutable_face() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CreateRoleReq.face)
  return _internal_mutable_face();
}
inline const std::string& CreateRoleReq::_internal_face() const {
  return face_.Get();
}
inline void CreateRoleReq::_internal_set_face(const std::string& value) {
  
  face_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateRoleReq::set_face(std::string&& value) {
  
  face_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.CreateRoleReq.face)
}
inline void CreateRoleReq::set_face(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  face_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.CreateRoleReq.face)
}
inline void CreateRoleReq::set_face(const char* value,
    size_t size) {
  
  face_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.CreateRoleReq.face)
}
inline std::string* CreateRoleReq::_internal_mutable_face() {
  
  return face_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateRoleReq::release_face() {
  // @@protoc_insertion_point(field_release:ss_proto.CreateRoleReq.face)
  return face_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateRoleReq::set_allocated_face(std::string* face) {
  if (face != nullptr) {
    
  } else {
    
  }
  face_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), face,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CreateRoleReq.face)
}
inline std::string* CreateRoleReq::unsafe_arena_release_face() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.CreateRoleReq.face)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return face_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateRoleReq::unsafe_arena_set_allocated_face(
    std::string* face) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (face != nullptr) {
    
  } else {
    
  }
  face_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      face, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CreateRoleReq.face)
}

// -------------------------------------------------------------------

// CreateRoleAck

// int64 roleId = 1;
inline void CreateRoleAck::clear_roleid() {
  roleid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateRoleAck::_internal_roleid() const {
  return roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateRoleAck::roleid() const {
  // @@protoc_insertion_point(field_get:ss_proto.CreateRoleAck.roleId)
  return _internal_roleid();
}
inline void CreateRoleAck::_internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  roleid_ = value;
}
inline void CreateRoleAck::set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:ss_proto.CreateRoleAck.roleId)
}

// .ss_proto.RoleDatas datas = 2;
inline bool CreateRoleAck::_internal_has_datas() const {
  return this != internal_default_instance() && datas_ != nullptr;
}
inline bool CreateRoleAck::has_datas() const {
  return _internal_has_datas();
}
inline void CreateRoleAck::clear_datas() {
  if (GetArena() == nullptr && datas_ != nullptr) {
    delete datas_;
  }
  datas_ = nullptr;
}
inline const ::ss_proto::RoleDatas& CreateRoleAck::_internal_datas() const {
  const ::ss_proto::RoleDatas* p = datas_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::RoleDatas*>(
      &::ss_proto::_RoleDatas_default_instance_);
}
inline const ::ss_proto::RoleDatas& CreateRoleAck::datas() const {
  // @@protoc_insertion_point(field_get:ss_proto.CreateRoleAck.datas)
  return _internal_datas();
}
inline void CreateRoleAck::unsafe_arena_set_allocated_datas(
    ::ss_proto::RoleDatas* datas) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(datas_);
  }
  datas_ = datas;
  if (datas) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CreateRoleAck.datas)
}
inline ::ss_proto::RoleDatas* CreateRoleAck::release_datas() {
  auto temp = unsafe_arena_release_datas();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::RoleDatas* CreateRoleAck::unsafe_arena_release_datas() {
  // @@protoc_insertion_point(field_release:ss_proto.CreateRoleAck.datas)
  
  ::ss_proto::RoleDatas* temp = datas_;
  datas_ = nullptr;
  return temp;
}
inline ::ss_proto::RoleDatas* CreateRoleAck::_internal_mutable_datas() {
  
  if (datas_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::RoleDatas>(GetArena());
    datas_ = p;
  }
  return datas_;
}
inline ::ss_proto::RoleDatas* CreateRoleAck::mutable_datas() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CreateRoleAck.datas)
  return _internal_mutable_datas();
}
inline void CreateRoleAck::set_allocated_datas(::ss_proto::RoleDatas* datas) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete datas_;
  }
  if (datas) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(datas);
    if (message_arena != submessage_arena) {
      datas = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datas, submessage_arena);
    }
    
  } else {
    
  }
  datas_ = datas;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CreateRoleAck.datas)
}

// -------------------------------------------------------------------

// SaveRoleReq

// int64 roleId = 1;
inline void SaveRoleReq::clear_roleid() {
  roleid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SaveRoleReq::_internal_roleid() const {
  return roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SaveRoleReq::roleid() const {
  // @@protoc_insertion_point(field_get:ss_proto.SaveRoleReq.roleId)
  return _internal_roleid();
}
inline void SaveRoleReq::_internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  roleid_ = value;
}
inline void SaveRoleReq::set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:ss_proto.SaveRoleReq.roleId)
}

// .ss_proto.RoleDatas datas = 2;
inline bool SaveRoleReq::_internal_has_datas() const {
  return this != internal_default_instance() && datas_ != nullptr;
}
inline bool SaveRoleReq::has_datas() const {
  return _internal_has_datas();
}
inline void SaveRoleReq::clear_datas() {
  if (GetArena() == nullptr && datas_ != nullptr) {
    delete datas_;
  }
  datas_ = nullptr;
}
inline const ::ss_proto::RoleDatas& SaveRoleReq::_internal_datas() const {
  const ::ss_proto::RoleDatas* p = datas_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::RoleDatas*>(
      &::ss_proto::_RoleDatas_default_instance_);
}
inline const ::ss_proto::RoleDatas& SaveRoleReq::datas() const {
  // @@protoc_insertion_point(field_get:ss_proto.SaveRoleReq.datas)
  return _internal_datas();
}
inline void SaveRoleReq::unsafe_arena_set_allocated_datas(
    ::ss_proto::RoleDatas* datas) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(datas_);
  }
  datas_ = datas;
  if (datas) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.SaveRoleReq.datas)
}
inline ::ss_proto::RoleDatas* SaveRoleReq::release_datas() {
  auto temp = unsafe_arena_release_datas();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::RoleDatas* SaveRoleReq::unsafe_arena_release_datas() {
  // @@protoc_insertion_point(field_release:ss_proto.SaveRoleReq.datas)
  
  ::ss_proto::RoleDatas* temp = datas_;
  datas_ = nullptr;
  return temp;
}
inline ::ss_proto::RoleDatas* SaveRoleReq::_internal_mutable_datas() {
  
  if (datas_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::RoleDatas>(GetArena());
    datas_ = p;
  }
  return datas_;
}
inline ::ss_proto::RoleDatas* SaveRoleReq::mutable_datas() {
  // @@protoc_insertion_point(field_mutable:ss_proto.SaveRoleReq.datas)
  return _internal_mutable_datas();
}
inline void SaveRoleReq::set_allocated_datas(::ss_proto::RoleDatas* datas) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete datas_;
  }
  if (datas) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(datas);
    if (message_arena != submessage_arena) {
      datas = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datas, submessage_arena);
    }
    
  } else {
    
  }
  datas_ = datas;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.SaveRoleReq.datas)
}

// bool sync = 3;
inline void SaveRoleReq::clear_sync() {
  sync_ = false;
}
inline bool SaveRoleReq::_internal_sync() const {
  return sync_;
}
inline bool SaveRoleReq::sync() const {
  // @@protoc_insertion_point(field_get:ss_proto.SaveRoleReq.sync)
  return _internal_sync();
}
inline void SaveRoleReq::_internal_set_sync(bool value) {
  
  sync_ = value;
}
inline void SaveRoleReq::set_sync(bool value) {
  _internal_set_sync(value);
  // @@protoc_insertion_point(field_set:ss_proto.SaveRoleReq.sync)
}

// -------------------------------------------------------------------

// SaveRoleAck

// -------------------------------------------------------------------

// KickUserNtf

// int64 userId = 1;
inline void KickUserNtf::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KickUserNtf::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KickUserNtf::userid() const {
  // @@protoc_insertion_point(field_get:ss_proto.KickUserNtf.userId)
  return _internal_userid();
}
inline void KickUserNtf::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userid_ = value;
}
inline void KickUserNtf::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:ss_proto.KickUserNtf.userId)
}

// string account = 2;
inline void KickUserNtf::clear_account() {
  account_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KickUserNtf::account() const {
  // @@protoc_insertion_point(field_get:ss_proto.KickUserNtf.account)
  return _internal_account();
}
inline void KickUserNtf::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:ss_proto.KickUserNtf.account)
}
inline std::string* KickUserNtf::mutable_account() {
  // @@protoc_insertion_point(field_mutable:ss_proto.KickUserNtf.account)
  return _internal_mutable_account();
}
inline const std::string& KickUserNtf::_internal_account() const {
  return account_.Get();
}
inline void KickUserNtf::_internal_set_account(const std::string& value) {
  
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KickUserNtf::set_account(std::string&& value) {
  
  account_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.KickUserNtf.account)
}
inline void KickUserNtf::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.KickUserNtf.account)
}
inline void KickUserNtf::set_account(const char* value,
    size_t size) {
  
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.KickUserNtf.account)
}
inline std::string* KickUserNtf::_internal_mutable_account() {
  
  return account_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KickUserNtf::release_account() {
  // @@protoc_insertion_point(field_release:ss_proto.KickUserNtf.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KickUserNtf::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.KickUserNtf.account)
}
inline std::string* KickUserNtf::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.KickUserNtf.account)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return account_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KickUserNtf::unsafe_arena_set_allocated_account(
    std::string* account) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (account != nullptr) {
    
  } else {
    
  }
  account_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      account, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.KickUserNtf.account)
}

// string token = 3;
inline void KickUserNtf::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KickUserNtf::token() const {
  // @@protoc_insertion_point(field_get:ss_proto.KickUserNtf.token)
  return _internal_token();
}
inline void KickUserNtf::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ss_proto.KickUserNtf.token)
}
inline std::string* KickUserNtf::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ss_proto.KickUserNtf.token)
  return _internal_mutable_token();
}
inline const std::string& KickUserNtf::_internal_token() const {
  return token_.Get();
}
inline void KickUserNtf::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KickUserNtf::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.KickUserNtf.token)
}
inline void KickUserNtf::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.KickUserNtf.token)
}
inline void KickUserNtf::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.KickUserNtf.token)
}
inline std::string* KickUserNtf::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KickUserNtf::release_token() {
  // @@protoc_insertion_point(field_release:ss_proto.KickUserNtf.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KickUserNtf::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.KickUserNtf.token)
}
inline std::string* KickUserNtf::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.KickUserNtf.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KickUserNtf::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.KickUserNtf.token)
}

// -------------------------------------------------------------------

// SyncRole

// int64 userId = 1;
inline void SyncRole::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncRole::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncRole::userid() const {
  // @@protoc_insertion_point(field_get:ss_proto.SyncRole.userId)
  return _internal_userid();
}
inline void SyncRole::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userid_ = value;
}
inline void SyncRole::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:ss_proto.SyncRole.userId)
}

// int64 roleId = 2;
inline void SyncRole::clear_roleid() {
  roleid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncRole::_internal_roleid() const {
  return roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncRole::roleid() const {
  // @@protoc_insertion_point(field_get:ss_proto.SyncRole.roleId)
  return _internal_roleid();
}
inline void SyncRole::_internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  roleid_ = value;
}
inline void SyncRole::set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:ss_proto.SyncRole.roleId)
}

// int64 svrId = 3;
inline void SyncRole::clear_svrid() {
  svrid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncRole::_internal_svrid() const {
  return svrid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncRole::svrid() const {
  // @@protoc_insertion_point(field_get:ss_proto.SyncRole.svrId)
  return _internal_svrid();
}
inline void SyncRole::_internal_set_svrid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  svrid_ = value;
}
inline void SyncRole::set_svrid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_svrid(value);
  // @@protoc_insertion_point(field_set:ss_proto.SyncRole.svrId)
}

// -------------------------------------------------------------------

// SyncRoleNtf

// repeated .ss_proto.SyncRole online = 1;
inline int SyncRoleNtf::_internal_online_size() const {
  return online_.size();
}
inline int SyncRoleNtf::online_size() const {
  return _internal_online_size();
}
inline void SyncRoleNtf::clear_online() {
  online_.Clear();
}
inline ::ss_proto::SyncRole* SyncRoleNtf::mutable_online(int index) {
  // @@protoc_insertion_point(field_mutable:ss_proto.SyncRoleNtf.online)
  return online_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ss_proto::SyncRole >*
SyncRoleNtf::mutable_online() {
  // @@protoc_insertion_point(field_mutable_list:ss_proto.SyncRoleNtf.online)
  return &online_;
}
inline const ::ss_proto::SyncRole& SyncRoleNtf::_internal_online(int index) const {
  return online_.Get(index);
}
inline const ::ss_proto::SyncRole& SyncRoleNtf::online(int index) const {
  // @@protoc_insertion_point(field_get:ss_proto.SyncRoleNtf.online)
  return _internal_online(index);
}
inline ::ss_proto::SyncRole* SyncRoleNtf::_internal_add_online() {
  return online_.Add();
}
inline ::ss_proto::SyncRole* SyncRoleNtf::add_online() {
  // @@protoc_insertion_point(field_add:ss_proto.SyncRoleNtf.online)
  return _internal_add_online();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ss_proto::SyncRole >&
SyncRoleNtf::online() const {
  // @@protoc_insertion_point(field_list:ss_proto.SyncRoleNtf.online)
  return online_;
}

// repeated int64 offline = 2;
inline int SyncRoleNtf::_internal_offline_size() const {
  return offline_.size();
}
inline int SyncRoleNtf::offline_size() const {
  return _internal_offline_size();
}
inline void SyncRoleNtf::clear_offline() {
  offline_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncRoleNtf::_internal_offline(int index) const {
  return offline_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncRoleNtf::offline(int index) const {
  // @@protoc_insertion_point(field_get:ss_proto.SyncRoleNtf.offline)
  return _internal_offline(index);
}
inline void SyncRoleNtf::set_offline(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  offline_.Set(index, value);
  // @@protoc_insertion_point(field_set:ss_proto.SyncRoleNtf.offline)
}
inline void SyncRoleNtf::_internal_add_offline(::PROTOBUF_NAMESPACE_ID::int64 value) {
  offline_.Add(value);
}
inline void SyncRoleNtf::add_offline(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_offline(value);
  // @@protoc_insertion_point(field_add:ss_proto.SyncRoleNtf.offline)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SyncRoleNtf::_internal_offline() const {
  return offline_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SyncRoleNtf::offline() const {
  // @@protoc_insertion_point(field_list:ss_proto.SyncRoleNtf.offline)
  return _internal_offline();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SyncRoleNtf::_internal_mutable_offline() {
  return &offline_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SyncRoleNtf::mutable_offline() {
  // @@protoc_insertion_point(field_mutable_list:ss_proto.SyncRoleNtf.offline)
  return _internal_mutable_offline();
}

// -------------------------------------------------------------------

// SearchBossReq

// int64 userId = 1;
inline void SearchBossReq::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SearchBossReq::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SearchBossReq::userid() const {
  // @@protoc_insertion_point(field_get:ss_proto.SearchBossReq.userId)
  return _internal_userid();
}
inline void SearchBossReq::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userid_ = value;
}
inline void SearchBossReq::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:ss_proto.SearchBossReq.userId)
}

// int64 svrId = 2;
inline void SearchBossReq::clear_svrid() {
  svrid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SearchBossReq::_internal_svrid() const {
  return svrid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SearchBossReq::svrid() const {
  // @@protoc_insertion_point(field_get:ss_proto.SearchBossReq.svrId)
  return _internal_svrid();
}
inline void SearchBossReq::_internal_set_svrid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  svrid_ = value;
}
inline void SearchBossReq::set_svrid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_svrid(value);
  // @@protoc_insertion_point(field_set:ss_proto.SearchBossReq.svrId)
}

// int32 snakeId = 3;
inline void SearchBossReq::clear_snakeid() {
  snakeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchBossReq::_internal_snakeid() const {
  return snakeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchBossReq::snakeid() const {
  // @@protoc_insertion_point(field_get:ss_proto.SearchBossReq.snakeId)
  return _internal_snakeid();
}
inline void SearchBossReq::_internal_set_snakeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  snakeid_ = value;
}
inline void SearchBossReq::set_snakeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_snakeid(value);
  // @@protoc_insertion_point(field_set:ss_proto.SearchBossReq.snakeId)
}

// bytes team = 4;
inline void SearchBossReq::clear_team() {
  team_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SearchBossReq::team() const {
  // @@protoc_insertion_point(field_get:ss_proto.SearchBossReq.team)
  return _internal_team();
}
inline void SearchBossReq::set_team(const std::string& value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:ss_proto.SearchBossReq.team)
}
inline std::string* SearchBossReq::mutable_team() {
  // @@protoc_insertion_point(field_mutable:ss_proto.SearchBossReq.team)
  return _internal_mutable_team();
}
inline const std::string& SearchBossReq::_internal_team() const {
  return team_.Get();
}
inline void SearchBossReq::_internal_set_team(const std::string& value) {
  
  team_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SearchBossReq::set_team(std::string&& value) {
  
  team_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.SearchBossReq.team)
}
inline void SearchBossReq::set_team(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  team_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.SearchBossReq.team)
}
inline void SearchBossReq::set_team(const void* value,
    size_t size) {
  
  team_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.SearchBossReq.team)
}
inline std::string* SearchBossReq::_internal_mutable_team() {
  
  return team_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SearchBossReq::release_team() {
  // @@protoc_insertion_point(field_release:ss_proto.SearchBossReq.team)
  return team_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchBossReq::set_allocated_team(std::string* team) {
  if (team != nullptr) {
    
  } else {
    
  }
  team_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.SearchBossReq.team)
}
inline std::string* SearchBossReq::unsafe_arena_release_team() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.SearchBossReq.team)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return team_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SearchBossReq::unsafe_arena_set_allocated_team(
    std::string* team) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (team != nullptr) {
    
  } else {
    
  }
  team_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      team, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.SearchBossReq.team)
}

// int32 sceneId = 5;
inline void SearchBossReq::clear_sceneid() {
  sceneid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchBossReq::_internal_sceneid() const {
  return sceneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchBossReq::sceneid() const {
  // @@protoc_insertion_point(field_get:ss_proto.SearchBossReq.sceneId)
  return _internal_sceneid();
}
inline void SearchBossReq::_internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sceneid_ = value;
}
inline void SearchBossReq::set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sceneid(value);
  // @@protoc_insertion_point(field_set:ss_proto.SearchBossReq.sceneId)
}

// int32 cheat = 6;
inline void SearchBossReq::clear_cheat() {
  cheat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchBossReq::_internal_cheat() const {
  return cheat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchBossReq::cheat() const {
  // @@protoc_insertion_point(field_get:ss_proto.SearchBossReq.cheat)
  return _internal_cheat();
}
inline void SearchBossReq::_internal_set_cheat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cheat_ = value;
}
inline void SearchBossReq::set_cheat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cheat(value);
  // @@protoc_insertion_point(field_set:ss_proto.SearchBossReq.cheat)
}

// -------------------------------------------------------------------

// SearchBossAck

// int64 userId = 1;
inline void SearchBossAck::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SearchBossAck::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SearchBossAck::userid() const {
  // @@protoc_insertion_point(field_get:ss_proto.SearchBossAck.userId)
  return _internal_userid();
}
inline void SearchBossAck::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userid_ = value;
}
inline void SearchBossAck::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:ss_proto.SearchBossAck.userId)
}

// bytes startNtf = 2;
inline void SearchBossAck::clear_startntf() {
  startntf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SearchBossAck::startntf() const {
  // @@protoc_insertion_point(field_get:ss_proto.SearchBossAck.startNtf)
  return _internal_startntf();
}
inline void SearchBossAck::set_startntf(const std::string& value) {
  _internal_set_startntf(value);
  // @@protoc_insertion_point(field_set:ss_proto.SearchBossAck.startNtf)
}
inline std::string* SearchBossAck::mutable_startntf() {
  // @@protoc_insertion_point(field_mutable:ss_proto.SearchBossAck.startNtf)
  return _internal_mutable_startntf();
}
inline const std::string& SearchBossAck::_internal_startntf() const {
  return startntf_.Get();
}
inline void SearchBossAck::_internal_set_startntf(const std::string& value) {
  
  startntf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SearchBossAck::set_startntf(std::string&& value) {
  
  startntf_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.SearchBossAck.startNtf)
}
inline void SearchBossAck::set_startntf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  startntf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.SearchBossAck.startNtf)
}
inline void SearchBossAck::set_startntf(const void* value,
    size_t size) {
  
  startntf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.SearchBossAck.startNtf)
}
inline std::string* SearchBossAck::_internal_mutable_startntf() {
  
  return startntf_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SearchBossAck::release_startntf() {
  // @@protoc_insertion_point(field_release:ss_proto.SearchBossAck.startNtf)
  return startntf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchBossAck::set_allocated_startntf(std::string* startntf) {
  if (startntf != nullptr) {
    
  } else {
    
  }
  startntf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), startntf,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.SearchBossAck.startNtf)
}
inline std::string* SearchBossAck::unsafe_arena_release_startntf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.SearchBossAck.startNtf)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return startntf_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SearchBossAck::unsafe_arena_set_allocated_startntf(
    std::string* startntf) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (startntf != nullptr) {
    
  } else {
    
  }
  startntf_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      startntf, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.SearchBossAck.startNtf)
}

// bytes updateNtf = 3;
inline void SearchBossAck::clear_updatentf() {
  updatentf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SearchBossAck::updatentf() const {
  // @@protoc_insertion_point(field_get:ss_proto.SearchBossAck.updateNtf)
  return _internal_updatentf();
}
inline void SearchBossAck::set_updatentf(const std::string& value) {
  _internal_set_updatentf(value);
  // @@protoc_insertion_point(field_set:ss_proto.SearchBossAck.updateNtf)
}
inline std::string* SearchBossAck::mutable_updatentf() {
  // @@protoc_insertion_point(field_mutable:ss_proto.SearchBossAck.updateNtf)
  return _internal_mutable_updatentf();
}
inline const std::string& SearchBossAck::_internal_updatentf() const {
  return updatentf_.Get();
}
inline void SearchBossAck::_internal_set_updatentf(const std::string& value) {
  
  updatentf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SearchBossAck::set_updatentf(std::string&& value) {
  
  updatentf_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.SearchBossAck.updateNtf)
}
inline void SearchBossAck::set_updatentf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  updatentf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.SearchBossAck.updateNtf)
}
inline void SearchBossAck::set_updatentf(const void* value,
    size_t size) {
  
  updatentf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.SearchBossAck.updateNtf)
}
inline std::string* SearchBossAck::_internal_mutable_updatentf() {
  
  return updatentf_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SearchBossAck::release_updatentf() {
  // @@protoc_insertion_point(field_release:ss_proto.SearchBossAck.updateNtf)
  return updatentf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchBossAck::set_allocated_updatentf(std::string* updatentf) {
  if (updatentf != nullptr) {
    
  } else {
    
  }
  updatentf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updatentf,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.SearchBossAck.updateNtf)
}
inline std::string* SearchBossAck::unsafe_arena_release_updatentf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.SearchBossAck.updateNtf)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return updatentf_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SearchBossAck::unsafe_arena_set_allocated_updatentf(
    std::string* updatentf) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (updatentf != nullptr) {
    
  } else {
    
  }
  updatentf_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      updatentf, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.SearchBossAck.updateNtf)
}

// bytes endNtf = 4;
inline void SearchBossAck::clear_endntf() {
  endntf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SearchBossAck::endntf() const {
  // @@protoc_insertion_point(field_get:ss_proto.SearchBossAck.endNtf)
  return _internal_endntf();
}
inline void SearchBossAck::set_endntf(const std::string& value) {
  _internal_set_endntf(value);
  // @@protoc_insertion_point(field_set:ss_proto.SearchBossAck.endNtf)
}
inline std::string* SearchBossAck::mutable_endntf() {
  // @@protoc_insertion_point(field_mutable:ss_proto.SearchBossAck.endNtf)
  return _internal_mutable_endntf();
}
inline const std::string& SearchBossAck::_internal_endntf() const {
  return endntf_.Get();
}
inline void SearchBossAck::_internal_set_endntf(const std::string& value) {
  
  endntf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SearchBossAck::set_endntf(std::string&& value) {
  
  endntf_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.SearchBossAck.endNtf)
}
inline void SearchBossAck::set_endntf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endntf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.SearchBossAck.endNtf)
}
inline void SearchBossAck::set_endntf(const void* value,
    size_t size) {
  
  endntf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.SearchBossAck.endNtf)
}
inline std::string* SearchBossAck::_internal_mutable_endntf() {
  
  return endntf_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SearchBossAck::release_endntf() {
  // @@protoc_insertion_point(field_release:ss_proto.SearchBossAck.endNtf)
  return endntf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchBossAck::set_allocated_endntf(std::string* endntf) {
  if (endntf != nullptr) {
    
  } else {
    
  }
  endntf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endntf,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.SearchBossAck.endNtf)
}
inline std::string* SearchBossAck::unsafe_arena_release_endntf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.SearchBossAck.endNtf)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return endntf_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SearchBossAck::unsafe_arena_set_allocated_endntf(
    std::string* endntf) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (endntf != nullptr) {
    
  } else {
    
  }
  endntf_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      endntf, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.SearchBossAck.endNtf)
}

// -------------------------------------------------------------------

// LogDataReq

// .ss_proto.LogDataType type = 1;
inline void LogDataReq::clear_type() {
  type_ = 0;
}
inline ::ss_proto::LogDataType LogDataReq::_internal_type() const {
  return static_cast< ::ss_proto::LogDataType >(type_);
}
inline ::ss_proto::LogDataType LogDataReq::type() const {
  // @@protoc_insertion_point(field_get:ss_proto.LogDataReq.type)
  return _internal_type();
}
inline void LogDataReq::_internal_set_type(::ss_proto::LogDataType value) {
  
  type_ = value;
}
inline void LogDataReq::set_type(::ss_proto::LogDataType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ss_proto.LogDataReq.type)
}

// bytes data = 2;
inline void LogDataReq::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogDataReq::data() const {
  // @@protoc_insertion_point(field_get:ss_proto.LogDataReq.data)
  return _internal_data();
}
inline void LogDataReq::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ss_proto.LogDataReq.data)
}
inline std::string* LogDataReq::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ss_proto.LogDataReq.data)
  return _internal_mutable_data();
}
inline const std::string& LogDataReq::_internal_data() const {
  return data_.Get();
}
inline void LogDataReq::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogDataReq::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.LogDataReq.data)
}
inline void LogDataReq::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.LogDataReq.data)
}
inline void LogDataReq::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.LogDataReq.data)
}
inline std::string* LogDataReq::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogDataReq::release_data() {
  // @@protoc_insertion_point(field_release:ss_proto.LogDataReq.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogDataReq::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.LogDataReq.data)
}
inline std::string* LogDataReq::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.LogDataReq.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogDataReq::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.LogDataReq.data)
}

// -------------------------------------------------------------------

// LogDataAck

// -------------------------------------------------------------------

// LoadRoleSkillReq

// int64 roleId = 1;
inline void LoadRoleSkillReq::clear_roleid() {
  roleid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoadRoleSkillReq::_internal_roleid() const {
  return roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoadRoleSkillReq::roleid() const {
  // @@protoc_insertion_point(field_get:ss_proto.LoadRoleSkillReq.roleId)
  return _internal_roleid();
}
inline void LoadRoleSkillReq::_internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  roleid_ = value;
}
inline void LoadRoleSkillReq::set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:ss_proto.LoadRoleSkillReq.roleId)
}

// -------------------------------------------------------------------

// LoadRoleSkillAck

// bytes skillData = 1;
inline void LoadRoleSkillAck::clear_skilldata() {
  skilldata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoadRoleSkillAck::skilldata() const {
  // @@protoc_insertion_point(field_get:ss_proto.LoadRoleSkillAck.skillData)
  return _internal_skilldata();
}
inline void LoadRoleSkillAck::set_skilldata(const std::string& value) {
  _internal_set_skilldata(value);
  // @@protoc_insertion_point(field_set:ss_proto.LoadRoleSkillAck.skillData)
}
inline std::string* LoadRoleSkillAck::mutable_skilldata() {
  // @@protoc_insertion_point(field_mutable:ss_proto.LoadRoleSkillAck.skillData)
  return _internal_mutable_skilldata();
}
inline const std::string& LoadRoleSkillAck::_internal_skilldata() const {
  return skilldata_.Get();
}
inline void LoadRoleSkillAck::_internal_set_skilldata(const std::string& value) {
  
  skilldata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoadRoleSkillAck::set_skilldata(std::string&& value) {
  
  skilldata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.LoadRoleSkillAck.skillData)
}
inline void LoadRoleSkillAck::set_skilldata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  skilldata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.LoadRoleSkillAck.skillData)
}
inline void LoadRoleSkillAck::set_skilldata(const void* value,
    size_t size) {
  
  skilldata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.LoadRoleSkillAck.skillData)
}
inline std::string* LoadRoleSkillAck::_internal_mutable_skilldata() {
  
  return skilldata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoadRoleSkillAck::release_skilldata() {
  // @@protoc_insertion_point(field_release:ss_proto.LoadRoleSkillAck.skillData)
  return skilldata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadRoleSkillAck::set_allocated_skilldata(std::string* skilldata) {
  if (skilldata != nullptr) {
    
  } else {
    
  }
  skilldata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skilldata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.LoadRoleSkillAck.skillData)
}
inline std::string* LoadRoleSkillAck::unsafe_arena_release_skilldata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.LoadRoleSkillAck.skillData)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return skilldata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoadRoleSkillAck::unsafe_arena_set_allocated_skilldata(
    std::string* skilldata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (skilldata != nullptr) {
    
  } else {
    
  }
  skilldata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      skilldata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.LoadRoleSkillAck.skillData)
}

// -------------------------------------------------------------------

// LoadRolePackageReq

// int64 roleId = 1;
inline void LoadRolePackageReq::clear_roleid() {
  roleid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoadRolePackageReq::_internal_roleid() const {
  return roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoadRolePackageReq::roleid() const {
  // @@protoc_insertion_point(field_get:ss_proto.LoadRolePackageReq.roleId)
  return _internal_roleid();
}
inline void LoadRolePackageReq::_internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  roleid_ = value;
}
inline void LoadRolePackageReq::set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:ss_proto.LoadRolePackageReq.roleId)
}

// int32 loadItemType = 2;
inline void LoadRolePackageReq::clear_loaditemtype() {
  loaditemtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadRolePackageReq::_internal_loaditemtype() const {
  return loaditemtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadRolePackageReq::loaditemtype() const {
  // @@protoc_insertion_point(field_get:ss_proto.LoadRolePackageReq.loadItemType)
  return _internal_loaditemtype();
}
inline void LoadRolePackageReq::_internal_set_loaditemtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  loaditemtype_ = value;
}
inline void LoadRolePackageReq::set_loaditemtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_loaditemtype(value);
  // @@protoc_insertion_point(field_set:ss_proto.LoadRolePackageReq.loadItemType)
}

// -------------------------------------------------------------------

// LoadRolePackageAck

// bytes itemsData = 1;
inline void LoadRolePackageAck::clear_itemsdata() {
  itemsdata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoadRolePackageAck::itemsdata() const {
  // @@protoc_insertion_point(field_get:ss_proto.LoadRolePackageAck.itemsData)
  return _internal_itemsdata();
}
inline void LoadRolePackageAck::set_itemsdata(const std::string& value) {
  _internal_set_itemsdata(value);
  // @@protoc_insertion_point(field_set:ss_proto.LoadRolePackageAck.itemsData)
}
inline std::string* LoadRolePackageAck::mutable_itemsdata() {
  // @@protoc_insertion_point(field_mutable:ss_proto.LoadRolePackageAck.itemsData)
  return _internal_mutable_itemsdata();
}
inline const std::string& LoadRolePackageAck::_internal_itemsdata() const {
  return itemsdata_.Get();
}
inline void LoadRolePackageAck::_internal_set_itemsdata(const std::string& value) {
  
  itemsdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoadRolePackageAck::set_itemsdata(std::string&& value) {
  
  itemsdata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.LoadRolePackageAck.itemsData)
}
inline void LoadRolePackageAck::set_itemsdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  itemsdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.LoadRolePackageAck.itemsData)
}
inline void LoadRolePackageAck::set_itemsdata(const void* value,
    size_t size) {
  
  itemsdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.LoadRolePackageAck.itemsData)
}
inline std::string* LoadRolePackageAck::_internal_mutable_itemsdata() {
  
  return itemsdata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoadRolePackageAck::release_itemsdata() {
  // @@protoc_insertion_point(field_release:ss_proto.LoadRolePackageAck.itemsData)
  return itemsdata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadRolePackageAck::set_allocated_itemsdata(std::string* itemsdata) {
  if (itemsdata != nullptr) {
    
  } else {
    
  }
  itemsdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), itemsdata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.LoadRolePackageAck.itemsData)
}
inline std::string* LoadRolePackageAck::unsafe_arena_release_itemsdata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.LoadRolePackageAck.itemsData)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return itemsdata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoadRolePackageAck::unsafe_arena_set_allocated_itemsdata(
    std::string* itemsdata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (itemsdata != nullptr) {
    
  } else {
    
  }
  itemsdata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      itemsdata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.LoadRolePackageAck.itemsData)
}

// -------------------------------------------------------------------

// SaveRolePackageReq

// int64 roleId = 1;
inline void SaveRolePackageReq::clear_roleid() {
  roleid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SaveRolePackageReq::_internal_roleid() const {
  return roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SaveRolePackageReq::roleid() const {
  // @@protoc_insertion_point(field_get:ss_proto.SaveRolePackageReq.roleId)
  return _internal_roleid();
}
inline void SaveRolePackageReq::_internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  roleid_ = value;
}
inline void SaveRolePackageReq::set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:ss_proto.SaveRolePackageReq.roleId)
}

// int32 ItemType = 2;
inline void SaveRolePackageReq::clear_itemtype() {
  itemtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SaveRolePackageReq::_internal_itemtype() const {
  return itemtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SaveRolePackageReq::itemtype() const {
  // @@protoc_insertion_point(field_get:ss_proto.SaveRolePackageReq.ItemType)
  return _internal_itemtype();
}
inline void SaveRolePackageReq::_internal_set_itemtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  itemtype_ = value;
}
inline void SaveRolePackageReq::set_itemtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_itemtype(value);
  // @@protoc_insertion_point(field_set:ss_proto.SaveRolePackageReq.ItemType)
}

// bytes itemData = 3;
inline void SaveRolePackageReq::clear_itemdata() {
  itemdata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SaveRolePackageReq::itemdata() const {
  // @@protoc_insertion_point(field_get:ss_proto.SaveRolePackageReq.itemData)
  return _internal_itemdata();
}
inline void SaveRolePackageReq::set_itemdata(const std::string& value) {
  _internal_set_itemdata(value);
  // @@protoc_insertion_point(field_set:ss_proto.SaveRolePackageReq.itemData)
}
inline std::string* SaveRolePackageReq::mutable_itemdata() {
  // @@protoc_insertion_point(field_mutable:ss_proto.SaveRolePackageReq.itemData)
  return _internal_mutable_itemdata();
}
inline const std::string& SaveRolePackageReq::_internal_itemdata() const {
  return itemdata_.Get();
}
inline void SaveRolePackageReq::_internal_set_itemdata(const std::string& value) {
  
  itemdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SaveRolePackageReq::set_itemdata(std::string&& value) {
  
  itemdata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.SaveRolePackageReq.itemData)
}
inline void SaveRolePackageReq::set_itemdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  itemdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.SaveRolePackageReq.itemData)
}
inline void SaveRolePackageReq::set_itemdata(const void* value,
    size_t size) {
  
  itemdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.SaveRolePackageReq.itemData)
}
inline std::string* SaveRolePackageReq::_internal_mutable_itemdata() {
  
  return itemdata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SaveRolePackageReq::release_itemdata() {
  // @@protoc_insertion_point(field_release:ss_proto.SaveRolePackageReq.itemData)
  return itemdata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SaveRolePackageReq::set_allocated_itemdata(std::string* itemdata) {
  if (itemdata != nullptr) {
    
  } else {
    
  }
  itemdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), itemdata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.SaveRolePackageReq.itemData)
}
inline std::string* SaveRolePackageReq::unsafe_arena_release_itemdata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.SaveRolePackageReq.itemData)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return itemdata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SaveRolePackageReq::unsafe_arena_set_allocated_itemdata(
    std::string* itemdata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (itemdata != nullptr) {
    
  } else {
    
  }
  itemdata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      itemdata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.SaveRolePackageReq.itemData)
}

// -------------------------------------------------------------------

// SaveRolePackageAck

// -------------------------------------------------------------------

// FriendAddReq

// int64 srcId = 1;
inline void FriendAddReq::clear_srcid() {
  srcid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendAddReq::_internal_srcid() const {
  return srcid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendAddReq::srcid() const {
  // @@protoc_insertion_point(field_get:ss_proto.FriendAddReq.srcId)
  return _internal_srcid();
}
inline void FriendAddReq::_internal_set_srcid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  srcid_ = value;
}
inline void FriendAddReq::set_srcid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_srcid(value);
  // @@protoc_insertion_point(field_set:ss_proto.FriendAddReq.srcId)
}

// int64 destId = 2;
inline void FriendAddReq::clear_destid() {
  destid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendAddReq::_internal_destid() const {
  return destid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendAddReq::destid() const {
  // @@protoc_insertion_point(field_get:ss_proto.FriendAddReq.destId)
  return _internal_destid();
}
inline void FriendAddReq::_internal_set_destid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  destid_ = value;
}
inline void FriendAddReq::set_destid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_destid(value);
  // @@protoc_insertion_point(field_set:ss_proto.FriendAddReq.destId)
}

// -------------------------------------------------------------------

// FriendAddAck

// -------------------------------------------------------------------

// FriendDelReq

// int64 srcId = 1;
inline void FriendDelReq::clear_srcid() {
  srcid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendDelReq::_internal_srcid() const {
  return srcid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendDelReq::srcid() const {
  // @@protoc_insertion_point(field_get:ss_proto.FriendDelReq.srcId)
  return _internal_srcid();
}
inline void FriendDelReq::_internal_set_srcid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  srcid_ = value;
}
inline void FriendDelReq::set_srcid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_srcid(value);
  // @@protoc_insertion_point(field_set:ss_proto.FriendDelReq.srcId)
}

// int64 destId = 2;
inline void FriendDelReq::clear_destid() {
  destid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendDelReq::_internal_destid() const {
  return destid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendDelReq::destid() const {
  // @@protoc_insertion_point(field_get:ss_proto.FriendDelReq.destId)
  return _internal_destid();
}
inline void FriendDelReq::_internal_set_destid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  destid_ = value;
}
inline void FriendDelReq::set_destid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_destid(value);
  // @@protoc_insertion_point(field_set:ss_proto.FriendDelReq.destId)
}

// -------------------------------------------------------------------

// FriendDelAck

// -------------------------------------------------------------------

// FriendInfo

// int64 roleId = 1;
inline void FriendInfo::clear_roleid() {
  roleid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendInfo::_internal_roleid() const {
  return roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendInfo::roleid() const {
  // @@protoc_insertion_point(field_get:ss_proto.FriendInfo.roleId)
  return _internal_roleid();
}
inline void FriendInfo::_internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  roleid_ = value;
}
inline void FriendInfo::set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:ss_proto.FriendInfo.roleId)
}

// int64 flag = 2;
inline void FriendInfo::clear_flag() {
  flag_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendInfo::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendInfo::flag() const {
  // @@protoc_insertion_point(field_get:ss_proto.FriendInfo.flag)
  return _internal_flag();
}
inline void FriendInfo::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flag_ = value;
}
inline void FriendInfo::set_flag(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:ss_proto.FriendInfo.flag)
}

// -------------------------------------------------------------------

// FriendListReq

// int64 srcId = 1;
inline void FriendListReq::clear_srcid() {
  srcid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendListReq::_internal_srcid() const {
  return srcid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendListReq::srcid() const {
  // @@protoc_insertion_point(field_get:ss_proto.FriendListReq.srcId)
  return _internal_srcid();
}
inline void FriendListReq::_internal_set_srcid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  srcid_ = value;
}
inline void FriendListReq::set_srcid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_srcid(value);
  // @@protoc_insertion_point(field_set:ss_proto.FriendListReq.srcId)
}

// -------------------------------------------------------------------

// FriendListAck

// repeated .ss_proto.FriendInfo friends = 1;
inline int FriendListAck::_internal_friends_size() const {
  return friends_.size();
}
inline int FriendListAck::friends_size() const {
  return _internal_friends_size();
}
inline void FriendListAck::clear_friends() {
  friends_.Clear();
}
inline ::ss_proto::FriendInfo* FriendListAck::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:ss_proto.FriendListAck.friends)
  return friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ss_proto::FriendInfo >*
FriendListAck::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:ss_proto.FriendListAck.friends)
  return &friends_;
}
inline const ::ss_proto::FriendInfo& FriendListAck::_internal_friends(int index) const {
  return friends_.Get(index);
}
inline const ::ss_proto::FriendInfo& FriendListAck::friends(int index) const {
  // @@protoc_insertion_point(field_get:ss_proto.FriendListAck.friends)
  return _internal_friends(index);
}
inline ::ss_proto::FriendInfo* FriendListAck::_internal_add_friends() {
  return friends_.Add();
}
inline ::ss_proto::FriendInfo* FriendListAck::add_friends() {
  // @@protoc_insertion_point(field_add:ss_proto.FriendListAck.friends)
  return _internal_add_friends();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ss_proto::FriendInfo >&
FriendListAck::friends() const {
  // @@protoc_insertion_point(field_list:ss_proto.FriendListAck.friends)
  return friends_;
}

// -------------------------------------------------------------------

// RoleBoardReq

// repeated int64 roleIds = 1;
inline int RoleBoardReq::_internal_roleids_size() const {
  return roleids_.size();
}
inline int RoleBoardReq::roleids_size() const {
  return _internal_roleids_size();
}
inline void RoleBoardReq::clear_roleids() {
  roleids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoleBoardReq::_internal_roleids(int index) const {
  return roleids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoleBoardReq::roleids(int index) const {
  // @@protoc_insertion_point(field_get:ss_proto.RoleBoardReq.roleIds)
  return _internal_roleids(index);
}
inline void RoleBoardReq::set_roleids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  roleids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ss_proto.RoleBoardReq.roleIds)
}
inline void RoleBoardReq::_internal_add_roleids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  roleids_.Add(value);
}
inline void RoleBoardReq::add_roleids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_roleids(value);
  // @@protoc_insertion_point(field_add:ss_proto.RoleBoardReq.roleIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
RoleBoardReq::_internal_roleids() const {
  return roleids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
RoleBoardReq::roleids() const {
  // @@protoc_insertion_point(field_list:ss_proto.RoleBoardReq.roleIds)
  return _internal_roleids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
RoleBoardReq::_internal_mutable_roleids() {
  return &roleids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
RoleBoardReq::mutable_roleids() {
  // @@protoc_insertion_point(field_mutable_list:ss_proto.RoleBoardReq.roleIds)
  return _internal_mutable_roleids();
}

// bool small = 2;
inline void RoleBoardReq::clear_small() {
  small_ = false;
}
inline bool RoleBoardReq::_internal_small() const {
  return small_;
}
inline bool RoleBoardReq::small() const {
  // @@protoc_insertion_point(field_get:ss_proto.RoleBoardReq.small)
  return _internal_small();
}
inline void RoleBoardReq::_internal_set_small(bool value) {
  
  small_ = value;
}
inline void RoleBoardReq::set_small(bool value) {
  _internal_set_small(value);
  // @@protoc_insertion_point(field_set:ss_proto.RoleBoardReq.small)
}

// -------------------------------------------------------------------

// RoleBoardAck

// bytes datas = 1;
inline void RoleBoardAck::clear_datas() {
  datas_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoleBoardAck::datas() const {
  // @@protoc_insertion_point(field_get:ss_proto.RoleBoardAck.datas)
  return _internal_datas();
}
inline void RoleBoardAck::set_datas(const std::string& value) {
  _internal_set_datas(value);
  // @@protoc_insertion_point(field_set:ss_proto.RoleBoardAck.datas)
}
inline std::string* RoleBoardAck::mutable_datas() {
  // @@protoc_insertion_point(field_mutable:ss_proto.RoleBoardAck.datas)
  return _internal_mutable_datas();
}
inline const std::string& RoleBoardAck::_internal_datas() const {
  return datas_.Get();
}
inline void RoleBoardAck::_internal_set_datas(const std::string& value) {
  
  datas_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoleBoardAck::set_datas(std::string&& value) {
  
  datas_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.RoleBoardAck.datas)
}
inline void RoleBoardAck::set_datas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datas_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.RoleBoardAck.datas)
}
inline void RoleBoardAck::set_datas(const void* value,
    size_t size) {
  
  datas_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.RoleBoardAck.datas)
}
inline std::string* RoleBoardAck::_internal_mutable_datas() {
  
  return datas_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoleBoardAck::release_datas() {
  // @@protoc_insertion_point(field_release:ss_proto.RoleBoardAck.datas)
  return datas_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoleBoardAck::set_allocated_datas(std::string* datas) {
  if (datas != nullptr) {
    
  } else {
    
  }
  datas_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datas,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.RoleBoardAck.datas)
}
inline std::string* RoleBoardAck::unsafe_arena_release_datas() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.RoleBoardAck.datas)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return datas_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoleBoardAck::unsafe_arena_set_allocated_datas(
    std::string* datas) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (datas != nullptr) {
    
  } else {
    
  }
  datas_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      datas, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.RoleBoardAck.datas)
}

// -------------------------------------------------------------------

// RoleMailReq

// int32 lastMailId = 1;
inline void RoleMailReq::clear_lastmailid() {
  lastmailid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleMailReq::_internal_lastmailid() const {
  return lastmailid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleMailReq::lastmailid() const {
  // @@protoc_insertion_point(field_get:ss_proto.RoleMailReq.lastMailId)
  return _internal_lastmailid();
}
inline void RoleMailReq::_internal_set_lastmailid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lastmailid_ = value;
}
inline void RoleMailReq::set_lastmailid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lastmailid(value);
  // @@protoc_insertion_point(field_set:ss_proto.RoleMailReq.lastMailId)
}

// int64 roleId = 2;
inline void RoleMailReq::clear_roleid() {
  roleid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoleMailReq::_internal_roleid() const {
  return roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoleMailReq::roleid() const {
  // @@protoc_insertion_point(field_get:ss_proto.RoleMailReq.roleId)
  return _internal_roleid();
}
inline void RoleMailReq::_internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  roleid_ = value;
}
inline void RoleMailReq::set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:ss_proto.RoleMailReq.roleId)
}

// int64 createTime = 3;
inline void RoleMailReq::clear_createtime() {
  createtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoleMailReq::_internal_createtime() const {
  return createtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoleMailReq::createtime() const {
  // @@protoc_insertion_point(field_get:ss_proto.RoleMailReq.createTime)
  return _internal_createtime();
}
inline void RoleMailReq::_internal_set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  createtime_ = value;
}
inline void RoleMailReq::set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:ss_proto.RoleMailReq.createTime)
}

// int32 count = 4;
inline void RoleMailReq::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleMailReq::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleMailReq::count() const {
  // @@protoc_insertion_point(field_get:ss_proto.RoleMailReq.count)
  return _internal_count();
}
inline void RoleMailReq::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void RoleMailReq::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:ss_proto.RoleMailReq.count)
}

// -------------------------------------------------------------------

// RoleMailAck

// bytes datas = 1;
inline void RoleMailAck::clear_datas() {
  datas_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoleMailAck::datas() const {
  // @@protoc_insertion_point(field_get:ss_proto.RoleMailAck.datas)
  return _internal_datas();
}
inline void RoleMailAck::set_datas(const std::string& value) {
  _internal_set_datas(value);
  // @@protoc_insertion_point(field_set:ss_proto.RoleMailAck.datas)
}
inline std::string* RoleMailAck::mutable_datas() {
  // @@protoc_insertion_point(field_mutable:ss_proto.RoleMailAck.datas)
  return _internal_mutable_datas();
}
inline const std::string& RoleMailAck::_internal_datas() const {
  return datas_.Get();
}
inline void RoleMailAck::_internal_set_datas(const std::string& value) {
  
  datas_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoleMailAck::set_datas(std::string&& value) {
  
  datas_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.RoleMailAck.datas)
}
inline void RoleMailAck::set_datas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datas_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.RoleMailAck.datas)
}
inline void RoleMailAck::set_datas(const void* value,
    size_t size) {
  
  datas_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.RoleMailAck.datas)
}
inline std::string* RoleMailAck::_internal_mutable_datas() {
  
  return datas_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoleMailAck::release_datas() {
  // @@protoc_insertion_point(field_release:ss_proto.RoleMailAck.datas)
  return datas_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoleMailAck::set_allocated_datas(std::string* datas) {
  if (datas != nullptr) {
    
  } else {
    
  }
  datas_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datas,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.RoleMailAck.datas)
}
inline std::string* RoleMailAck::unsafe_arena_release_datas() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.RoleMailAck.datas)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return datas_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoleMailAck::unsafe_arena_set_allocated_datas(
    std::string* datas) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (datas != nullptr) {
    
  } else {
    
  }
  datas_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      datas, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.RoleMailAck.datas)
}

// int32 lastMailId = 2;
inline void RoleMailAck::clear_lastmailid() {
  lastmailid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleMailAck::_internal_lastmailid() const {
  return lastmailid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleMailAck::lastmailid() const {
  // @@protoc_insertion_point(field_get:ss_proto.RoleMailAck.lastMailId)
  return _internal_lastmailid();
}
inline void RoleMailAck::_internal_set_lastmailid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lastmailid_ = value;
}
inline void RoleMailAck::set_lastmailid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lastmailid(value);
  // @@protoc_insertion_point(field_set:ss_proto.RoleMailAck.lastMailId)
}

// -------------------------------------------------------------------

// TopNUpdateReq

// int64 worldId = 1;
inline void TopNUpdateReq::clear_worldid() {
  worldid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TopNUpdateReq::_internal_worldid() const {
  return worldid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TopNUpdateReq::worldid() const {
  // @@protoc_insertion_point(field_get:ss_proto.TopNUpdateReq.worldId)
  return _internal_worldid();
}
inline void TopNUpdateReq::_internal_set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  worldid_ = value;
}
inline void TopNUpdateReq::set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_worldid(value);
  // @@protoc_insertion_point(field_set:ss_proto.TopNUpdateReq.worldId)
}

// int32 tnt = 2;
inline void TopNUpdateReq::clear_tnt() {
  tnt_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TopNUpdateReq::_internal_tnt() const {
  return tnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TopNUpdateReq::tnt() const {
  // @@protoc_insertion_point(field_get:ss_proto.TopNUpdateReq.tnt)
  return _internal_tnt();
}
inline void TopNUpdateReq::_internal_set_tnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tnt_ = value;
}
inline void TopNUpdateReq::set_tnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tnt(value);
  // @@protoc_insertion_point(field_set:ss_proto.TopNUpdateReq.tnt)
}

// bytes data = 3;
inline void TopNUpdateReq::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TopNUpdateReq::data() const {
  // @@protoc_insertion_point(field_get:ss_proto.TopNUpdateReq.data)
  return _internal_data();
}
inline void TopNUpdateReq::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ss_proto.TopNUpdateReq.data)
}
inline std::string* TopNUpdateReq::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ss_proto.TopNUpdateReq.data)
  return _internal_mutable_data();
}
inline const std::string& TopNUpdateReq::_internal_data() const {
  return data_.Get();
}
inline void TopNUpdateReq::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TopNUpdateReq::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.TopNUpdateReq.data)
}
inline void TopNUpdateReq::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.TopNUpdateReq.data)
}
inline void TopNUpdateReq::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.TopNUpdateReq.data)
}
inline std::string* TopNUpdateReq::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TopNUpdateReq::release_data() {
  // @@protoc_insertion_point(field_release:ss_proto.TopNUpdateReq.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TopNUpdateReq::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.TopNUpdateReq.data)
}
inline std::string* TopNUpdateReq::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.TopNUpdateReq.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TopNUpdateReq::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.TopNUpdateReq.data)
}

// -------------------------------------------------------------------

// TopNUpdateAck

// -------------------------------------------------------------------

// TopNListReq

// int64 worldId = 1;
inline void TopNListReq::clear_worldid() {
  worldid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TopNListReq::_internal_worldid() const {
  return worldid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TopNListReq::worldid() const {
  // @@protoc_insertion_point(field_get:ss_proto.TopNListReq.worldId)
  return _internal_worldid();
}
inline void TopNListReq::_internal_set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  worldid_ = value;
}
inline void TopNListReq::set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_worldid(value);
  // @@protoc_insertion_point(field_set:ss_proto.TopNListReq.worldId)
}

// int32 tnt = 2;
inline void TopNListReq::clear_tnt() {
  tnt_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TopNListReq::_internal_tnt() const {
  return tnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TopNListReq::tnt() const {
  // @@protoc_insertion_point(field_get:ss_proto.TopNListReq.tnt)
  return _internal_tnt();
}
inline void TopNListReq::_internal_set_tnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tnt_ = value;
}
inline void TopNListReq::set_tnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tnt(value);
  // @@protoc_insertion_point(field_set:ss_proto.TopNListReq.tnt)
}

// bytes data = 3;
inline void TopNListReq::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TopNListReq::data() const {
  // @@protoc_insertion_point(field_get:ss_proto.TopNListReq.data)
  return _internal_data();
}
inline void TopNListReq::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ss_proto.TopNListReq.data)
}
inline std::string* TopNListReq::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ss_proto.TopNListReq.data)
  return _internal_mutable_data();
}
inline const std::string& TopNListReq::_internal_data() const {
  return data_.Get();
}
inline void TopNListReq::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TopNListReq::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.TopNListReq.data)
}
inline void TopNListReq::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.TopNListReq.data)
}
inline void TopNListReq::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.TopNListReq.data)
}
inline std::string* TopNListReq::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TopNListReq::release_data() {
  // @@protoc_insertion_point(field_release:ss_proto.TopNListReq.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TopNListReq::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.TopNListReq.data)
}
inline std::string* TopNListReq::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.TopNListReq.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TopNListReq::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.TopNListReq.data)
}

// -------------------------------------------------------------------

// TopNListAck

// bytes topn = 1;
inline void TopNListAck::clear_topn() {
  topn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TopNListAck::topn() const {
  // @@protoc_insertion_point(field_get:ss_proto.TopNListAck.topn)
  return _internal_topn();
}
inline void TopNListAck::set_topn(const std::string& value) {
  _internal_set_topn(value);
  // @@protoc_insertion_point(field_set:ss_proto.TopNListAck.topn)
}
inline std::string* TopNListAck::mutable_topn() {
  // @@protoc_insertion_point(field_mutable:ss_proto.TopNListAck.topn)
  return _internal_mutable_topn();
}
inline const std::string& TopNListAck::_internal_topn() const {
  return topn_.Get();
}
inline void TopNListAck::_internal_set_topn(const std::string& value) {
  
  topn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TopNListAck::set_topn(std::string&& value) {
  
  topn_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.TopNListAck.topn)
}
inline void TopNListAck::set_topn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.TopNListAck.topn)
}
inline void TopNListAck::set_topn(const void* value,
    size_t size) {
  
  topn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.TopNListAck.topn)
}
inline std::string* TopNListAck::_internal_mutable_topn() {
  
  return topn_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TopNListAck::release_topn() {
  // @@protoc_insertion_point(field_release:ss_proto.TopNListAck.topn)
  return topn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TopNListAck::set_allocated_topn(std::string* topn) {
  if (topn != nullptr) {
    
  } else {
    
  }
  topn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.TopNListAck.topn)
}
inline std::string* TopNListAck::unsafe_arena_release_topn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.TopNListAck.topn)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return topn_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TopNListAck::unsafe_arena_set_allocated_topn(
    std::string* topn) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (topn != nullptr) {
    
  } else {
    
  }
  topn_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      topn, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.TopNListAck.topn)
}

// -------------------------------------------------------------------

// SceneUpdateReq

// int64 worldId = 1;
inline void SceneUpdateReq::clear_worldid() {
  worldid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneUpdateReq::_internal_worldid() const {
  return worldid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneUpdateReq::worldid() const {
  // @@protoc_insertion_point(field_get:ss_proto.SceneUpdateReq.worldId)
  return _internal_worldid();
}
inline void SceneUpdateReq::_internal_set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  worldid_ = value;
}
inline void SceneUpdateReq::set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_worldid(value);
  // @@protoc_insertion_point(field_set:ss_proto.SceneUpdateReq.worldId)
}

// int32 olevel = 2;
inline void SceneUpdateReq::clear_olevel() {
  olevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneUpdateReq::_internal_olevel() const {
  return olevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneUpdateReq::olevel() const {
  // @@protoc_insertion_point(field_get:ss_proto.SceneUpdateReq.olevel)
  return _internal_olevel();
}
inline void SceneUpdateReq::_internal_set_olevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  olevel_ = value;
}
inline void SceneUpdateReq::set_olevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_olevel(value);
  // @@protoc_insertion_point(field_set:ss_proto.SceneUpdateReq.olevel)
}

// int32 nlevel = 3;
inline void SceneUpdateReq::clear_nlevel() {
  nlevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneUpdateReq::_internal_nlevel() const {
  return nlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneUpdateReq::nlevel() const {
  // @@protoc_insertion_point(field_get:ss_proto.SceneUpdateReq.nlevel)
  return _internal_nlevel();
}
inline void SceneUpdateReq::_internal_set_nlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nlevel_ = value;
}
inline void SceneUpdateReq::set_nlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nlevel(value);
  // @@protoc_insertion_point(field_set:ss_proto.SceneUpdateReq.nlevel)
}

// bytes topn = 4;
inline void SceneUpdateReq::clear_topn() {
  topn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneUpdateReq::topn() const {
  // @@protoc_insertion_point(field_get:ss_proto.SceneUpdateReq.topn)
  return _internal_topn();
}
inline void SceneUpdateReq::set_topn(const std::string& value) {
  _internal_set_topn(value);
  // @@protoc_insertion_point(field_set:ss_proto.SceneUpdateReq.topn)
}
inline std::string* SceneUpdateReq::mutable_topn() {
  // @@protoc_insertion_point(field_mutable:ss_proto.SceneUpdateReq.topn)
  return _internal_mutable_topn();
}
inline const std::string& SceneUpdateReq::_internal_topn() const {
  return topn_.Get();
}
inline void SceneUpdateReq::_internal_set_topn(const std::string& value) {
  
  topn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneUpdateReq::set_topn(std::string&& value) {
  
  topn_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.SceneUpdateReq.topn)
}
inline void SceneUpdateReq::set_topn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.SceneUpdateReq.topn)
}
inline void SceneUpdateReq::set_topn(const void* value,
    size_t size) {
  
  topn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.SceneUpdateReq.topn)
}
inline std::string* SceneUpdateReq::_internal_mutable_topn() {
  
  return topn_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneUpdateReq::release_topn() {
  // @@protoc_insertion_point(field_release:ss_proto.SceneUpdateReq.topn)
  return topn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneUpdateReq::set_allocated_topn(std::string* topn) {
  if (topn != nullptr) {
    
  } else {
    
  }
  topn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.SceneUpdateReq.topn)
}
inline std::string* SceneUpdateReq::unsafe_arena_release_topn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.SceneUpdateReq.topn)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return topn_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SceneUpdateReq::unsafe_arena_set_allocated_topn(
    std::string* topn) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (topn != nullptr) {
    
  } else {
    
  }
  topn_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      topn, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.SceneUpdateReq.topn)
}

// -------------------------------------------------------------------

// SceneUpdateAck

// -------------------------------------------------------------------

// SceneProcReq

// int64 worldId = 1;
inline void SceneProcReq::clear_worldid() {
  worldid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneProcReq::_internal_worldid() const {
  return worldid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneProcReq::worldid() const {
  // @@protoc_insertion_point(field_get:ss_proto.SceneProcReq.worldId)
  return _internal_worldid();
}
inline void SceneProcReq::_internal_set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  worldid_ = value;
}
inline void SceneProcReq::set_worldid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_worldid(value);
  // @@protoc_insertion_point(field_set:ss_proto.SceneProcReq.worldId)
}

// int32 level = 2;
inline void SceneProcReq::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneProcReq::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneProcReq::level() const {
  // @@protoc_insertion_point(field_get:ss_proto.SceneProcReq.level)
  return _internal_level();
}
inline void SceneProcReq::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void SceneProcReq::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:ss_proto.SceneProcReq.level)
}

// -------------------------------------------------------------------

// SceneProcAck

// float proc = 1;
inline void SceneProcAck::clear_proc() {
  proc_ = 0;
}
inline float SceneProcAck::_internal_proc() const {
  return proc_;
}
inline float SceneProcAck::proc() const {
  // @@protoc_insertion_point(field_get:ss_proto.SceneProcAck.proc)
  return _internal_proc();
}
inline void SceneProcAck::_internal_set_proc(float value) {
  
  proc_ = value;
}
inline void SceneProcAck::set_proc(float value) {
  _internal_set_proc(value);
  // @@protoc_insertion_point(field_set:ss_proto.SceneProcAck.proc)
}

// bytes topn = 2;
inline void SceneProcAck::clear_topn() {
  topn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneProcAck::topn() const {
  // @@protoc_insertion_point(field_get:ss_proto.SceneProcAck.topn)
  return _internal_topn();
}
inline void SceneProcAck::set_topn(const std::string& value) {
  _internal_set_topn(value);
  // @@protoc_insertion_point(field_set:ss_proto.SceneProcAck.topn)
}
inline std::string* SceneProcAck::mutable_topn() {
  // @@protoc_insertion_point(field_mutable:ss_proto.SceneProcAck.topn)
  return _internal_mutable_topn();
}
inline const std::string& SceneProcAck::_internal_topn() const {
  return topn_.Get();
}
inline void SceneProcAck::_internal_set_topn(const std::string& value) {
  
  topn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneProcAck::set_topn(std::string&& value) {
  
  topn_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.SceneProcAck.topn)
}
inline void SceneProcAck::set_topn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.SceneProcAck.topn)
}
inline void SceneProcAck::set_topn(const void* value,
    size_t size) {
  
  topn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.SceneProcAck.topn)
}
inline std::string* SceneProcAck::_internal_mutable_topn() {
  
  return topn_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneProcAck::release_topn() {
  // @@protoc_insertion_point(field_release:ss_proto.SceneProcAck.topn)
  return topn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneProcAck::set_allocated_topn(std::string* topn) {
  if (topn != nullptr) {
    
  } else {
    
  }
  topn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.SceneProcAck.topn)
}
inline std::string* SceneProcAck::unsafe_arena_release_topn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.SceneProcAck.topn)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return topn_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SceneProcAck::unsafe_arena_set_allocated_topn(
    std::string* topn) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (topn != nullptr) {
    
  } else {
    
  }
  topn_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      topn, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.SceneProcAck.topn)
}

// -------------------------------------------------------------------

// LoginSwtichReq

// string ptId = 1;
inline void LoginSwtichReq::clear_ptid() {
  ptid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginSwtichReq::ptid() const {
  // @@protoc_insertion_point(field_get:ss_proto.LoginSwtichReq.ptId)
  return _internal_ptid();
}
inline void LoginSwtichReq::set_ptid(const std::string& value) {
  _internal_set_ptid(value);
  // @@protoc_insertion_point(field_set:ss_proto.LoginSwtichReq.ptId)
}
inline std::string* LoginSwtichReq::mutable_ptid() {
  // @@protoc_insertion_point(field_mutable:ss_proto.LoginSwtichReq.ptId)
  return _internal_mutable_ptid();
}
inline const std::string& LoginSwtichReq::_internal_ptid() const {
  return ptid_.Get();
}
inline void LoginSwtichReq::_internal_set_ptid(const std::string& value) {
  
  ptid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginSwtichReq::set_ptid(std::string&& value) {
  
  ptid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.LoginSwtichReq.ptId)
}
inline void LoginSwtichReq::set_ptid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ptid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.LoginSwtichReq.ptId)
}
inline void LoginSwtichReq::set_ptid(const char* value,
    size_t size) {
  
  ptid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.LoginSwtichReq.ptId)
}
inline std::string* LoginSwtichReq::_internal_mutable_ptid() {
  
  return ptid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginSwtichReq::release_ptid() {
  // @@protoc_insertion_point(field_release:ss_proto.LoginSwtichReq.ptId)
  return ptid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginSwtichReq::set_allocated_ptid(std::string* ptid) {
  if (ptid != nullptr) {
    
  } else {
    
  }
  ptid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ptid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.LoginSwtichReq.ptId)
}
inline std::string* LoginSwtichReq::unsafe_arena_release_ptid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.LoginSwtichReq.ptId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ptid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginSwtichReq::unsafe_arena_set_allocated_ptid(
    std::string* ptid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ptid != nullptr) {
    
  } else {
    
  }
  ptid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ptid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.LoginSwtichReq.ptId)
}

// int32 ptType = 2;
inline void LoginSwtichReq::clear_pttype() {
  pttype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginSwtichReq::_internal_pttype() const {
  return pttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginSwtichReq::pttype() const {
  // @@protoc_insertion_point(field_get:ss_proto.LoginSwtichReq.ptType)
  return _internal_pttype();
}
inline void LoginSwtichReq::_internal_set_pttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pttype_ = value;
}
inline void LoginSwtichReq::set_pttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pttype(value);
  // @@protoc_insertion_point(field_set:ss_proto.LoginSwtichReq.ptType)
}

// -------------------------------------------------------------------

// LoginSwtichAck

// string token = 1;
inline void LoginSwtichAck::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginSwtichAck::token() const {
  // @@protoc_insertion_point(field_get:ss_proto.LoginSwtichAck.token)
  return _internal_token();
}
inline void LoginSwtichAck::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ss_proto.LoginSwtichAck.token)
}
inline std::string* LoginSwtichAck::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ss_proto.LoginSwtichAck.token)
  return _internal_mutable_token();
}
inline const std::string& LoginSwtichAck::_internal_token() const {
  return token_.Get();
}
inline void LoginSwtichAck::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginSwtichAck::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.LoginSwtichAck.token)
}
inline void LoginSwtichAck::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.LoginSwtichAck.token)
}
inline void LoginSwtichAck::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.LoginSwtichAck.token)
}
inline std::string* LoginSwtichAck::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginSwtichAck::release_token() {
  // @@protoc_insertion_point(field_release:ss_proto.LoginSwtichAck.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginSwtichAck::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.LoginSwtichAck.token)
}
inline std::string* LoginSwtichAck::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.LoginSwtichAck.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginSwtichAck::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.LoginSwtichAck.token)
}

// -------------------------------------------------------------------

// LoadInteractionReq

// int64 roleId = 1;
inline void LoadInteractionReq::clear_roleid() {
  roleid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoadInteractionReq::_internal_roleid() const {
  return roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoadInteractionReq::roleid() const {
  // @@protoc_insertion_point(field_get:ss_proto.LoadInteractionReq.roleId)
  return _internal_roleid();
}
inline void LoadInteractionReq::_internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  roleid_ = value;
}
inline void LoadInteractionReq::set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:ss_proto.LoadInteractionReq.roleId)
}

// -------------------------------------------------------------------

// LoadInteractionAck

// bytes interactionData = 1;
inline void LoadInteractionAck::clear_interactiondata() {
  interactiondata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoadInteractionAck::interactiondata() const {
  // @@protoc_insertion_point(field_get:ss_proto.LoadInteractionAck.interactionData)
  return _internal_interactiondata();
}
inline void LoadInteractionAck::set_interactiondata(const std::string& value) {
  _internal_set_interactiondata(value);
  // @@protoc_insertion_point(field_set:ss_proto.LoadInteractionAck.interactionData)
}
inline std::string* LoadInteractionAck::mutable_interactiondata() {
  // @@protoc_insertion_point(field_mutable:ss_proto.LoadInteractionAck.interactionData)
  return _internal_mutable_interactiondata();
}
inline const std::string& LoadInteractionAck::_internal_interactiondata() const {
  return interactiondata_.Get();
}
inline void LoadInteractionAck::_internal_set_interactiondata(const std::string& value) {
  
  interactiondata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoadInteractionAck::set_interactiondata(std::string&& value) {
  
  interactiondata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ss_proto.LoadInteractionAck.interactionData)
}
inline void LoadInteractionAck::set_interactiondata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  interactiondata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ss_proto.LoadInteractionAck.interactionData)
}
inline void LoadInteractionAck::set_interactiondata(const void* value,
    size_t size) {
  
  interactiondata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ss_proto.LoadInteractionAck.interactionData)
}
inline std::string* LoadInteractionAck::_internal_mutable_interactiondata() {
  
  return interactiondata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoadInteractionAck::release_interactiondata() {
  // @@protoc_insertion_point(field_release:ss_proto.LoadInteractionAck.interactionData)
  return interactiondata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadInteractionAck::set_allocated_interactiondata(std::string* interactiondata) {
  if (interactiondata != nullptr) {
    
  } else {
    
  }
  interactiondata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), interactiondata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ss_proto.LoadInteractionAck.interactionData)
}
inline std::string* LoadInteractionAck::unsafe_arena_release_interactiondata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ss_proto.LoadInteractionAck.interactionData)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return interactiondata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoadInteractionAck::unsafe_arena_set_allocated_interactiondata(
    std::string* interactiondata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (interactiondata != nullptr) {
    
  } else {
    
  }
  interactiondata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      interactiondata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.LoadInteractionAck.interactionData)
}

// -------------------------------------------------------------------

// CommonMessage

// .ss_proto.Cmd code = 1;
inline void CommonMessage::clear_code() {
  code_ = 0;
}
inline ::ss_proto::Cmd CommonMessage::_internal_code() const {
  return static_cast< ::ss_proto::Cmd >(code_);
}
inline ::ss_proto::Cmd CommonMessage::code() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.code)
  return _internal_code();
}
inline void CommonMessage::_internal_set_code(::ss_proto::Cmd value) {
  
  code_ = value;
}
inline void CommonMessage::set_code(::ss_proto::Cmd value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:ss_proto.CommonMessage.code)
}

// .ss_proto.ErrorCode errorCode = 2;
inline void CommonMessage::clear_errorcode() {
  errorcode_ = 0;
}
inline ::ss_proto::ErrorCode CommonMessage::_internal_errorcode() const {
  return static_cast< ::ss_proto::ErrorCode >(errorcode_);
}
inline ::ss_proto::ErrorCode CommonMessage::errorcode() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.errorCode)
  return _internal_errorcode();
}
inline void CommonMessage::_internal_set_errorcode(::ss_proto::ErrorCode value) {
  
  errorcode_ = value;
}
inline void CommonMessage::set_errorcode(::ss_proto::ErrorCode value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:ss_proto.CommonMessage.errorCode)
}

// int64 taskId = 3;
inline void CommonMessage::clear_taskid() {
  taskid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommonMessage::_internal_taskid() const {
  return taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommonMessage::taskid() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.taskId)
  return _internal_taskid();
}
inline void CommonMessage::_internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  taskid_ = value;
}
inline void CommonMessage::set_taskid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:ss_proto.CommonMessage.taskId)
}

// .ss_proto.AddDBNtf addDBNtf = 5;
inline bool CommonMessage::_internal_has_adddbntf() const {
  return this != internal_default_instance() && adddbntf_ != nullptr;
}
inline bool CommonMessage::has_adddbntf() const {
  return _internal_has_adddbntf();
}
inline void CommonMessage::clear_adddbntf() {
  if (GetArena() == nullptr && adddbntf_ != nullptr) {
    delete adddbntf_;
  }
  adddbntf_ = nullptr;
}
inline const ::ss_proto::AddDBNtf& CommonMessage::_internal_adddbntf() const {
  const ::ss_proto::AddDBNtf* p = adddbntf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::AddDBNtf*>(
      &::ss_proto::_AddDBNtf_default_instance_);
}
inline const ::ss_proto::AddDBNtf& CommonMessage::adddbntf() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.addDBNtf)
  return _internal_adddbntf();
}
inline void CommonMessage::unsafe_arena_set_allocated_adddbntf(
    ::ss_proto::AddDBNtf* adddbntf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adddbntf_);
  }
  adddbntf_ = adddbntf;
  if (adddbntf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.addDBNtf)
}
inline ::ss_proto::AddDBNtf* CommonMessage::release_adddbntf() {
  auto temp = unsafe_arena_release_adddbntf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::AddDBNtf* CommonMessage::unsafe_arena_release_adddbntf() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.addDBNtf)
  
  ::ss_proto::AddDBNtf* temp = adddbntf_;
  adddbntf_ = nullptr;
  return temp;
}
inline ::ss_proto::AddDBNtf* CommonMessage::_internal_mutable_adddbntf() {
  
  if (adddbntf_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::AddDBNtf>(GetArena());
    adddbntf_ = p;
  }
  return adddbntf_;
}
inline ::ss_proto::AddDBNtf* CommonMessage::mutable_adddbntf() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.addDBNtf)
  return _internal_mutable_adddbntf();
}
inline void CommonMessage::set_allocated_adddbntf(::ss_proto::AddDBNtf* adddbntf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete adddbntf_;
  }
  if (adddbntf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(adddbntf);
    if (message_arena != submessage_arena) {
      adddbntf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adddbntf, submessage_arena);
    }
    
  } else {
    
  }
  adddbntf_ = adddbntf;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.addDBNtf)
}

// .ss_proto.ServerCmd serverCmd = 6;
inline bool CommonMessage::_internal_has_servercmd() const {
  return this != internal_default_instance() && servercmd_ != nullptr;
}
inline bool CommonMessage::has_servercmd() const {
  return _internal_has_servercmd();
}
inline void CommonMessage::clear_servercmd() {
  if (GetArena() == nullptr && servercmd_ != nullptr) {
    delete servercmd_;
  }
  servercmd_ = nullptr;
}
inline const ::ss_proto::ServerCmd& CommonMessage::_internal_servercmd() const {
  const ::ss_proto::ServerCmd* p = servercmd_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::ServerCmd*>(
      &::ss_proto::_ServerCmd_default_instance_);
}
inline const ::ss_proto::ServerCmd& CommonMessage::servercmd() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.serverCmd)
  return _internal_servercmd();
}
inline void CommonMessage::unsafe_arena_set_allocated_servercmd(
    ::ss_proto::ServerCmd* servercmd) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(servercmd_);
  }
  servercmd_ = servercmd;
  if (servercmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.serverCmd)
}
inline ::ss_proto::ServerCmd* CommonMessage::release_servercmd() {
  auto temp = unsafe_arena_release_servercmd();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::ServerCmd* CommonMessage::unsafe_arena_release_servercmd() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.serverCmd)
  
  ::ss_proto::ServerCmd* temp = servercmd_;
  servercmd_ = nullptr;
  return temp;
}
inline ::ss_proto::ServerCmd* CommonMessage::_internal_mutable_servercmd() {
  
  if (servercmd_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::ServerCmd>(GetArena());
    servercmd_ = p;
  }
  return servercmd_;
}
inline ::ss_proto::ServerCmd* CommonMessage::mutable_servercmd() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.serverCmd)
  return _internal_mutable_servercmd();
}
inline void CommonMessage::set_allocated_servercmd(::ss_proto::ServerCmd* servercmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete servercmd_;
  }
  if (servercmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(servercmd);
    if (message_arena != submessage_arena) {
      servercmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, servercmd, submessage_arena);
    }
    
  } else {
    
  }
  servercmd_ = servercmd;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.serverCmd)
}

// .ss_proto.NewMailNtf newMailNtf = 7;
inline bool CommonMessage::_internal_has_newmailntf() const {
  return this != internal_default_instance() && newmailntf_ != nullptr;
}
inline bool CommonMessage::has_newmailntf() const {
  return _internal_has_newmailntf();
}
inline void CommonMessage::clear_newmailntf() {
  if (GetArena() == nullptr && newmailntf_ != nullptr) {
    delete newmailntf_;
  }
  newmailntf_ = nullptr;
}
inline const ::ss_proto::NewMailNtf& CommonMessage::_internal_newmailntf() const {
  const ::ss_proto::NewMailNtf* p = newmailntf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::NewMailNtf*>(
      &::ss_proto::_NewMailNtf_default_instance_);
}
inline const ::ss_proto::NewMailNtf& CommonMessage::newmailntf() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.newMailNtf)
  return _internal_newmailntf();
}
inline void CommonMessage::unsafe_arena_set_allocated_newmailntf(
    ::ss_proto::NewMailNtf* newmailntf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newmailntf_);
  }
  newmailntf_ = newmailntf;
  if (newmailntf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.newMailNtf)
}
inline ::ss_proto::NewMailNtf* CommonMessage::release_newmailntf() {
  auto temp = unsafe_arena_release_newmailntf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::NewMailNtf* CommonMessage::unsafe_arena_release_newmailntf() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.newMailNtf)
  
  ::ss_proto::NewMailNtf* temp = newmailntf_;
  newmailntf_ = nullptr;
  return temp;
}
inline ::ss_proto::NewMailNtf* CommonMessage::_internal_mutable_newmailntf() {
  
  if (newmailntf_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::NewMailNtf>(GetArena());
    newmailntf_ = p;
  }
  return newmailntf_;
}
inline ::ss_proto::NewMailNtf* CommonMessage::mutable_newmailntf() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.newMailNtf)
  return _internal_mutable_newmailntf();
}
inline void CommonMessage::set_allocated_newmailntf(::ss_proto::NewMailNtf* newmailntf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete newmailntf_;
  }
  if (newmailntf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(newmailntf);
    if (message_arena != submessage_arena) {
      newmailntf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newmailntf, submessage_arena);
    }
    
  } else {
    
  }
  newmailntf_ = newmailntf;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.newMailNtf)
}

// .ss_proto.ServerReport serverReport = 8;
inline bool CommonMessage::_internal_has_serverreport() const {
  return this != internal_default_instance() && serverreport_ != nullptr;
}
inline bool CommonMessage::has_serverreport() const {
  return _internal_has_serverreport();
}
inline void CommonMessage::clear_serverreport() {
  if (GetArena() == nullptr && serverreport_ != nullptr) {
    delete serverreport_;
  }
  serverreport_ = nullptr;
}
inline const ::ss_proto::ServerReport& CommonMessage::_internal_serverreport() const {
  const ::ss_proto::ServerReport* p = serverreport_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::ServerReport*>(
      &::ss_proto::_ServerReport_default_instance_);
}
inline const ::ss_proto::ServerReport& CommonMessage::serverreport() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.serverReport)
  return _internal_serverreport();
}
inline void CommonMessage::unsafe_arena_set_allocated_serverreport(
    ::ss_proto::ServerReport* serverreport) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(serverreport_);
  }
  serverreport_ = serverreport;
  if (serverreport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.serverReport)
}
inline ::ss_proto::ServerReport* CommonMessage::release_serverreport() {
  auto temp = unsafe_arena_release_serverreport();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::ServerReport* CommonMessage::unsafe_arena_release_serverreport() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.serverReport)
  
  ::ss_proto::ServerReport* temp = serverreport_;
  serverreport_ = nullptr;
  return temp;
}
inline ::ss_proto::ServerReport* CommonMessage::_internal_mutable_serverreport() {
  
  if (serverreport_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::ServerReport>(GetArena());
    serverreport_ = p;
  }
  return serverreport_;
}
inline ::ss_proto::ServerReport* CommonMessage::mutable_serverreport() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.serverReport)
  return _internal_mutable_serverreport();
}
inline void CommonMessage::set_allocated_serverreport(::ss_proto::ServerReport* serverreport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete serverreport_;
  }
  if (serverreport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(serverreport);
    if (message_arena != submessage_arena) {
      serverreport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, serverreport, submessage_arena);
    }
    
  } else {
    
  }
  serverreport_ = serverreport;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.serverReport)
}

// .ss_proto.ServerCastNtf serverCastNtf = 9;
inline bool CommonMessage::_internal_has_servercastntf() const {
  return this != internal_default_instance() && servercastntf_ != nullptr;
}
inline bool CommonMessage::has_servercastntf() const {
  return _internal_has_servercastntf();
}
inline void CommonMessage::clear_servercastntf() {
  if (GetArena() == nullptr && servercastntf_ != nullptr) {
    delete servercastntf_;
  }
  servercastntf_ = nullptr;
}
inline const ::ss_proto::ServerCastNtf& CommonMessage::_internal_servercastntf() const {
  const ::ss_proto::ServerCastNtf* p = servercastntf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::ServerCastNtf*>(
      &::ss_proto::_ServerCastNtf_default_instance_);
}
inline const ::ss_proto::ServerCastNtf& CommonMessage::servercastntf() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.serverCastNtf)
  return _internal_servercastntf();
}
inline void CommonMessage::unsafe_arena_set_allocated_servercastntf(
    ::ss_proto::ServerCastNtf* servercastntf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(servercastntf_);
  }
  servercastntf_ = servercastntf;
  if (servercastntf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.serverCastNtf)
}
inline ::ss_proto::ServerCastNtf* CommonMessage::release_servercastntf() {
  auto temp = unsafe_arena_release_servercastntf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::ServerCastNtf* CommonMessage::unsafe_arena_release_servercastntf() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.serverCastNtf)
  
  ::ss_proto::ServerCastNtf* temp = servercastntf_;
  servercastntf_ = nullptr;
  return temp;
}
inline ::ss_proto::ServerCastNtf* CommonMessage::_internal_mutable_servercastntf() {
  
  if (servercastntf_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::ServerCastNtf>(GetArena());
    servercastntf_ = p;
  }
  return servercastntf_;
}
inline ::ss_proto::ServerCastNtf* CommonMessage::mutable_servercastntf() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.serverCastNtf)
  return _internal_mutable_servercastntf();
}
inline void CommonMessage::set_allocated_servercastntf(::ss_proto::ServerCastNtf* servercastntf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete servercastntf_;
  }
  if (servercastntf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(servercastntf);
    if (message_arena != submessage_arena) {
      servercastntf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, servercastntf, submessage_arena);
    }
    
  } else {
    
  }
  servercastntf_ = servercastntf;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.serverCastNtf)
}

// .ss_proto.TopNUpdateReq topNUpdateReq = 10;
inline bool CommonMessage::_internal_has_topnupdatereq() const {
  return this != internal_default_instance() && topnupdatereq_ != nullptr;
}
inline bool CommonMessage::has_topnupdatereq() const {
  return _internal_has_topnupdatereq();
}
inline void CommonMessage::clear_topnupdatereq() {
  if (GetArena() == nullptr && topnupdatereq_ != nullptr) {
    delete topnupdatereq_;
  }
  topnupdatereq_ = nullptr;
}
inline const ::ss_proto::TopNUpdateReq& CommonMessage::_internal_topnupdatereq() const {
  const ::ss_proto::TopNUpdateReq* p = topnupdatereq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::TopNUpdateReq*>(
      &::ss_proto::_TopNUpdateReq_default_instance_);
}
inline const ::ss_proto::TopNUpdateReq& CommonMessage::topnupdatereq() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.topNUpdateReq)
  return _internal_topnupdatereq();
}
inline void CommonMessage::unsafe_arena_set_allocated_topnupdatereq(
    ::ss_proto::TopNUpdateReq* topnupdatereq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topnupdatereq_);
  }
  topnupdatereq_ = topnupdatereq;
  if (topnupdatereq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.topNUpdateReq)
}
inline ::ss_proto::TopNUpdateReq* CommonMessage::release_topnupdatereq() {
  auto temp = unsafe_arena_release_topnupdatereq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::TopNUpdateReq* CommonMessage::unsafe_arena_release_topnupdatereq() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.topNUpdateReq)
  
  ::ss_proto::TopNUpdateReq* temp = topnupdatereq_;
  topnupdatereq_ = nullptr;
  return temp;
}
inline ::ss_proto::TopNUpdateReq* CommonMessage::_internal_mutable_topnupdatereq() {
  
  if (topnupdatereq_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::TopNUpdateReq>(GetArena());
    topnupdatereq_ = p;
  }
  return topnupdatereq_;
}
inline ::ss_proto::TopNUpdateReq* CommonMessage::mutable_topnupdatereq() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.topNUpdateReq)
  return _internal_mutable_topnupdatereq();
}
inline void CommonMessage::set_allocated_topnupdatereq(::ss_proto::TopNUpdateReq* topnupdatereq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete topnupdatereq_;
  }
  if (topnupdatereq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topnupdatereq);
    if (message_arena != submessage_arena) {
      topnupdatereq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topnupdatereq, submessage_arena);
    }
    
  } else {
    
  }
  topnupdatereq_ = topnupdatereq;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.topNUpdateReq)
}

// .ss_proto.TopNUpdateAck topNUpdateAck = 11;
inline bool CommonMessage::_internal_has_topnupdateack() const {
  return this != internal_default_instance() && topnupdateack_ != nullptr;
}
inline bool CommonMessage::has_topnupdateack() const {
  return _internal_has_topnupdateack();
}
inline void CommonMessage::clear_topnupdateack() {
  if (GetArena() == nullptr && topnupdateack_ != nullptr) {
    delete topnupdateack_;
  }
  topnupdateack_ = nullptr;
}
inline const ::ss_proto::TopNUpdateAck& CommonMessage::_internal_topnupdateack() const {
  const ::ss_proto::TopNUpdateAck* p = topnupdateack_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::TopNUpdateAck*>(
      &::ss_proto::_TopNUpdateAck_default_instance_);
}
inline const ::ss_proto::TopNUpdateAck& CommonMessage::topnupdateack() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.topNUpdateAck)
  return _internal_topnupdateack();
}
inline void CommonMessage::unsafe_arena_set_allocated_topnupdateack(
    ::ss_proto::TopNUpdateAck* topnupdateack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topnupdateack_);
  }
  topnupdateack_ = topnupdateack;
  if (topnupdateack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.topNUpdateAck)
}
inline ::ss_proto::TopNUpdateAck* CommonMessage::release_topnupdateack() {
  auto temp = unsafe_arena_release_topnupdateack();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::TopNUpdateAck* CommonMessage::unsafe_arena_release_topnupdateack() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.topNUpdateAck)
  
  ::ss_proto::TopNUpdateAck* temp = topnupdateack_;
  topnupdateack_ = nullptr;
  return temp;
}
inline ::ss_proto::TopNUpdateAck* CommonMessage::_internal_mutable_topnupdateack() {
  
  if (topnupdateack_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::TopNUpdateAck>(GetArena());
    topnupdateack_ = p;
  }
  return topnupdateack_;
}
inline ::ss_proto::TopNUpdateAck* CommonMessage::mutable_topnupdateack() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.topNUpdateAck)
  return _internal_mutable_topnupdateack();
}
inline void CommonMessage::set_allocated_topnupdateack(::ss_proto::TopNUpdateAck* topnupdateack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete topnupdateack_;
  }
  if (topnupdateack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topnupdateack);
    if (message_arena != submessage_arena) {
      topnupdateack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topnupdateack, submessage_arena);
    }
    
  } else {
    
  }
  topnupdateack_ = topnupdateack;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.topNUpdateAck)
}

// .ss_proto.TopNListReq topNListReq = 12;
inline bool CommonMessage::_internal_has_topnlistreq() const {
  return this != internal_default_instance() && topnlistreq_ != nullptr;
}
inline bool CommonMessage::has_topnlistreq() const {
  return _internal_has_topnlistreq();
}
inline void CommonMessage::clear_topnlistreq() {
  if (GetArena() == nullptr && topnlistreq_ != nullptr) {
    delete topnlistreq_;
  }
  topnlistreq_ = nullptr;
}
inline const ::ss_proto::TopNListReq& CommonMessage::_internal_topnlistreq() const {
  const ::ss_proto::TopNListReq* p = topnlistreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::TopNListReq*>(
      &::ss_proto::_TopNListReq_default_instance_);
}
inline const ::ss_proto::TopNListReq& CommonMessage::topnlistreq() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.topNListReq)
  return _internal_topnlistreq();
}
inline void CommonMessage::unsafe_arena_set_allocated_topnlistreq(
    ::ss_proto::TopNListReq* topnlistreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topnlistreq_);
  }
  topnlistreq_ = topnlistreq;
  if (topnlistreq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.topNListReq)
}
inline ::ss_proto::TopNListReq* CommonMessage::release_topnlistreq() {
  auto temp = unsafe_arena_release_topnlistreq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::TopNListReq* CommonMessage::unsafe_arena_release_topnlistreq() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.topNListReq)
  
  ::ss_proto::TopNListReq* temp = topnlistreq_;
  topnlistreq_ = nullptr;
  return temp;
}
inline ::ss_proto::TopNListReq* CommonMessage::_internal_mutable_topnlistreq() {
  
  if (topnlistreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::TopNListReq>(GetArena());
    topnlistreq_ = p;
  }
  return topnlistreq_;
}
inline ::ss_proto::TopNListReq* CommonMessage::mutable_topnlistreq() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.topNListReq)
  return _internal_mutable_topnlistreq();
}
inline void CommonMessage::set_allocated_topnlistreq(::ss_proto::TopNListReq* topnlistreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete topnlistreq_;
  }
  if (topnlistreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topnlistreq);
    if (message_arena != submessage_arena) {
      topnlistreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topnlistreq, submessage_arena);
    }
    
  } else {
    
  }
  topnlistreq_ = topnlistreq;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.topNListReq)
}

// .ss_proto.TopNListAck topNListAck = 13;
inline bool CommonMessage::_internal_has_topnlistack() const {
  return this != internal_default_instance() && topnlistack_ != nullptr;
}
inline bool CommonMessage::has_topnlistack() const {
  return _internal_has_topnlistack();
}
inline void CommonMessage::clear_topnlistack() {
  if (GetArena() == nullptr && topnlistack_ != nullptr) {
    delete topnlistack_;
  }
  topnlistack_ = nullptr;
}
inline const ::ss_proto::TopNListAck& CommonMessage::_internal_topnlistack() const {
  const ::ss_proto::TopNListAck* p = topnlistack_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::TopNListAck*>(
      &::ss_proto::_TopNListAck_default_instance_);
}
inline const ::ss_proto::TopNListAck& CommonMessage::topnlistack() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.topNListAck)
  return _internal_topnlistack();
}
inline void CommonMessage::unsafe_arena_set_allocated_topnlistack(
    ::ss_proto::TopNListAck* topnlistack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topnlistack_);
  }
  topnlistack_ = topnlistack;
  if (topnlistack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.topNListAck)
}
inline ::ss_proto::TopNListAck* CommonMessage::release_topnlistack() {
  auto temp = unsafe_arena_release_topnlistack();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::TopNListAck* CommonMessage::unsafe_arena_release_topnlistack() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.topNListAck)
  
  ::ss_proto::TopNListAck* temp = topnlistack_;
  topnlistack_ = nullptr;
  return temp;
}
inline ::ss_proto::TopNListAck* CommonMessage::_internal_mutable_topnlistack() {
  
  if (topnlistack_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::TopNListAck>(GetArena());
    topnlistack_ = p;
  }
  return topnlistack_;
}
inline ::ss_proto::TopNListAck* CommonMessage::mutable_topnlistack() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.topNListAck)
  return _internal_mutable_topnlistack();
}
inline void CommonMessage::set_allocated_topnlistack(::ss_proto::TopNListAck* topnlistack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete topnlistack_;
  }
  if (topnlistack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topnlistack);
    if (message_arena != submessage_arena) {
      topnlistack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topnlistack, submessage_arena);
    }
    
  } else {
    
  }
  topnlistack_ = topnlistack;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.topNListAck)
}

// .ss_proto.UserLoginReq userLoginReq = 20;
inline bool CommonMessage::_internal_has_userloginreq() const {
  return this != internal_default_instance() && userloginreq_ != nullptr;
}
inline bool CommonMessage::has_userloginreq() const {
  return _internal_has_userloginreq();
}
inline void CommonMessage::clear_userloginreq() {
  if (GetArena() == nullptr && userloginreq_ != nullptr) {
    delete userloginreq_;
  }
  userloginreq_ = nullptr;
}
inline const ::ss_proto::UserLoginReq& CommonMessage::_internal_userloginreq() const {
  const ::ss_proto::UserLoginReq* p = userloginreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::UserLoginReq*>(
      &::ss_proto::_UserLoginReq_default_instance_);
}
inline const ::ss_proto::UserLoginReq& CommonMessage::userloginreq() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.userLoginReq)
  return _internal_userloginreq();
}
inline void CommonMessage::unsafe_arena_set_allocated_userloginreq(
    ::ss_proto::UserLoginReq* userloginreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userloginreq_);
  }
  userloginreq_ = userloginreq;
  if (userloginreq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.userLoginReq)
}
inline ::ss_proto::UserLoginReq* CommonMessage::release_userloginreq() {
  auto temp = unsafe_arena_release_userloginreq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::UserLoginReq* CommonMessage::unsafe_arena_release_userloginreq() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.userLoginReq)
  
  ::ss_proto::UserLoginReq* temp = userloginreq_;
  userloginreq_ = nullptr;
  return temp;
}
inline ::ss_proto::UserLoginReq* CommonMessage::_internal_mutable_userloginreq() {
  
  if (userloginreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::UserLoginReq>(GetArena());
    userloginreq_ = p;
  }
  return userloginreq_;
}
inline ::ss_proto::UserLoginReq* CommonMessage::mutable_userloginreq() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.userLoginReq)
  return _internal_mutable_userloginreq();
}
inline void CommonMessage::set_allocated_userloginreq(::ss_proto::UserLoginReq* userloginreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete userloginreq_;
  }
  if (userloginreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(userloginreq);
    if (message_arena != submessage_arena) {
      userloginreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userloginreq, submessage_arena);
    }
    
  } else {
    
  }
  userloginreq_ = userloginreq;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.userLoginReq)
}

// .ss_proto.UserLoginAck userLoginAck = 21;
inline bool CommonMessage::_internal_has_userloginack() const {
  return this != internal_default_instance() && userloginack_ != nullptr;
}
inline bool CommonMessage::has_userloginack() const {
  return _internal_has_userloginack();
}
inline void CommonMessage::clear_userloginack() {
  if (GetArena() == nullptr && userloginack_ != nullptr) {
    delete userloginack_;
  }
  userloginack_ = nullptr;
}
inline const ::ss_proto::UserLoginAck& CommonMessage::_internal_userloginack() const {
  const ::ss_proto::UserLoginAck* p = userloginack_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::UserLoginAck*>(
      &::ss_proto::_UserLoginAck_default_instance_);
}
inline const ::ss_proto::UserLoginAck& CommonMessage::userloginack() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.userLoginAck)
  return _internal_userloginack();
}
inline void CommonMessage::unsafe_arena_set_allocated_userloginack(
    ::ss_proto::UserLoginAck* userloginack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userloginack_);
  }
  userloginack_ = userloginack;
  if (userloginack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.userLoginAck)
}
inline ::ss_proto::UserLoginAck* CommonMessage::release_userloginack() {
  auto temp = unsafe_arena_release_userloginack();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::UserLoginAck* CommonMessage::unsafe_arena_release_userloginack() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.userLoginAck)
  
  ::ss_proto::UserLoginAck* temp = userloginack_;
  userloginack_ = nullptr;
  return temp;
}
inline ::ss_proto::UserLoginAck* CommonMessage::_internal_mutable_userloginack() {
  
  if (userloginack_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::UserLoginAck>(GetArena());
    userloginack_ = p;
  }
  return userloginack_;
}
inline ::ss_proto::UserLoginAck* CommonMessage::mutable_userloginack() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.userLoginAck)
  return _internal_mutable_userloginack();
}
inline void CommonMessage::set_allocated_userloginack(::ss_proto::UserLoginAck* userloginack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete userloginack_;
  }
  if (userloginack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(userloginack);
    if (message_arena != submessage_arena) {
      userloginack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userloginack, submessage_arena);
    }
    
  } else {
    
  }
  userloginack_ = userloginack;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.userLoginAck)
}

// .ss_proto.LoginWorldReq loginWorldReq = 22;
inline bool CommonMessage::_internal_has_loginworldreq() const {
  return this != internal_default_instance() && loginworldreq_ != nullptr;
}
inline bool CommonMessage::has_loginworldreq() const {
  return _internal_has_loginworldreq();
}
inline void CommonMessage::clear_loginworldreq() {
  if (GetArena() == nullptr && loginworldreq_ != nullptr) {
    delete loginworldreq_;
  }
  loginworldreq_ = nullptr;
}
inline const ::ss_proto::LoginWorldReq& CommonMessage::_internal_loginworldreq() const {
  const ::ss_proto::LoginWorldReq* p = loginworldreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::LoginWorldReq*>(
      &::ss_proto::_LoginWorldReq_default_instance_);
}
inline const ::ss_proto::LoginWorldReq& CommonMessage::loginworldreq() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.loginWorldReq)
  return _internal_loginworldreq();
}
inline void CommonMessage::unsafe_arena_set_allocated_loginworldreq(
    ::ss_proto::LoginWorldReq* loginworldreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loginworldreq_);
  }
  loginworldreq_ = loginworldreq;
  if (loginworldreq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.loginWorldReq)
}
inline ::ss_proto::LoginWorldReq* CommonMessage::release_loginworldreq() {
  auto temp = unsafe_arena_release_loginworldreq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::LoginWorldReq* CommonMessage::unsafe_arena_release_loginworldreq() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.loginWorldReq)
  
  ::ss_proto::LoginWorldReq* temp = loginworldreq_;
  loginworldreq_ = nullptr;
  return temp;
}
inline ::ss_proto::LoginWorldReq* CommonMessage::_internal_mutable_loginworldreq() {
  
  if (loginworldreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::LoginWorldReq>(GetArena());
    loginworldreq_ = p;
  }
  return loginworldreq_;
}
inline ::ss_proto::LoginWorldReq* CommonMessage::mutable_loginworldreq() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.loginWorldReq)
  return _internal_mutable_loginworldreq();
}
inline void CommonMessage::set_allocated_loginworldreq(::ss_proto::LoginWorldReq* loginworldreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete loginworldreq_;
  }
  if (loginworldreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(loginworldreq);
    if (message_arena != submessage_arena) {
      loginworldreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loginworldreq, submessage_arena);
    }
    
  } else {
    
  }
  loginworldreq_ = loginworldreq;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.loginWorldReq)
}

// .ss_proto.LoginWorldAck loginWorldAck = 23;
inline bool CommonMessage::_internal_has_loginworldack() const {
  return this != internal_default_instance() && loginworldack_ != nullptr;
}
inline bool CommonMessage::has_loginworldack() const {
  return _internal_has_loginworldack();
}
inline void CommonMessage::clear_loginworldack() {
  if (GetArena() == nullptr && loginworldack_ != nullptr) {
    delete loginworldack_;
  }
  loginworldack_ = nullptr;
}
inline const ::ss_proto::LoginWorldAck& CommonMessage::_internal_loginworldack() const {
  const ::ss_proto::LoginWorldAck* p = loginworldack_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::LoginWorldAck*>(
      &::ss_proto::_LoginWorldAck_default_instance_);
}
inline const ::ss_proto::LoginWorldAck& CommonMessage::loginworldack() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.loginWorldAck)
  return _internal_loginworldack();
}
inline void CommonMessage::unsafe_arena_set_allocated_loginworldack(
    ::ss_proto::LoginWorldAck* loginworldack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loginworldack_);
  }
  loginworldack_ = loginworldack;
  if (loginworldack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.loginWorldAck)
}
inline ::ss_proto::LoginWorldAck* CommonMessage::release_loginworldack() {
  auto temp = unsafe_arena_release_loginworldack();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::LoginWorldAck* CommonMessage::unsafe_arena_release_loginworldack() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.loginWorldAck)
  
  ::ss_proto::LoginWorldAck* temp = loginworldack_;
  loginworldack_ = nullptr;
  return temp;
}
inline ::ss_proto::LoginWorldAck* CommonMessage::_internal_mutable_loginworldack() {
  
  if (loginworldack_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::LoginWorldAck>(GetArena());
    loginworldack_ = p;
  }
  return loginworldack_;
}
inline ::ss_proto::LoginWorldAck* CommonMessage::mutable_loginworldack() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.loginWorldAck)
  return _internal_mutable_loginworldack();
}
inline void CommonMessage::set_allocated_loginworldack(::ss_proto::LoginWorldAck* loginworldack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete loginworldack_;
  }
  if (loginworldack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(loginworldack);
    if (message_arena != submessage_arena) {
      loginworldack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loginworldack, submessage_arena);
    }
    
  } else {
    
  }
  loginworldack_ = loginworldack;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.loginWorldAck)
}

// .ss_proto.LoginGameReq loginGameReq = 24;
inline bool CommonMessage::_internal_has_logingamereq() const {
  return this != internal_default_instance() && logingamereq_ != nullptr;
}
inline bool CommonMessage::has_logingamereq() const {
  return _internal_has_logingamereq();
}
inline void CommonMessage::clear_logingamereq() {
  if (GetArena() == nullptr && logingamereq_ != nullptr) {
    delete logingamereq_;
  }
  logingamereq_ = nullptr;
}
inline const ::ss_proto::LoginGameReq& CommonMessage::_internal_logingamereq() const {
  const ::ss_proto::LoginGameReq* p = logingamereq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::LoginGameReq*>(
      &::ss_proto::_LoginGameReq_default_instance_);
}
inline const ::ss_proto::LoginGameReq& CommonMessage::logingamereq() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.loginGameReq)
  return _internal_logingamereq();
}
inline void CommonMessage::unsafe_arena_set_allocated_logingamereq(
    ::ss_proto::LoginGameReq* logingamereq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logingamereq_);
  }
  logingamereq_ = logingamereq;
  if (logingamereq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.loginGameReq)
}
inline ::ss_proto::LoginGameReq* CommonMessage::release_logingamereq() {
  auto temp = unsafe_arena_release_logingamereq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::LoginGameReq* CommonMessage::unsafe_arena_release_logingamereq() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.loginGameReq)
  
  ::ss_proto::LoginGameReq* temp = logingamereq_;
  logingamereq_ = nullptr;
  return temp;
}
inline ::ss_proto::LoginGameReq* CommonMessage::_internal_mutable_logingamereq() {
  
  if (logingamereq_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::LoginGameReq>(GetArena());
    logingamereq_ = p;
  }
  return logingamereq_;
}
inline ::ss_proto::LoginGameReq* CommonMessage::mutable_logingamereq() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.loginGameReq)
  return _internal_mutable_logingamereq();
}
inline void CommonMessage::set_allocated_logingamereq(::ss_proto::LoginGameReq* logingamereq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logingamereq_;
  }
  if (logingamereq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logingamereq);
    if (message_arena != submessage_arena) {
      logingamereq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logingamereq, submessage_arena);
    }
    
  } else {
    
  }
  logingamereq_ = logingamereq;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.loginGameReq)
}

// .ss_proto.LoginGameAck loginGameAck = 25;
inline bool CommonMessage::_internal_has_logingameack() const {
  return this != internal_default_instance() && logingameack_ != nullptr;
}
inline bool CommonMessage::has_logingameack() const {
  return _internal_has_logingameack();
}
inline void CommonMessage::clear_logingameack() {
  if (GetArena() == nullptr && logingameack_ != nullptr) {
    delete logingameack_;
  }
  logingameack_ = nullptr;
}
inline const ::ss_proto::LoginGameAck& CommonMessage::_internal_logingameack() const {
  const ::ss_proto::LoginGameAck* p = logingameack_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::LoginGameAck*>(
      &::ss_proto::_LoginGameAck_default_instance_);
}
inline const ::ss_proto::LoginGameAck& CommonMessage::logingameack() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.loginGameAck)
  return _internal_logingameack();
}
inline void CommonMessage::unsafe_arena_set_allocated_logingameack(
    ::ss_proto::LoginGameAck* logingameack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logingameack_);
  }
  logingameack_ = logingameack;
  if (logingameack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.loginGameAck)
}
inline ::ss_proto::LoginGameAck* CommonMessage::release_logingameack() {
  auto temp = unsafe_arena_release_logingameack();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::LoginGameAck* CommonMessage::unsafe_arena_release_logingameack() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.loginGameAck)
  
  ::ss_proto::LoginGameAck* temp = logingameack_;
  logingameack_ = nullptr;
  return temp;
}
inline ::ss_proto::LoginGameAck* CommonMessage::_internal_mutable_logingameack() {
  
  if (logingameack_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::LoginGameAck>(GetArena());
    logingameack_ = p;
  }
  return logingameack_;
}
inline ::ss_proto::LoginGameAck* CommonMessage::mutable_logingameack() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.loginGameAck)
  return _internal_mutable_logingameack();
}
inline void CommonMessage::set_allocated_logingameack(::ss_proto::LoginGameAck* logingameack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logingameack_;
  }
  if (logingameack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logingameack);
    if (message_arena != submessage_arena) {
      logingameack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logingameack, submessage_arena);
    }
    
  } else {
    
  }
  logingameack_ = logingameack;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.loginGameAck)
}

// .ss_proto.LogoutGameReq logoutGameReq = 26;
inline bool CommonMessage::_internal_has_logoutgamereq() const {
  return this != internal_default_instance() && logoutgamereq_ != nullptr;
}
inline bool CommonMessage::has_logoutgamereq() const {
  return _internal_has_logoutgamereq();
}
inline void CommonMessage::clear_logoutgamereq() {
  if (GetArena() == nullptr && logoutgamereq_ != nullptr) {
    delete logoutgamereq_;
  }
  logoutgamereq_ = nullptr;
}
inline const ::ss_proto::LogoutGameReq& CommonMessage::_internal_logoutgamereq() const {
  const ::ss_proto::LogoutGameReq* p = logoutgamereq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::LogoutGameReq*>(
      &::ss_proto::_LogoutGameReq_default_instance_);
}
inline const ::ss_proto::LogoutGameReq& CommonMessage::logoutgamereq() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.logoutGameReq)
  return _internal_logoutgamereq();
}
inline void CommonMessage::unsafe_arena_set_allocated_logoutgamereq(
    ::ss_proto::LogoutGameReq* logoutgamereq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logoutgamereq_);
  }
  logoutgamereq_ = logoutgamereq;
  if (logoutgamereq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.logoutGameReq)
}
inline ::ss_proto::LogoutGameReq* CommonMessage::release_logoutgamereq() {
  auto temp = unsafe_arena_release_logoutgamereq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::LogoutGameReq* CommonMessage::unsafe_arena_release_logoutgamereq() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.logoutGameReq)
  
  ::ss_proto::LogoutGameReq* temp = logoutgamereq_;
  logoutgamereq_ = nullptr;
  return temp;
}
inline ::ss_proto::LogoutGameReq* CommonMessage::_internal_mutable_logoutgamereq() {
  
  if (logoutgamereq_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::LogoutGameReq>(GetArena());
    logoutgamereq_ = p;
  }
  return logoutgamereq_;
}
inline ::ss_proto::LogoutGameReq* CommonMessage::mutable_logoutgamereq() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.logoutGameReq)
  return _internal_mutable_logoutgamereq();
}
inline void CommonMessage::set_allocated_logoutgamereq(::ss_proto::LogoutGameReq* logoutgamereq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logoutgamereq_;
  }
  if (logoutgamereq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logoutgamereq);
    if (message_arena != submessage_arena) {
      logoutgamereq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logoutgamereq, submessage_arena);
    }
    
  } else {
    
  }
  logoutgamereq_ = logoutgamereq;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.logoutGameReq)
}

// .ss_proto.LogoutGameAck logoutGameAck = 27;
inline bool CommonMessage::_internal_has_logoutgameack() const {
  return this != internal_default_instance() && logoutgameack_ != nullptr;
}
inline bool CommonMessage::has_logoutgameack() const {
  return _internal_has_logoutgameack();
}
inline void CommonMessage::clear_logoutgameack() {
  if (GetArena() == nullptr && logoutgameack_ != nullptr) {
    delete logoutgameack_;
  }
  logoutgameack_ = nullptr;
}
inline const ::ss_proto::LogoutGameAck& CommonMessage::_internal_logoutgameack() const {
  const ::ss_proto::LogoutGameAck* p = logoutgameack_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::LogoutGameAck*>(
      &::ss_proto::_LogoutGameAck_default_instance_);
}
inline const ::ss_proto::LogoutGameAck& CommonMessage::logoutgameack() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.logoutGameAck)
  return _internal_logoutgameack();
}
inline void CommonMessage::unsafe_arena_set_allocated_logoutgameack(
    ::ss_proto::LogoutGameAck* logoutgameack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logoutgameack_);
  }
  logoutgameack_ = logoutgameack;
  if (logoutgameack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.logoutGameAck)
}
inline ::ss_proto::LogoutGameAck* CommonMessage::release_logoutgameack() {
  auto temp = unsafe_arena_release_logoutgameack();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::LogoutGameAck* CommonMessage::unsafe_arena_release_logoutgameack() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.logoutGameAck)
  
  ::ss_proto::LogoutGameAck* temp = logoutgameack_;
  logoutgameack_ = nullptr;
  return temp;
}
inline ::ss_proto::LogoutGameAck* CommonMessage::_internal_mutable_logoutgameack() {
  
  if (logoutgameack_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::LogoutGameAck>(GetArena());
    logoutgameack_ = p;
  }
  return logoutgameack_;
}
inline ::ss_proto::LogoutGameAck* CommonMessage::mutable_logoutgameack() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.logoutGameAck)
  return _internal_mutable_logoutgameack();
}
inline void CommonMessage::set_allocated_logoutgameack(::ss_proto::LogoutGameAck* logoutgameack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logoutgameack_;
  }
  if (logoutgameack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logoutgameack);
    if (message_arena != submessage_arena) {
      logoutgameack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logoutgameack, submessage_arena);
    }
    
  } else {
    
  }
  logoutgameack_ = logoutgameack;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.logoutGameAck)
}

// .ss_proto.CreateRoleReq createRoleReq = 28;
inline bool CommonMessage::_internal_has_createrolereq() const {
  return this != internal_default_instance() && createrolereq_ != nullptr;
}
inline bool CommonMessage::has_createrolereq() const {
  return _internal_has_createrolereq();
}
inline void CommonMessage::clear_createrolereq() {
  if (GetArena() == nullptr && createrolereq_ != nullptr) {
    delete createrolereq_;
  }
  createrolereq_ = nullptr;
}
inline const ::ss_proto::CreateRoleReq& CommonMessage::_internal_createrolereq() const {
  const ::ss_proto::CreateRoleReq* p = createrolereq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::CreateRoleReq*>(
      &::ss_proto::_CreateRoleReq_default_instance_);
}
inline const ::ss_proto::CreateRoleReq& CommonMessage::createrolereq() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.createRoleReq)
  return _internal_createrolereq();
}
inline void CommonMessage::unsafe_arena_set_allocated_createrolereq(
    ::ss_proto::CreateRoleReq* createrolereq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createrolereq_);
  }
  createrolereq_ = createrolereq;
  if (createrolereq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.createRoleReq)
}
inline ::ss_proto::CreateRoleReq* CommonMessage::release_createrolereq() {
  auto temp = unsafe_arena_release_createrolereq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::CreateRoleReq* CommonMessage::unsafe_arena_release_createrolereq() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.createRoleReq)
  
  ::ss_proto::CreateRoleReq* temp = createrolereq_;
  createrolereq_ = nullptr;
  return temp;
}
inline ::ss_proto::CreateRoleReq* CommonMessage::_internal_mutable_createrolereq() {
  
  if (createrolereq_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::CreateRoleReq>(GetArena());
    createrolereq_ = p;
  }
  return createrolereq_;
}
inline ::ss_proto::CreateRoleReq* CommonMessage::mutable_createrolereq() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.createRoleReq)
  return _internal_mutable_createrolereq();
}
inline void CommonMessage::set_allocated_createrolereq(::ss_proto::CreateRoleReq* createrolereq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete createrolereq_;
  }
  if (createrolereq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(createrolereq);
    if (message_arena != submessage_arena) {
      createrolereq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, createrolereq, submessage_arena);
    }
    
  } else {
    
  }
  createrolereq_ = createrolereq;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.createRoleReq)
}

// .ss_proto.CreateRoleAck createRoleAck = 29;
inline bool CommonMessage::_internal_has_createroleack() const {
  return this != internal_default_instance() && createroleack_ != nullptr;
}
inline bool CommonMessage::has_createroleack() const {
  return _internal_has_createroleack();
}
inline void CommonMessage::clear_createroleack() {
  if (GetArena() == nullptr && createroleack_ != nullptr) {
    delete createroleack_;
  }
  createroleack_ = nullptr;
}
inline const ::ss_proto::CreateRoleAck& CommonMessage::_internal_createroleack() const {
  const ::ss_proto::CreateRoleAck* p = createroleack_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::CreateRoleAck*>(
      &::ss_proto::_CreateRoleAck_default_instance_);
}
inline const ::ss_proto::CreateRoleAck& CommonMessage::createroleack() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.createRoleAck)
  return _internal_createroleack();
}
inline void CommonMessage::unsafe_arena_set_allocated_createroleack(
    ::ss_proto::CreateRoleAck* createroleack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createroleack_);
  }
  createroleack_ = createroleack;
  if (createroleack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.createRoleAck)
}
inline ::ss_proto::CreateRoleAck* CommonMessage::release_createroleack() {
  auto temp = unsafe_arena_release_createroleack();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::CreateRoleAck* CommonMessage::unsafe_arena_release_createroleack() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.createRoleAck)
  
  ::ss_proto::CreateRoleAck* temp = createroleack_;
  createroleack_ = nullptr;
  return temp;
}
inline ::ss_proto::CreateRoleAck* CommonMessage::_internal_mutable_createroleack() {
  
  if (createroleack_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::CreateRoleAck>(GetArena());
    createroleack_ = p;
  }
  return createroleack_;
}
inline ::ss_proto::CreateRoleAck* CommonMessage::mutable_createroleack() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.createRoleAck)
  return _internal_mutable_createroleack();
}
inline void CommonMessage::set_allocated_createroleack(::ss_proto::CreateRoleAck* createroleack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete createroleack_;
  }
  if (createroleack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(createroleack);
    if (message_arena != submessage_arena) {
      createroleack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, createroleack, submessage_arena);
    }
    
  } else {
    
  }
  createroleack_ = createroleack;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.createRoleAck)
}

// .ss_proto.SaveRoleReq saveRoleReq = 30;
inline bool CommonMessage::_internal_has_saverolereq() const {
  return this != internal_default_instance() && saverolereq_ != nullptr;
}
inline bool CommonMessage::has_saverolereq() const {
  return _internal_has_saverolereq();
}
inline void CommonMessage::clear_saverolereq() {
  if (GetArena() == nullptr && saverolereq_ != nullptr) {
    delete saverolereq_;
  }
  saverolereq_ = nullptr;
}
inline const ::ss_proto::SaveRoleReq& CommonMessage::_internal_saverolereq() const {
  const ::ss_proto::SaveRoleReq* p = saverolereq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::SaveRoleReq*>(
      &::ss_proto::_SaveRoleReq_default_instance_);
}
inline const ::ss_proto::SaveRoleReq& CommonMessage::saverolereq() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.saveRoleReq)
  return _internal_saverolereq();
}
inline void CommonMessage::unsafe_arena_set_allocated_saverolereq(
    ::ss_proto::SaveRoleReq* saverolereq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(saverolereq_);
  }
  saverolereq_ = saverolereq;
  if (saverolereq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.saveRoleReq)
}
inline ::ss_proto::SaveRoleReq* CommonMessage::release_saverolereq() {
  auto temp = unsafe_arena_release_saverolereq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::SaveRoleReq* CommonMessage::unsafe_arena_release_saverolereq() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.saveRoleReq)
  
  ::ss_proto::SaveRoleReq* temp = saverolereq_;
  saverolereq_ = nullptr;
  return temp;
}
inline ::ss_proto::SaveRoleReq* CommonMessage::_internal_mutable_saverolereq() {
  
  if (saverolereq_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::SaveRoleReq>(GetArena());
    saverolereq_ = p;
  }
  return saverolereq_;
}
inline ::ss_proto::SaveRoleReq* CommonMessage::mutable_saverolereq() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.saveRoleReq)
  return _internal_mutable_saverolereq();
}
inline void CommonMessage::set_allocated_saverolereq(::ss_proto::SaveRoleReq* saverolereq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete saverolereq_;
  }
  if (saverolereq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(saverolereq);
    if (message_arena != submessage_arena) {
      saverolereq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, saverolereq, submessage_arena);
    }
    
  } else {
    
  }
  saverolereq_ = saverolereq;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.saveRoleReq)
}

// .ss_proto.SaveRoleAck saveRoleAck = 31;
inline bool CommonMessage::_internal_has_saveroleack() const {
  return this != internal_default_instance() && saveroleack_ != nullptr;
}
inline bool CommonMessage::has_saveroleack() const {
  return _internal_has_saveroleack();
}
inline void CommonMessage::clear_saveroleack() {
  if (GetArena() == nullptr && saveroleack_ != nullptr) {
    delete saveroleack_;
  }
  saveroleack_ = nullptr;
}
inline const ::ss_proto::SaveRoleAck& CommonMessage::_internal_saveroleack() const {
  const ::ss_proto::SaveRoleAck* p = saveroleack_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::SaveRoleAck*>(
      &::ss_proto::_SaveRoleAck_default_instance_);
}
inline const ::ss_proto::SaveRoleAck& CommonMessage::saveroleack() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.saveRoleAck)
  return _internal_saveroleack();
}
inline void CommonMessage::unsafe_arena_set_allocated_saveroleack(
    ::ss_proto::SaveRoleAck* saveroleack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(saveroleack_);
  }
  saveroleack_ = saveroleack;
  if (saveroleack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.saveRoleAck)
}
inline ::ss_proto::SaveRoleAck* CommonMessage::release_saveroleack() {
  auto temp = unsafe_arena_release_saveroleack();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::SaveRoleAck* CommonMessage::unsafe_arena_release_saveroleack() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.saveRoleAck)
  
  ::ss_proto::SaveRoleAck* temp = saveroleack_;
  saveroleack_ = nullptr;
  return temp;
}
inline ::ss_proto::SaveRoleAck* CommonMessage::_internal_mutable_saveroleack() {
  
  if (saveroleack_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::SaveRoleAck>(GetArena());
    saveroleack_ = p;
  }
  return saveroleack_;
}
inline ::ss_proto::SaveRoleAck* CommonMessage::mutable_saveroleack() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.saveRoleAck)
  return _internal_mutable_saveroleack();
}
inline void CommonMessage::set_allocated_saveroleack(::ss_proto::SaveRoleAck* saveroleack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete saveroleack_;
  }
  if (saveroleack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(saveroleack);
    if (message_arena != submessage_arena) {
      saveroleack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, saveroleack, submessage_arena);
    }
    
  } else {
    
  }
  saveroleack_ = saveroleack;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.saveRoleAck)
}

// .ss_proto.KickUserNtf kickUserNtf = 32;
inline bool CommonMessage::_internal_has_kickuserntf() const {
  return this != internal_default_instance() && kickuserntf_ != nullptr;
}
inline bool CommonMessage::has_kickuserntf() const {
  return _internal_has_kickuserntf();
}
inline void CommonMessage::clear_kickuserntf() {
  if (GetArena() == nullptr && kickuserntf_ != nullptr) {
    delete kickuserntf_;
  }
  kickuserntf_ = nullptr;
}
inline const ::ss_proto::KickUserNtf& CommonMessage::_internal_kickuserntf() const {
  const ::ss_proto::KickUserNtf* p = kickuserntf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::KickUserNtf*>(
      &::ss_proto::_KickUserNtf_default_instance_);
}
inline const ::ss_proto::KickUserNtf& CommonMessage::kickuserntf() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.kickUserNtf)
  return _internal_kickuserntf();
}
inline void CommonMessage::unsafe_arena_set_allocated_kickuserntf(
    ::ss_proto::KickUserNtf* kickuserntf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kickuserntf_);
  }
  kickuserntf_ = kickuserntf;
  if (kickuserntf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.kickUserNtf)
}
inline ::ss_proto::KickUserNtf* CommonMessage::release_kickuserntf() {
  auto temp = unsafe_arena_release_kickuserntf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::KickUserNtf* CommonMessage::unsafe_arena_release_kickuserntf() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.kickUserNtf)
  
  ::ss_proto::KickUserNtf* temp = kickuserntf_;
  kickuserntf_ = nullptr;
  return temp;
}
inline ::ss_proto::KickUserNtf* CommonMessage::_internal_mutable_kickuserntf() {
  
  if (kickuserntf_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::KickUserNtf>(GetArena());
    kickuserntf_ = p;
  }
  return kickuserntf_;
}
inline ::ss_proto::KickUserNtf* CommonMessage::mutable_kickuserntf() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.kickUserNtf)
  return _internal_mutable_kickuserntf();
}
inline void CommonMessage::set_allocated_kickuserntf(::ss_proto::KickUserNtf* kickuserntf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete kickuserntf_;
  }
  if (kickuserntf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(kickuserntf);
    if (message_arena != submessage_arena) {
      kickuserntf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kickuserntf, submessage_arena);
    }
    
  } else {
    
  }
  kickuserntf_ = kickuserntf;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.kickUserNtf)
}

// .ss_proto.SyncRoleNtf syncRoleNtf = 33;
inline bool CommonMessage::_internal_has_syncrolentf() const {
  return this != internal_default_instance() && syncrolentf_ != nullptr;
}
inline bool CommonMessage::has_syncrolentf() const {
  return _internal_has_syncrolentf();
}
inline void CommonMessage::clear_syncrolentf() {
  if (GetArena() == nullptr && syncrolentf_ != nullptr) {
    delete syncrolentf_;
  }
  syncrolentf_ = nullptr;
}
inline const ::ss_proto::SyncRoleNtf& CommonMessage::_internal_syncrolentf() const {
  const ::ss_proto::SyncRoleNtf* p = syncrolentf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::SyncRoleNtf*>(
      &::ss_proto::_SyncRoleNtf_default_instance_);
}
inline const ::ss_proto::SyncRoleNtf& CommonMessage::syncrolentf() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.syncRoleNtf)
  return _internal_syncrolentf();
}
inline void CommonMessage::unsafe_arena_set_allocated_syncrolentf(
    ::ss_proto::SyncRoleNtf* syncrolentf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(syncrolentf_);
  }
  syncrolentf_ = syncrolentf;
  if (syncrolentf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.syncRoleNtf)
}
inline ::ss_proto::SyncRoleNtf* CommonMessage::release_syncrolentf() {
  auto temp = unsafe_arena_release_syncrolentf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::SyncRoleNtf* CommonMessage::unsafe_arena_release_syncrolentf() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.syncRoleNtf)
  
  ::ss_proto::SyncRoleNtf* temp = syncrolentf_;
  syncrolentf_ = nullptr;
  return temp;
}
inline ::ss_proto::SyncRoleNtf* CommonMessage::_internal_mutable_syncrolentf() {
  
  if (syncrolentf_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::SyncRoleNtf>(GetArena());
    syncrolentf_ = p;
  }
  return syncrolentf_;
}
inline ::ss_proto::SyncRoleNtf* CommonMessage::mutable_syncrolentf() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.syncRoleNtf)
  return _internal_mutable_syncrolentf();
}
inline void CommonMessage::set_allocated_syncrolentf(::ss_proto::SyncRoleNtf* syncrolentf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete syncrolentf_;
  }
  if (syncrolentf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(syncrolentf);
    if (message_arena != submessage_arena) {
      syncrolentf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, syncrolentf, submessage_arena);
    }
    
  } else {
    
  }
  syncrolentf_ = syncrolentf;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.syncRoleNtf)
}

// .ss_proto.SearchBossReq searchBossReq = 34;
inline bool CommonMessage::_internal_has_searchbossreq() const {
  return this != internal_default_instance() && searchbossreq_ != nullptr;
}
inline bool CommonMessage::has_searchbossreq() const {
  return _internal_has_searchbossreq();
}
inline void CommonMessage::clear_searchbossreq() {
  if (GetArena() == nullptr && searchbossreq_ != nullptr) {
    delete searchbossreq_;
  }
  searchbossreq_ = nullptr;
}
inline const ::ss_proto::SearchBossReq& CommonMessage::_internal_searchbossreq() const {
  const ::ss_proto::SearchBossReq* p = searchbossreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::SearchBossReq*>(
      &::ss_proto::_SearchBossReq_default_instance_);
}
inline const ::ss_proto::SearchBossReq& CommonMessage::searchbossreq() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.searchBossReq)
  return _internal_searchbossreq();
}
inline void CommonMessage::unsafe_arena_set_allocated_searchbossreq(
    ::ss_proto::SearchBossReq* searchbossreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(searchbossreq_);
  }
  searchbossreq_ = searchbossreq;
  if (searchbossreq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.searchBossReq)
}
inline ::ss_proto::SearchBossReq* CommonMessage::release_searchbossreq() {
  auto temp = unsafe_arena_release_searchbossreq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::SearchBossReq* CommonMessage::unsafe_arena_release_searchbossreq() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.searchBossReq)
  
  ::ss_proto::SearchBossReq* temp = searchbossreq_;
  searchbossreq_ = nullptr;
  return temp;
}
inline ::ss_proto::SearchBossReq* CommonMessage::_internal_mutable_searchbossreq() {
  
  if (searchbossreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::SearchBossReq>(GetArena());
    searchbossreq_ = p;
  }
  return searchbossreq_;
}
inline ::ss_proto::SearchBossReq* CommonMessage::mutable_searchbossreq() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.searchBossReq)
  return _internal_mutable_searchbossreq();
}
inline void CommonMessage::set_allocated_searchbossreq(::ss_proto::SearchBossReq* searchbossreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete searchbossreq_;
  }
  if (searchbossreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(searchbossreq);
    if (message_arena != submessage_arena) {
      searchbossreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, searchbossreq, submessage_arena);
    }
    
  } else {
    
  }
  searchbossreq_ = searchbossreq;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.searchBossReq)
}

// .ss_proto.SearchBossAck searchBossAck = 35;
inline bool CommonMessage::_internal_has_searchbossack() const {
  return this != internal_default_instance() && searchbossack_ != nullptr;
}
inline bool CommonMessage::has_searchbossack() const {
  return _internal_has_searchbossack();
}
inline void CommonMessage::clear_searchbossack() {
  if (GetArena() == nullptr && searchbossack_ != nullptr) {
    delete searchbossack_;
  }
  searchbossack_ = nullptr;
}
inline const ::ss_proto::SearchBossAck& CommonMessage::_internal_searchbossack() const {
  const ::ss_proto::SearchBossAck* p = searchbossack_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::SearchBossAck*>(
      &::ss_proto::_SearchBossAck_default_instance_);
}
inline const ::ss_proto::SearchBossAck& CommonMessage::searchbossack() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.searchBossAck)
  return _internal_searchbossack();
}
inline void CommonMessage::unsafe_arena_set_allocated_searchbossack(
    ::ss_proto::SearchBossAck* searchbossack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(searchbossack_);
  }
  searchbossack_ = searchbossack;
  if (searchbossack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.searchBossAck)
}
inline ::ss_proto::SearchBossAck* CommonMessage::release_searchbossack() {
  auto temp = unsafe_arena_release_searchbossack();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::SearchBossAck* CommonMessage::unsafe_arena_release_searchbossack() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.searchBossAck)
  
  ::ss_proto::SearchBossAck* temp = searchbossack_;
  searchbossack_ = nullptr;
  return temp;
}
inline ::ss_proto::SearchBossAck* CommonMessage::_internal_mutable_searchbossack() {
  
  if (searchbossack_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::SearchBossAck>(GetArena());
    searchbossack_ = p;
  }
  return searchbossack_;
}
inline ::ss_proto::SearchBossAck* CommonMessage::mutable_searchbossack() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.searchBossAck)
  return _internal_mutable_searchbossack();
}
inline void CommonMessage::set_allocated_searchbossack(::ss_proto::SearchBossAck* searchbossack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete searchbossack_;
  }
  if (searchbossack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(searchbossack);
    if (message_arena != submessage_arena) {
      searchbossack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, searchbossack, submessage_arena);
    }
    
  } else {
    
  }
  searchbossack_ = searchbossack;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.searchBossAck)
}

// .ss_proto.LogDataReq logDataReq = 36;
inline bool CommonMessage::_internal_has_logdatareq() const {
  return this != internal_default_instance() && logdatareq_ != nullptr;
}
inline bool CommonMessage::has_logdatareq() const {
  return _internal_has_logdatareq();
}
inline void CommonMessage::clear_logdatareq() {
  if (GetArena() == nullptr && logdatareq_ != nullptr) {
    delete logdatareq_;
  }
  logdatareq_ = nullptr;
}
inline const ::ss_proto::LogDataReq& CommonMessage::_internal_logdatareq() const {
  const ::ss_proto::LogDataReq* p = logdatareq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::LogDataReq*>(
      &::ss_proto::_LogDataReq_default_instance_);
}
inline const ::ss_proto::LogDataReq& CommonMessage::logdatareq() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.logDataReq)
  return _internal_logdatareq();
}
inline void CommonMessage::unsafe_arena_set_allocated_logdatareq(
    ::ss_proto::LogDataReq* logdatareq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logdatareq_);
  }
  logdatareq_ = logdatareq;
  if (logdatareq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.logDataReq)
}
inline ::ss_proto::LogDataReq* CommonMessage::release_logdatareq() {
  auto temp = unsafe_arena_release_logdatareq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::LogDataReq* CommonMessage::unsafe_arena_release_logdatareq() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.logDataReq)
  
  ::ss_proto::LogDataReq* temp = logdatareq_;
  logdatareq_ = nullptr;
  return temp;
}
inline ::ss_proto::LogDataReq* CommonMessage::_internal_mutable_logdatareq() {
  
  if (logdatareq_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::LogDataReq>(GetArena());
    logdatareq_ = p;
  }
  return logdatareq_;
}
inline ::ss_proto::LogDataReq* CommonMessage::mutable_logdatareq() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.logDataReq)
  return _internal_mutable_logdatareq();
}
inline void CommonMessage::set_allocated_logdatareq(::ss_proto::LogDataReq* logdatareq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logdatareq_;
  }
  if (logdatareq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logdatareq);
    if (message_arena != submessage_arena) {
      logdatareq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logdatareq, submessage_arena);
    }
    
  } else {
    
  }
  logdatareq_ = logdatareq;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.logDataReq)
}

// .ss_proto.LogDataAck logDataAck = 37;
inline bool CommonMessage::_internal_has_logdataack() const {
  return this != internal_default_instance() && logdataack_ != nullptr;
}
inline bool CommonMessage::has_logdataack() const {
  return _internal_has_logdataack();
}
inline void CommonMessage::clear_logdataack() {
  if (GetArena() == nullptr && logdataack_ != nullptr) {
    delete logdataack_;
  }
  logdataack_ = nullptr;
}
inline const ::ss_proto::LogDataAck& CommonMessage::_internal_logdataack() const {
  const ::ss_proto::LogDataAck* p = logdataack_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::LogDataAck*>(
      &::ss_proto::_LogDataAck_default_instance_);
}
inline const ::ss_proto::LogDataAck& CommonMessage::logdataack() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.logDataAck)
  return _internal_logdataack();
}
inline void CommonMessage::unsafe_arena_set_allocated_logdataack(
    ::ss_proto::LogDataAck* logdataack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logdataack_);
  }
  logdataack_ = logdataack;
  if (logdataack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.logDataAck)
}
inline ::ss_proto::LogDataAck* CommonMessage::release_logdataack() {
  auto temp = unsafe_arena_release_logdataack();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::LogDataAck* CommonMessage::unsafe_arena_release_logdataack() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.logDataAck)
  
  ::ss_proto::LogDataAck* temp = logdataack_;
  logdataack_ = nullptr;
  return temp;
}
inline ::ss_proto::LogDataAck* CommonMessage::_internal_mutable_logdataack() {
  
  if (logdataack_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::LogDataAck>(GetArena());
    logdataack_ = p;
  }
  return logdataack_;
}
inline ::ss_proto::LogDataAck* CommonMessage::mutable_logdataack() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.logDataAck)
  return _internal_mutable_logdataack();
}
inline void CommonMessage::set_allocated_logdataack(::ss_proto::LogDataAck* logdataack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logdataack_;
  }
  if (logdataack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logdataack);
    if (message_arena != submessage_arena) {
      logdataack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logdataack, submessage_arena);
    }
    
  } else {
    
  }
  logdataack_ = logdataack;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.logDataAck)
}

// .ss_proto.LoadRoleSkillReq loadRoleSkillReq = 38;
inline bool CommonMessage::_internal_has_loadroleskillreq() const {
  return this != internal_default_instance() && loadroleskillreq_ != nullptr;
}
inline bool CommonMessage::has_loadroleskillreq() const {
  return _internal_has_loadroleskillreq();
}
inline void CommonMessage::clear_loadroleskillreq() {
  if (GetArena() == nullptr && loadroleskillreq_ != nullptr) {
    delete loadroleskillreq_;
  }
  loadroleskillreq_ = nullptr;
}
inline const ::ss_proto::LoadRoleSkillReq& CommonMessage::_internal_loadroleskillreq() const {
  const ::ss_proto::LoadRoleSkillReq* p = loadroleskillreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::LoadRoleSkillReq*>(
      &::ss_proto::_LoadRoleSkillReq_default_instance_);
}
inline const ::ss_proto::LoadRoleSkillReq& CommonMessage::loadroleskillreq() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.loadRoleSkillReq)
  return _internal_loadroleskillreq();
}
inline void CommonMessage::unsafe_arena_set_allocated_loadroleskillreq(
    ::ss_proto::LoadRoleSkillReq* loadroleskillreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loadroleskillreq_);
  }
  loadroleskillreq_ = loadroleskillreq;
  if (loadroleskillreq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.loadRoleSkillReq)
}
inline ::ss_proto::LoadRoleSkillReq* CommonMessage::release_loadroleskillreq() {
  auto temp = unsafe_arena_release_loadroleskillreq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::LoadRoleSkillReq* CommonMessage::unsafe_arena_release_loadroleskillreq() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.loadRoleSkillReq)
  
  ::ss_proto::LoadRoleSkillReq* temp = loadroleskillreq_;
  loadroleskillreq_ = nullptr;
  return temp;
}
inline ::ss_proto::LoadRoleSkillReq* CommonMessage::_internal_mutable_loadroleskillreq() {
  
  if (loadroleskillreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::LoadRoleSkillReq>(GetArena());
    loadroleskillreq_ = p;
  }
  return loadroleskillreq_;
}
inline ::ss_proto::LoadRoleSkillReq* CommonMessage::mutable_loadroleskillreq() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.loadRoleSkillReq)
  return _internal_mutable_loadroleskillreq();
}
inline void CommonMessage::set_allocated_loadroleskillreq(::ss_proto::LoadRoleSkillReq* loadroleskillreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete loadroleskillreq_;
  }
  if (loadroleskillreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(loadroleskillreq);
    if (message_arena != submessage_arena) {
      loadroleskillreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loadroleskillreq, submessage_arena);
    }
    
  } else {
    
  }
  loadroleskillreq_ = loadroleskillreq;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.loadRoleSkillReq)
}

// .ss_proto.LoadRoleSkillAck loadRoleSkillAck = 39;
inline bool CommonMessage::_internal_has_loadroleskillack() const {
  return this != internal_default_instance() && loadroleskillack_ != nullptr;
}
inline bool CommonMessage::has_loadroleskillack() const {
  return _internal_has_loadroleskillack();
}
inline void CommonMessage::clear_loadroleskillack() {
  if (GetArena() == nullptr && loadroleskillack_ != nullptr) {
    delete loadroleskillack_;
  }
  loadroleskillack_ = nullptr;
}
inline const ::ss_proto::LoadRoleSkillAck& CommonMessage::_internal_loadroleskillack() const {
  const ::ss_proto::LoadRoleSkillAck* p = loadroleskillack_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::LoadRoleSkillAck*>(
      &::ss_proto::_LoadRoleSkillAck_default_instance_);
}
inline const ::ss_proto::LoadRoleSkillAck& CommonMessage::loadroleskillack() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.loadRoleSkillAck)
  return _internal_loadroleskillack();
}
inline void CommonMessage::unsafe_arena_set_allocated_loadroleskillack(
    ::ss_proto::LoadRoleSkillAck* loadroleskillack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loadroleskillack_);
  }
  loadroleskillack_ = loadroleskillack;
  if (loadroleskillack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.loadRoleSkillAck)
}
inline ::ss_proto::LoadRoleSkillAck* CommonMessage::release_loadroleskillack() {
  auto temp = unsafe_arena_release_loadroleskillack();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::LoadRoleSkillAck* CommonMessage::unsafe_arena_release_loadroleskillack() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.loadRoleSkillAck)
  
  ::ss_proto::LoadRoleSkillAck* temp = loadroleskillack_;
  loadroleskillack_ = nullptr;
  return temp;
}
inline ::ss_proto::LoadRoleSkillAck* CommonMessage::_internal_mutable_loadroleskillack() {
  
  if (loadroleskillack_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::LoadRoleSkillAck>(GetArena());
    loadroleskillack_ = p;
  }
  return loadroleskillack_;
}
inline ::ss_proto::LoadRoleSkillAck* CommonMessage::mutable_loadroleskillack() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.loadRoleSkillAck)
  return _internal_mutable_loadroleskillack();
}
inline void CommonMessage::set_allocated_loadroleskillack(::ss_proto::LoadRoleSkillAck* loadroleskillack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete loadroleskillack_;
  }
  if (loadroleskillack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(loadroleskillack);
    if (message_arena != submessage_arena) {
      loadroleskillack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loadroleskillack, submessage_arena);
    }
    
  } else {
    
  }
  loadroleskillack_ = loadroleskillack;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.loadRoleSkillAck)
}

// .ss_proto.LoadRolePackageReq loadRolePackageReq = 40;
inline bool CommonMessage::_internal_has_loadrolepackagereq() const {
  return this != internal_default_instance() && loadrolepackagereq_ != nullptr;
}
inline bool CommonMessage::has_loadrolepackagereq() const {
  return _internal_has_loadrolepackagereq();
}
inline void CommonMessage::clear_loadrolepackagereq() {
  if (GetArena() == nullptr && loadrolepackagereq_ != nullptr) {
    delete loadrolepackagereq_;
  }
  loadrolepackagereq_ = nullptr;
}
inline const ::ss_proto::LoadRolePackageReq& CommonMessage::_internal_loadrolepackagereq() const {
  const ::ss_proto::LoadRolePackageReq* p = loadrolepackagereq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::LoadRolePackageReq*>(
      &::ss_proto::_LoadRolePackageReq_default_instance_);
}
inline const ::ss_proto::LoadRolePackageReq& CommonMessage::loadrolepackagereq() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.loadRolePackageReq)
  return _internal_loadrolepackagereq();
}
inline void CommonMessage::unsafe_arena_set_allocated_loadrolepackagereq(
    ::ss_proto::LoadRolePackageReq* loadrolepackagereq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loadrolepackagereq_);
  }
  loadrolepackagereq_ = loadrolepackagereq;
  if (loadrolepackagereq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.loadRolePackageReq)
}
inline ::ss_proto::LoadRolePackageReq* CommonMessage::release_loadrolepackagereq() {
  auto temp = unsafe_arena_release_loadrolepackagereq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::LoadRolePackageReq* CommonMessage::unsafe_arena_release_loadrolepackagereq() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.loadRolePackageReq)
  
  ::ss_proto::LoadRolePackageReq* temp = loadrolepackagereq_;
  loadrolepackagereq_ = nullptr;
  return temp;
}
inline ::ss_proto::LoadRolePackageReq* CommonMessage::_internal_mutable_loadrolepackagereq() {
  
  if (loadrolepackagereq_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::LoadRolePackageReq>(GetArena());
    loadrolepackagereq_ = p;
  }
  return loadrolepackagereq_;
}
inline ::ss_proto::LoadRolePackageReq* CommonMessage::mutable_loadrolepackagereq() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.loadRolePackageReq)
  return _internal_mutable_loadrolepackagereq();
}
inline void CommonMessage::set_allocated_loadrolepackagereq(::ss_proto::LoadRolePackageReq* loadrolepackagereq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete loadrolepackagereq_;
  }
  if (loadrolepackagereq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(loadrolepackagereq);
    if (message_arena != submessage_arena) {
      loadrolepackagereq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loadrolepackagereq, submessage_arena);
    }
    
  } else {
    
  }
  loadrolepackagereq_ = loadrolepackagereq;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.loadRolePackageReq)
}

// .ss_proto.LoadRolePackageAck loadRolePackageAck = 41;
inline bool CommonMessage::_internal_has_loadrolepackageack() const {
  return this != internal_default_instance() && loadrolepackageack_ != nullptr;
}
inline bool CommonMessage::has_loadrolepackageack() const {
  return _internal_has_loadrolepackageack();
}
inline void CommonMessage::clear_loadrolepackageack() {
  if (GetArena() == nullptr && loadrolepackageack_ != nullptr) {
    delete loadrolepackageack_;
  }
  loadrolepackageack_ = nullptr;
}
inline const ::ss_proto::LoadRolePackageAck& CommonMessage::_internal_loadrolepackageack() const {
  const ::ss_proto::LoadRolePackageAck* p = loadrolepackageack_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::LoadRolePackageAck*>(
      &::ss_proto::_LoadRolePackageAck_default_instance_);
}
inline const ::ss_proto::LoadRolePackageAck& CommonMessage::loadrolepackageack() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.loadRolePackageAck)
  return _internal_loadrolepackageack();
}
inline void CommonMessage::unsafe_arena_set_allocated_loadrolepackageack(
    ::ss_proto::LoadRolePackageAck* loadrolepackageack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loadrolepackageack_);
  }
  loadrolepackageack_ = loadrolepackageack;
  if (loadrolepackageack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.loadRolePackageAck)
}
inline ::ss_proto::LoadRolePackageAck* CommonMessage::release_loadrolepackageack() {
  auto temp = unsafe_arena_release_loadrolepackageack();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::LoadRolePackageAck* CommonMessage::unsafe_arena_release_loadrolepackageack() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.loadRolePackageAck)
  
  ::ss_proto::LoadRolePackageAck* temp = loadrolepackageack_;
  loadrolepackageack_ = nullptr;
  return temp;
}
inline ::ss_proto::LoadRolePackageAck* CommonMessage::_internal_mutable_loadrolepackageack() {
  
  if (loadrolepackageack_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::LoadRolePackageAck>(GetArena());
    loadrolepackageack_ = p;
  }
  return loadrolepackageack_;
}
inline ::ss_proto::LoadRolePackageAck* CommonMessage::mutable_loadrolepackageack() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.loadRolePackageAck)
  return _internal_mutable_loadrolepackageack();
}
inline void CommonMessage::set_allocated_loadrolepackageack(::ss_proto::LoadRolePackageAck* loadrolepackageack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete loadrolepackageack_;
  }
  if (loadrolepackageack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(loadrolepackageack);
    if (message_arena != submessage_arena) {
      loadrolepackageack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loadrolepackageack, submessage_arena);
    }
    
  } else {
    
  }
  loadrolepackageack_ = loadrolepackageack;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.loadRolePackageAck)
}

// .ss_proto.FriendAddReq friendAddReq = 44;
inline bool CommonMessage::_internal_has_friendaddreq() const {
  return this != internal_default_instance() && friendaddreq_ != nullptr;
}
inline bool CommonMessage::has_friendaddreq() const {
  return _internal_has_friendaddreq();
}
inline void CommonMessage::clear_friendaddreq() {
  if (GetArena() == nullptr && friendaddreq_ != nullptr) {
    delete friendaddreq_;
  }
  friendaddreq_ = nullptr;
}
inline const ::ss_proto::FriendAddReq& CommonMessage::_internal_friendaddreq() const {
  const ::ss_proto::FriendAddReq* p = friendaddreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::FriendAddReq*>(
      &::ss_proto::_FriendAddReq_default_instance_);
}
inline const ::ss_proto::FriendAddReq& CommonMessage::friendaddreq() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.friendAddReq)
  return _internal_friendaddreq();
}
inline void CommonMessage::unsafe_arena_set_allocated_friendaddreq(
    ::ss_proto::FriendAddReq* friendaddreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(friendaddreq_);
  }
  friendaddreq_ = friendaddreq;
  if (friendaddreq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.friendAddReq)
}
inline ::ss_proto::FriendAddReq* CommonMessage::release_friendaddreq() {
  auto temp = unsafe_arena_release_friendaddreq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::FriendAddReq* CommonMessage::unsafe_arena_release_friendaddreq() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.friendAddReq)
  
  ::ss_proto::FriendAddReq* temp = friendaddreq_;
  friendaddreq_ = nullptr;
  return temp;
}
inline ::ss_proto::FriendAddReq* CommonMessage::_internal_mutable_friendaddreq() {
  
  if (friendaddreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::FriendAddReq>(GetArena());
    friendaddreq_ = p;
  }
  return friendaddreq_;
}
inline ::ss_proto::FriendAddReq* CommonMessage::mutable_friendaddreq() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.friendAddReq)
  return _internal_mutable_friendaddreq();
}
inline void CommonMessage::set_allocated_friendaddreq(::ss_proto::FriendAddReq* friendaddreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete friendaddreq_;
  }
  if (friendaddreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(friendaddreq);
    if (message_arena != submessage_arena) {
      friendaddreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friendaddreq, submessage_arena);
    }
    
  } else {
    
  }
  friendaddreq_ = friendaddreq;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.friendAddReq)
}

// .ss_proto.FriendAddAck friendAddAck = 45;
inline bool CommonMessage::_internal_has_friendaddack() const {
  return this != internal_default_instance() && friendaddack_ != nullptr;
}
inline bool CommonMessage::has_friendaddack() const {
  return _internal_has_friendaddack();
}
inline void CommonMessage::clear_friendaddack() {
  if (GetArena() == nullptr && friendaddack_ != nullptr) {
    delete friendaddack_;
  }
  friendaddack_ = nullptr;
}
inline const ::ss_proto::FriendAddAck& CommonMessage::_internal_friendaddack() const {
  const ::ss_proto::FriendAddAck* p = friendaddack_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::FriendAddAck*>(
      &::ss_proto::_FriendAddAck_default_instance_);
}
inline const ::ss_proto::FriendAddAck& CommonMessage::friendaddack() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.friendAddAck)
  return _internal_friendaddack();
}
inline void CommonMessage::unsafe_arena_set_allocated_friendaddack(
    ::ss_proto::FriendAddAck* friendaddack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(friendaddack_);
  }
  friendaddack_ = friendaddack;
  if (friendaddack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.friendAddAck)
}
inline ::ss_proto::FriendAddAck* CommonMessage::release_friendaddack() {
  auto temp = unsafe_arena_release_friendaddack();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::FriendAddAck* CommonMessage::unsafe_arena_release_friendaddack() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.friendAddAck)
  
  ::ss_proto::FriendAddAck* temp = friendaddack_;
  friendaddack_ = nullptr;
  return temp;
}
inline ::ss_proto::FriendAddAck* CommonMessage::_internal_mutable_friendaddack() {
  
  if (friendaddack_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::FriendAddAck>(GetArena());
    friendaddack_ = p;
  }
  return friendaddack_;
}
inline ::ss_proto::FriendAddAck* CommonMessage::mutable_friendaddack() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.friendAddAck)
  return _internal_mutable_friendaddack();
}
inline void CommonMessage::set_allocated_friendaddack(::ss_proto::FriendAddAck* friendaddack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete friendaddack_;
  }
  if (friendaddack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(friendaddack);
    if (message_arena != submessage_arena) {
      friendaddack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friendaddack, submessage_arena);
    }
    
  } else {
    
  }
  friendaddack_ = friendaddack;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.friendAddAck)
}

// .ss_proto.FriendDelReq friendDelReq = 46;
inline bool CommonMessage::_internal_has_frienddelreq() const {
  return this != internal_default_instance() && frienddelreq_ != nullptr;
}
inline bool CommonMessage::has_frienddelreq() const {
  return _internal_has_frienddelreq();
}
inline void CommonMessage::clear_frienddelreq() {
  if (GetArena() == nullptr && frienddelreq_ != nullptr) {
    delete frienddelreq_;
  }
  frienddelreq_ = nullptr;
}
inline const ::ss_proto::FriendDelReq& CommonMessage::_internal_frienddelreq() const {
  const ::ss_proto::FriendDelReq* p = frienddelreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::FriendDelReq*>(
      &::ss_proto::_FriendDelReq_default_instance_);
}
inline const ::ss_proto::FriendDelReq& CommonMessage::frienddelreq() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.friendDelReq)
  return _internal_frienddelreq();
}
inline void CommonMessage::unsafe_arena_set_allocated_frienddelreq(
    ::ss_proto::FriendDelReq* frienddelreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frienddelreq_);
  }
  frienddelreq_ = frienddelreq;
  if (frienddelreq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.friendDelReq)
}
inline ::ss_proto::FriendDelReq* CommonMessage::release_frienddelreq() {
  auto temp = unsafe_arena_release_frienddelreq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::FriendDelReq* CommonMessage::unsafe_arena_release_frienddelreq() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.friendDelReq)
  
  ::ss_proto::FriendDelReq* temp = frienddelreq_;
  frienddelreq_ = nullptr;
  return temp;
}
inline ::ss_proto::FriendDelReq* CommonMessage::_internal_mutable_frienddelreq() {
  
  if (frienddelreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::FriendDelReq>(GetArena());
    frienddelreq_ = p;
  }
  return frienddelreq_;
}
inline ::ss_proto::FriendDelReq* CommonMessage::mutable_frienddelreq() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.friendDelReq)
  return _internal_mutable_frienddelreq();
}
inline void CommonMessage::set_allocated_frienddelreq(::ss_proto::FriendDelReq* frienddelreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete frienddelreq_;
  }
  if (frienddelreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(frienddelreq);
    if (message_arena != submessage_arena) {
      frienddelreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frienddelreq, submessage_arena);
    }
    
  } else {
    
  }
  frienddelreq_ = frienddelreq;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.friendDelReq)
}

// .ss_proto.FriendDelAck friendDelAck = 47;
inline bool CommonMessage::_internal_has_frienddelack() const {
  return this != internal_default_instance() && frienddelack_ != nullptr;
}
inline bool CommonMessage::has_frienddelack() const {
  return _internal_has_frienddelack();
}
inline void CommonMessage::clear_frienddelack() {
  if (GetArena() == nullptr && frienddelack_ != nullptr) {
    delete frienddelack_;
  }
  frienddelack_ = nullptr;
}
inline const ::ss_proto::FriendDelAck& CommonMessage::_internal_frienddelack() const {
  const ::ss_proto::FriendDelAck* p = frienddelack_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::FriendDelAck*>(
      &::ss_proto::_FriendDelAck_default_instance_);
}
inline const ::ss_proto::FriendDelAck& CommonMessage::frienddelack() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.friendDelAck)
  return _internal_frienddelack();
}
inline void CommonMessage::unsafe_arena_set_allocated_frienddelack(
    ::ss_proto::FriendDelAck* frienddelack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frienddelack_);
  }
  frienddelack_ = frienddelack;
  if (frienddelack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.friendDelAck)
}
inline ::ss_proto::FriendDelAck* CommonMessage::release_frienddelack() {
  auto temp = unsafe_arena_release_frienddelack();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::FriendDelAck* CommonMessage::unsafe_arena_release_frienddelack() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.friendDelAck)
  
  ::ss_proto::FriendDelAck* temp = frienddelack_;
  frienddelack_ = nullptr;
  return temp;
}
inline ::ss_proto::FriendDelAck* CommonMessage::_internal_mutable_frienddelack() {
  
  if (frienddelack_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::FriendDelAck>(GetArena());
    frienddelack_ = p;
  }
  return frienddelack_;
}
inline ::ss_proto::FriendDelAck* CommonMessage::mutable_frienddelack() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.friendDelAck)
  return _internal_mutable_frienddelack();
}
inline void CommonMessage::set_allocated_frienddelack(::ss_proto::FriendDelAck* frienddelack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete frienddelack_;
  }
  if (frienddelack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(frienddelack);
    if (message_arena != submessage_arena) {
      frienddelack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frienddelack, submessage_arena);
    }
    
  } else {
    
  }
  frienddelack_ = frienddelack;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.friendDelAck)
}

// .ss_proto.FriendListReq friendListReq = 48;
inline bool CommonMessage::_internal_has_friendlistreq() const {
  return this != internal_default_instance() && friendlistreq_ != nullptr;
}
inline bool CommonMessage::has_friendlistreq() const {
  return _internal_has_friendlistreq();
}
inline void CommonMessage::clear_friendlistreq() {
  if (GetArena() == nullptr && friendlistreq_ != nullptr) {
    delete friendlistreq_;
  }
  friendlistreq_ = nullptr;
}
inline const ::ss_proto::FriendListReq& CommonMessage::_internal_friendlistreq() const {
  const ::ss_proto::FriendListReq* p = friendlistreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::FriendListReq*>(
      &::ss_proto::_FriendListReq_default_instance_);
}
inline const ::ss_proto::FriendListReq& CommonMessage::friendlistreq() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.friendListReq)
  return _internal_friendlistreq();
}
inline void CommonMessage::unsafe_arena_set_allocated_friendlistreq(
    ::ss_proto::FriendListReq* friendlistreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(friendlistreq_);
  }
  friendlistreq_ = friendlistreq;
  if (friendlistreq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.friendListReq)
}
inline ::ss_proto::FriendListReq* CommonMessage::release_friendlistreq() {
  auto temp = unsafe_arena_release_friendlistreq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::FriendListReq* CommonMessage::unsafe_arena_release_friendlistreq() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.friendListReq)
  
  ::ss_proto::FriendListReq* temp = friendlistreq_;
  friendlistreq_ = nullptr;
  return temp;
}
inline ::ss_proto::FriendListReq* CommonMessage::_internal_mutable_friendlistreq() {
  
  if (friendlistreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::FriendListReq>(GetArena());
    friendlistreq_ = p;
  }
  return friendlistreq_;
}
inline ::ss_proto::FriendListReq* CommonMessage::mutable_friendlistreq() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.friendListReq)
  return _internal_mutable_friendlistreq();
}
inline void CommonMessage::set_allocated_friendlistreq(::ss_proto::FriendListReq* friendlistreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete friendlistreq_;
  }
  if (friendlistreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(friendlistreq);
    if (message_arena != submessage_arena) {
      friendlistreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friendlistreq, submessage_arena);
    }
    
  } else {
    
  }
  friendlistreq_ = friendlistreq;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.friendListReq)
}

// .ss_proto.FriendListAck friendListAck = 49;
inline bool CommonMessage::_internal_has_friendlistack() const {
  return this != internal_default_instance() && friendlistack_ != nullptr;
}
inline bool CommonMessage::has_friendlistack() const {
  return _internal_has_friendlistack();
}
inline void CommonMessage::clear_friendlistack() {
  if (GetArena() == nullptr && friendlistack_ != nullptr) {
    delete friendlistack_;
  }
  friendlistack_ = nullptr;
}
inline const ::ss_proto::FriendListAck& CommonMessage::_internal_friendlistack() const {
  const ::ss_proto::FriendListAck* p = friendlistack_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::FriendListAck*>(
      &::ss_proto::_FriendListAck_default_instance_);
}
inline const ::ss_proto::FriendListAck& CommonMessage::friendlistack() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.friendListAck)
  return _internal_friendlistack();
}
inline void CommonMessage::unsafe_arena_set_allocated_friendlistack(
    ::ss_proto::FriendListAck* friendlistack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(friendlistack_);
  }
  friendlistack_ = friendlistack;
  if (friendlistack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.friendListAck)
}
inline ::ss_proto::FriendListAck* CommonMessage::release_friendlistack() {
  auto temp = unsafe_arena_release_friendlistack();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::FriendListAck* CommonMessage::unsafe_arena_release_friendlistack() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.friendListAck)
  
  ::ss_proto::FriendListAck* temp = friendlistack_;
  friendlistack_ = nullptr;
  return temp;
}
inline ::ss_proto::FriendListAck* CommonMessage::_internal_mutable_friendlistack() {
  
  if (friendlistack_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::FriendListAck>(GetArena());
    friendlistack_ = p;
  }
  return friendlistack_;
}
inline ::ss_proto::FriendListAck* CommonMessage::mutable_friendlistack() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.friendListAck)
  return _internal_mutable_friendlistack();
}
inline void CommonMessage::set_allocated_friendlistack(::ss_proto::FriendListAck* friendlistack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete friendlistack_;
  }
  if (friendlistack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(friendlistack);
    if (message_arena != submessage_arena) {
      friendlistack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friendlistack, submessage_arena);
    }
    
  } else {
    
  }
  friendlistack_ = friendlistack;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.friendListAck)
}

// .ss_proto.RoleBoardReq roleBoardReq = 50;
inline bool CommonMessage::_internal_has_roleboardreq() const {
  return this != internal_default_instance() && roleboardreq_ != nullptr;
}
inline bool CommonMessage::has_roleboardreq() const {
  return _internal_has_roleboardreq();
}
inline void CommonMessage::clear_roleboardreq() {
  if (GetArena() == nullptr && roleboardreq_ != nullptr) {
    delete roleboardreq_;
  }
  roleboardreq_ = nullptr;
}
inline const ::ss_proto::RoleBoardReq& CommonMessage::_internal_roleboardreq() const {
  const ::ss_proto::RoleBoardReq* p = roleboardreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::RoleBoardReq*>(
      &::ss_proto::_RoleBoardReq_default_instance_);
}
inline const ::ss_proto::RoleBoardReq& CommonMessage::roleboardreq() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.roleBoardReq)
  return _internal_roleboardreq();
}
inline void CommonMessage::unsafe_arena_set_allocated_roleboardreq(
    ::ss_proto::RoleBoardReq* roleboardreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roleboardreq_);
  }
  roleboardreq_ = roleboardreq;
  if (roleboardreq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.roleBoardReq)
}
inline ::ss_proto::RoleBoardReq* CommonMessage::release_roleboardreq() {
  auto temp = unsafe_arena_release_roleboardreq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::RoleBoardReq* CommonMessage::unsafe_arena_release_roleboardreq() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.roleBoardReq)
  
  ::ss_proto::RoleBoardReq* temp = roleboardreq_;
  roleboardreq_ = nullptr;
  return temp;
}
inline ::ss_proto::RoleBoardReq* CommonMessage::_internal_mutable_roleboardreq() {
  
  if (roleboardreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::RoleBoardReq>(GetArena());
    roleboardreq_ = p;
  }
  return roleboardreq_;
}
inline ::ss_proto::RoleBoardReq* CommonMessage::mutable_roleboardreq() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.roleBoardReq)
  return _internal_mutable_roleboardreq();
}
inline void CommonMessage::set_allocated_roleboardreq(::ss_proto::RoleBoardReq* roleboardreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete roleboardreq_;
  }
  if (roleboardreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(roleboardreq);
    if (message_arena != submessage_arena) {
      roleboardreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roleboardreq, submessage_arena);
    }
    
  } else {
    
  }
  roleboardreq_ = roleboardreq;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.roleBoardReq)
}

// .ss_proto.RoleBoardAck roleBoardAck = 51;
inline bool CommonMessage::_internal_has_roleboardack() const {
  return this != internal_default_instance() && roleboardack_ != nullptr;
}
inline bool CommonMessage::has_roleboardack() const {
  return _internal_has_roleboardack();
}
inline void CommonMessage::clear_roleboardack() {
  if (GetArena() == nullptr && roleboardack_ != nullptr) {
    delete roleboardack_;
  }
  roleboardack_ = nullptr;
}
inline const ::ss_proto::RoleBoardAck& CommonMessage::_internal_roleboardack() const {
  const ::ss_proto::RoleBoardAck* p = roleboardack_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::RoleBoardAck*>(
      &::ss_proto::_RoleBoardAck_default_instance_);
}
inline const ::ss_proto::RoleBoardAck& CommonMessage::roleboardack() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.roleBoardAck)
  return _internal_roleboardack();
}
inline void CommonMessage::unsafe_arena_set_allocated_roleboardack(
    ::ss_proto::RoleBoardAck* roleboardack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roleboardack_);
  }
  roleboardack_ = roleboardack;
  if (roleboardack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.roleBoardAck)
}
inline ::ss_proto::RoleBoardAck* CommonMessage::release_roleboardack() {
  auto temp = unsafe_arena_release_roleboardack();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::RoleBoardAck* CommonMessage::unsafe_arena_release_roleboardack() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.roleBoardAck)
  
  ::ss_proto::RoleBoardAck* temp = roleboardack_;
  roleboardack_ = nullptr;
  return temp;
}
inline ::ss_proto::RoleBoardAck* CommonMessage::_internal_mutable_roleboardack() {
  
  if (roleboardack_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::RoleBoardAck>(GetArena());
    roleboardack_ = p;
  }
  return roleboardack_;
}
inline ::ss_proto::RoleBoardAck* CommonMessage::mutable_roleboardack() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.roleBoardAck)
  return _internal_mutable_roleboardack();
}
inline void CommonMessage::set_allocated_roleboardack(::ss_proto::RoleBoardAck* roleboardack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete roleboardack_;
  }
  if (roleboardack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(roleboardack);
    if (message_arena != submessage_arena) {
      roleboardack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roleboardack, submessage_arena);
    }
    
  } else {
    
  }
  roleboardack_ = roleboardack;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.roleBoardAck)
}

// .ss_proto.SceneUpdateReq sceneUpdateReq = 54;
inline bool CommonMessage::_internal_has_sceneupdatereq() const {
  return this != internal_default_instance() && sceneupdatereq_ != nullptr;
}
inline bool CommonMessage::has_sceneupdatereq() const {
  return _internal_has_sceneupdatereq();
}
inline void CommonMessage::clear_sceneupdatereq() {
  if (GetArena() == nullptr && sceneupdatereq_ != nullptr) {
    delete sceneupdatereq_;
  }
  sceneupdatereq_ = nullptr;
}
inline const ::ss_proto::SceneUpdateReq& CommonMessage::_internal_sceneupdatereq() const {
  const ::ss_proto::SceneUpdateReq* p = sceneupdatereq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::SceneUpdateReq*>(
      &::ss_proto::_SceneUpdateReq_default_instance_);
}
inline const ::ss_proto::SceneUpdateReq& CommonMessage::sceneupdatereq() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.sceneUpdateReq)
  return _internal_sceneupdatereq();
}
inline void CommonMessage::unsafe_arena_set_allocated_sceneupdatereq(
    ::ss_proto::SceneUpdateReq* sceneupdatereq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sceneupdatereq_);
  }
  sceneupdatereq_ = sceneupdatereq;
  if (sceneupdatereq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.sceneUpdateReq)
}
inline ::ss_proto::SceneUpdateReq* CommonMessage::release_sceneupdatereq() {
  auto temp = unsafe_arena_release_sceneupdatereq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::SceneUpdateReq* CommonMessage::unsafe_arena_release_sceneupdatereq() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.sceneUpdateReq)
  
  ::ss_proto::SceneUpdateReq* temp = sceneupdatereq_;
  sceneupdatereq_ = nullptr;
  return temp;
}
inline ::ss_proto::SceneUpdateReq* CommonMessage::_internal_mutable_sceneupdatereq() {
  
  if (sceneupdatereq_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::SceneUpdateReq>(GetArena());
    sceneupdatereq_ = p;
  }
  return sceneupdatereq_;
}
inline ::ss_proto::SceneUpdateReq* CommonMessage::mutable_sceneupdatereq() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.sceneUpdateReq)
  return _internal_mutable_sceneupdatereq();
}
inline void CommonMessage::set_allocated_sceneupdatereq(::ss_proto::SceneUpdateReq* sceneupdatereq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sceneupdatereq_;
  }
  if (sceneupdatereq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sceneupdatereq);
    if (message_arena != submessage_arena) {
      sceneupdatereq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sceneupdatereq, submessage_arena);
    }
    
  } else {
    
  }
  sceneupdatereq_ = sceneupdatereq;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.sceneUpdateReq)
}

// .ss_proto.SceneUpdateAck sceneUpdateAck = 55;
inline bool CommonMessage::_internal_has_sceneupdateack() const {
  return this != internal_default_instance() && sceneupdateack_ != nullptr;
}
inline bool CommonMessage::has_sceneupdateack() const {
  return _internal_has_sceneupdateack();
}
inline void CommonMessage::clear_sceneupdateack() {
  if (GetArena() == nullptr && sceneupdateack_ != nullptr) {
    delete sceneupdateack_;
  }
  sceneupdateack_ = nullptr;
}
inline const ::ss_proto::SceneUpdateAck& CommonMessage::_internal_sceneupdateack() const {
  const ::ss_proto::SceneUpdateAck* p = sceneupdateack_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::SceneUpdateAck*>(
      &::ss_proto::_SceneUpdateAck_default_instance_);
}
inline const ::ss_proto::SceneUpdateAck& CommonMessage::sceneupdateack() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.sceneUpdateAck)
  return _internal_sceneupdateack();
}
inline void CommonMessage::unsafe_arena_set_allocated_sceneupdateack(
    ::ss_proto::SceneUpdateAck* sceneupdateack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sceneupdateack_);
  }
  sceneupdateack_ = sceneupdateack;
  if (sceneupdateack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.sceneUpdateAck)
}
inline ::ss_proto::SceneUpdateAck* CommonMessage::release_sceneupdateack() {
  auto temp = unsafe_arena_release_sceneupdateack();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::SceneUpdateAck* CommonMessage::unsafe_arena_release_sceneupdateack() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.sceneUpdateAck)
  
  ::ss_proto::SceneUpdateAck* temp = sceneupdateack_;
  sceneupdateack_ = nullptr;
  return temp;
}
inline ::ss_proto::SceneUpdateAck* CommonMessage::_internal_mutable_sceneupdateack() {
  
  if (sceneupdateack_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::SceneUpdateAck>(GetArena());
    sceneupdateack_ = p;
  }
  return sceneupdateack_;
}
inline ::ss_proto::SceneUpdateAck* CommonMessage::mutable_sceneupdateack() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.sceneUpdateAck)
  return _internal_mutable_sceneupdateack();
}
inline void CommonMessage::set_allocated_sceneupdateack(::ss_proto::SceneUpdateAck* sceneupdateack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sceneupdateack_;
  }
  if (sceneupdateack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sceneupdateack);
    if (message_arena != submessage_arena) {
      sceneupdateack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sceneupdateack, submessage_arena);
    }
    
  } else {
    
  }
  sceneupdateack_ = sceneupdateack;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.sceneUpdateAck)
}

// .ss_proto.SceneProcReq sceneProcReq = 56;
inline bool CommonMessage::_internal_has_sceneprocreq() const {
  return this != internal_default_instance() && sceneprocreq_ != nullptr;
}
inline bool CommonMessage::has_sceneprocreq() const {
  return _internal_has_sceneprocreq();
}
inline void CommonMessage::clear_sceneprocreq() {
  if (GetArena() == nullptr && sceneprocreq_ != nullptr) {
    delete sceneprocreq_;
  }
  sceneprocreq_ = nullptr;
}
inline const ::ss_proto::SceneProcReq& CommonMessage::_internal_sceneprocreq() const {
  const ::ss_proto::SceneProcReq* p = sceneprocreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::SceneProcReq*>(
      &::ss_proto::_SceneProcReq_default_instance_);
}
inline const ::ss_proto::SceneProcReq& CommonMessage::sceneprocreq() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.sceneProcReq)
  return _internal_sceneprocreq();
}
inline void CommonMessage::unsafe_arena_set_allocated_sceneprocreq(
    ::ss_proto::SceneProcReq* sceneprocreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sceneprocreq_);
  }
  sceneprocreq_ = sceneprocreq;
  if (sceneprocreq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.sceneProcReq)
}
inline ::ss_proto::SceneProcReq* CommonMessage::release_sceneprocreq() {
  auto temp = unsafe_arena_release_sceneprocreq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::SceneProcReq* CommonMessage::unsafe_arena_release_sceneprocreq() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.sceneProcReq)
  
  ::ss_proto::SceneProcReq* temp = sceneprocreq_;
  sceneprocreq_ = nullptr;
  return temp;
}
inline ::ss_proto::SceneProcReq* CommonMessage::_internal_mutable_sceneprocreq() {
  
  if (sceneprocreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::SceneProcReq>(GetArena());
    sceneprocreq_ = p;
  }
  return sceneprocreq_;
}
inline ::ss_proto::SceneProcReq* CommonMessage::mutable_sceneprocreq() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.sceneProcReq)
  return _internal_mutable_sceneprocreq();
}
inline void CommonMessage::set_allocated_sceneprocreq(::ss_proto::SceneProcReq* sceneprocreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sceneprocreq_;
  }
  if (sceneprocreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sceneprocreq);
    if (message_arena != submessage_arena) {
      sceneprocreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sceneprocreq, submessage_arena);
    }
    
  } else {
    
  }
  sceneprocreq_ = sceneprocreq;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.sceneProcReq)
}

// .ss_proto.SceneProcAck sceneProcAck = 57;
inline bool CommonMessage::_internal_has_sceneprocack() const {
  return this != internal_default_instance() && sceneprocack_ != nullptr;
}
inline bool CommonMessage::has_sceneprocack() const {
  return _internal_has_sceneprocack();
}
inline void CommonMessage::clear_sceneprocack() {
  if (GetArena() == nullptr && sceneprocack_ != nullptr) {
    delete sceneprocack_;
  }
  sceneprocack_ = nullptr;
}
inline const ::ss_proto::SceneProcAck& CommonMessage::_internal_sceneprocack() const {
  const ::ss_proto::SceneProcAck* p = sceneprocack_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::SceneProcAck*>(
      &::ss_proto::_SceneProcAck_default_instance_);
}
inline const ::ss_proto::SceneProcAck& CommonMessage::sceneprocack() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.sceneProcAck)
  return _internal_sceneprocack();
}
inline void CommonMessage::unsafe_arena_set_allocated_sceneprocack(
    ::ss_proto::SceneProcAck* sceneprocack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sceneprocack_);
  }
  sceneprocack_ = sceneprocack;
  if (sceneprocack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.sceneProcAck)
}
inline ::ss_proto::SceneProcAck* CommonMessage::release_sceneprocack() {
  auto temp = unsafe_arena_release_sceneprocack();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::SceneProcAck* CommonMessage::unsafe_arena_release_sceneprocack() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.sceneProcAck)
  
  ::ss_proto::SceneProcAck* temp = sceneprocack_;
  sceneprocack_ = nullptr;
  return temp;
}
inline ::ss_proto::SceneProcAck* CommonMessage::_internal_mutable_sceneprocack() {
  
  if (sceneprocack_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::SceneProcAck>(GetArena());
    sceneprocack_ = p;
  }
  return sceneprocack_;
}
inline ::ss_proto::SceneProcAck* CommonMessage::mutable_sceneprocack() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.sceneProcAck)
  return _internal_mutable_sceneprocack();
}
inline void CommonMessage::set_allocated_sceneprocack(::ss_proto::SceneProcAck* sceneprocack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sceneprocack_;
  }
  if (sceneprocack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sceneprocack);
    if (message_arena != submessage_arena) {
      sceneprocack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sceneprocack, submessage_arena);
    }
    
  } else {
    
  }
  sceneprocack_ = sceneprocack;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.sceneProcAck)
}

// .ss_proto.LoginSwtichReq loginSwtichReq = 58;
inline bool CommonMessage::_internal_has_loginswtichreq() const {
  return this != internal_default_instance() && loginswtichreq_ != nullptr;
}
inline bool CommonMessage::has_loginswtichreq() const {
  return _internal_has_loginswtichreq();
}
inline void CommonMessage::clear_loginswtichreq() {
  if (GetArena() == nullptr && loginswtichreq_ != nullptr) {
    delete loginswtichreq_;
  }
  loginswtichreq_ = nullptr;
}
inline const ::ss_proto::LoginSwtichReq& CommonMessage::_internal_loginswtichreq() const {
  const ::ss_proto::LoginSwtichReq* p = loginswtichreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::LoginSwtichReq*>(
      &::ss_proto::_LoginSwtichReq_default_instance_);
}
inline const ::ss_proto::LoginSwtichReq& CommonMessage::loginswtichreq() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.loginSwtichReq)
  return _internal_loginswtichreq();
}
inline void CommonMessage::unsafe_arena_set_allocated_loginswtichreq(
    ::ss_proto::LoginSwtichReq* loginswtichreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loginswtichreq_);
  }
  loginswtichreq_ = loginswtichreq;
  if (loginswtichreq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.loginSwtichReq)
}
inline ::ss_proto::LoginSwtichReq* CommonMessage::release_loginswtichreq() {
  auto temp = unsafe_arena_release_loginswtichreq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::LoginSwtichReq* CommonMessage::unsafe_arena_release_loginswtichreq() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.loginSwtichReq)
  
  ::ss_proto::LoginSwtichReq* temp = loginswtichreq_;
  loginswtichreq_ = nullptr;
  return temp;
}
inline ::ss_proto::LoginSwtichReq* CommonMessage::_internal_mutable_loginswtichreq() {
  
  if (loginswtichreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::LoginSwtichReq>(GetArena());
    loginswtichreq_ = p;
  }
  return loginswtichreq_;
}
inline ::ss_proto::LoginSwtichReq* CommonMessage::mutable_loginswtichreq() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.loginSwtichReq)
  return _internal_mutable_loginswtichreq();
}
inline void CommonMessage::set_allocated_loginswtichreq(::ss_proto::LoginSwtichReq* loginswtichreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete loginswtichreq_;
  }
  if (loginswtichreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(loginswtichreq);
    if (message_arena != submessage_arena) {
      loginswtichreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loginswtichreq, submessage_arena);
    }
    
  } else {
    
  }
  loginswtichreq_ = loginswtichreq;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.loginSwtichReq)
}

// .ss_proto.LoginSwtichAck loginSwtichAck = 59;
inline bool CommonMessage::_internal_has_loginswtichack() const {
  return this != internal_default_instance() && loginswtichack_ != nullptr;
}
inline bool CommonMessage::has_loginswtichack() const {
  return _internal_has_loginswtichack();
}
inline void CommonMessage::clear_loginswtichack() {
  if (GetArena() == nullptr && loginswtichack_ != nullptr) {
    delete loginswtichack_;
  }
  loginswtichack_ = nullptr;
}
inline const ::ss_proto::LoginSwtichAck& CommonMessage::_internal_loginswtichack() const {
  const ::ss_proto::LoginSwtichAck* p = loginswtichack_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ss_proto::LoginSwtichAck*>(
      &::ss_proto::_LoginSwtichAck_default_instance_);
}
inline const ::ss_proto::LoginSwtichAck& CommonMessage::loginswtichack() const {
  // @@protoc_insertion_point(field_get:ss_proto.CommonMessage.loginSwtichAck)
  return _internal_loginswtichack();
}
inline void CommonMessage::unsafe_arena_set_allocated_loginswtichack(
    ::ss_proto::LoginSwtichAck* loginswtichack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loginswtichack_);
  }
  loginswtichack_ = loginswtichack;
  if (loginswtichack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ss_proto.CommonMessage.loginSwtichAck)
}
inline ::ss_proto::LoginSwtichAck* CommonMessage::release_loginswtichack() {
  auto temp = unsafe_arena_release_loginswtichack();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ss_proto::LoginSwtichAck* CommonMessage::unsafe_arena_release_loginswtichack() {
  // @@protoc_insertion_point(field_release:ss_proto.CommonMessage.loginSwtichAck)
  
  ::ss_proto::LoginSwtichAck* temp = loginswtichack_;
  loginswtichack_ = nullptr;
  return temp;
}
inline ::ss_proto::LoginSwtichAck* CommonMessage::_internal_mutable_loginswtichack() {
  
  if (loginswtichack_ == nullptr) {
    auto* p = CreateMaybeMessage<::ss_proto::LoginSwtichAck>(GetArena());
    loginswtichack_ = p;
  }
  return loginswtichack_;
}
inline ::ss_proto::LoginSwtichAck* CommonMessage::mutable_loginswtichack() {
  // @@protoc_insertion_point(field_mutable:ss_proto.CommonMessage.loginSwtichAck)
  return _internal_mutable_loginswtichack();
}
inline void CommonMessage::set_allocated_loginswtichack(::ss_proto::LoginSwtichAck* loginswtichack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete loginswtichack_;
  }
  if (loginswtichack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(loginswtichack);
    if (message_arena != submessage_arena) {
      loginswtichack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loginswtichack, submessage_arena);
    }
    
  } else {
    
  }
  loginswtichack_ = loginswtichack;
  // @@protoc_insertion_point(field_set_allocated:ss_proto.CommonMessage.loginSwtichAck)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ss_proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ss_proto::Cmd> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ss_proto::Cmd>() {
  return ::ss_proto::Cmd_descriptor();
}
template <> struct is_proto_enum< ::ss_proto::CastCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ss_proto::CastCode>() {
  return ::ss_proto::CastCode_descriptor();
}
template <> struct is_proto_enum< ::ss_proto::CastType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ss_proto::CastType>() {
  return ::ss_proto::CastType_descriptor();
}
template <> struct is_proto_enum< ::ss_proto::ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ss_proto::ErrorCode>() {
  return ::ss_proto::ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::ss_proto::LogDataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ss_proto::LogDataType>() {
  return ::ss_proto::LogDataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ss_5fproto_2eproto
